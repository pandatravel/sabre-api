<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\DestinationFinder\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class DestinationFinderResponseFareInfoItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\DestinationFinder\\DestinationFinderResponseFareInfoItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\DestinationFinder\DestinationFinderResponseFareInfoItem;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\DestinationFinder\DestinationFinderResponseFareInfoItem();
        if (property_exists($data, 'CurrencyCode')) {
            $object->setCurrencyCode($data->{'CurrencyCode'});
        }
        if (property_exists($data, 'DestinationLocation')) {
            $object->setDestinationLocation($data->{'DestinationLocation'});
        }
        if (property_exists($data, 'DepartureDateTime')) {
            $object->setDepartureDateTime($data->{'DepartureDateTime'});
        }
        if (property_exists($data, 'ReturnDateTime')) {
            $object->setReturnDateTime($data->{'ReturnDateTime'});
        }
        if (property_exists($data, 'Theme')) {
            $object->setTheme($data->{'Theme'});
        }
        if (property_exists($data, 'DestinationRank')) {
            $object->setDestinationRank($data->{'DestinationRank'});
        }
        if (property_exists($data, 'Location')) {
            $object->setLocation($data->{'Location'});
        }
        if (property_exists($data, 'Region')) {
            $object->setRegion($data->{'Region'});
        }
        if (property_exists($data, 'LowestNonStopFare')) {
            $object->setLowestNonStopFare($this->denormalizer->denormalize($data->{'LowestNonStopFare'}, 'Ammonkc\\SabreApi\\Model\\DestinationFinder\\DestinationFinderResponseFareInfoItemLowestNonStopFare', 'json', $context));
        }
        if (property_exists($data, 'LowestFare')) {
            $object->setLowestFare($this->denormalizer->denormalize($data->{'LowestFare'}, 'Ammonkc\\SabreApi\\Model\\DestinationFinder\\DestinationFinderResponseFareInfoItemLowestFare', 'json', $context));
        }
        if (property_exists($data, 'Distance')) {
            $object->setDistance($data->{'Distance'});
        }
        if (property_exists($data, 'PricePerMile')) {
            $object->setPricePerMile($data->{'PricePerMile'});
        }
        if (property_exists($data, 'Links')) {
            $values = [];
            foreach ($data->{'Links'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\DestinationFinder\\DestinationFinderResponseFareInfoItemLinksItem', 'json', $context);
            }
            $object->setLinks($values);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getCurrencyCode()) {
            $data->{'CurrencyCode'} = $object->getCurrencyCode();
        }
        if (null !== $object->getDestinationLocation()) {
            $data->{'DestinationLocation'} = $object->getDestinationLocation();
        }
        if (null !== $object->getDepartureDateTime()) {
            $data->{'DepartureDateTime'} = $object->getDepartureDateTime();
        }
        if (null !== $object->getReturnDateTime()) {
            $data->{'ReturnDateTime'} = $object->getReturnDateTime();
        }
        if (null !== $object->getTheme()) {
            $data->{'Theme'} = $object->getTheme();
        }
        if (null !== $object->getDestinationRank()) {
            $data->{'DestinationRank'} = $object->getDestinationRank();
        }
        if (null !== $object->getLocation()) {
            $data->{'Location'} = $object->getLocation();
        }
        if (null !== $object->getRegion()) {
            $data->{'Region'} = $object->getRegion();
        }
        if (null !== $object->getLowestNonStopFare()) {
            $data->{'LowestNonStopFare'} = $this->normalizer->normalize($object->getLowestNonStopFare(), 'json', $context);
        }
        if (null !== $object->getLowestFare()) {
            $data->{'LowestFare'} = $this->normalizer->normalize($object->getLowestFare(), 'json', $context);
        }
        if (null !== $object->getDistance()) {
            $data->{'Distance'} = $object->getDistance();
        }
        if (null !== $object->getPricePerMile()) {
            $data->{'PricePerMile'} = $object->getPricePerMile();
        }
        if (null !== $object->getLinks()) {
            $values = [];
            foreach ($object->getLinks() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'Links'} = $values;
        }

        return $data;
    }
}
