<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\SeatMap\Model;

class SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItem
{
    /**
     * @var int
     */
    protected $typeCount;
    /**
     * Passenger type being requested for pricing. If the passenger type sent by the GDS is not in the below predefined list, then it is shown as is.
     Predefined values are: ADT= Adult CHD = Child INF = Infant GOV = Government MIL = Military SRC = Senior citizen STD = Student YTH = Youth
     Example: CHD.

     *
     * @var string
     */
    protected $typeRequested;
    /**
     * Passenger type being priced. This type can be different from the type requested if there is no available fare for the requested type. For example the requested type is GOV and the priced type is ADT because there is no available fare for type GOV and there is an available fare for type ADT. If the passenger type sent by the GDS is not the below predefined list, then it is shown as is.
    Predefined values are: ADT= Adult CHD = Child INF = Infant GOV = Government MIL = Military SRC = Senior citizen STD = Student YTH = Youth
    Example: ADT.

     *
     * @var string
     */
    protected $typePriced;
    /**
     * Ticket by date/ time.
    Example: 2013-12-25.this is not the Booking Time Limit (BookByDate) that applies to offers in a shopping response. This is the date/ time when a ticket-associated offer must be purchased/ ticketed.

     *
     * @var mixed
     */
    protected $ticketByDate;
    /**
     * Validating carrier airline designator code.
     *
     * @var mixed
     */
    protected $validatingCarrier;
    /**
     * @var mixed
     */
    protected $extensionPointSummary;
    /**
     * Total price for all passengers of the same type.
     *
     * @var SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTypeTotalPrice
     */
    protected $typeTotalPrice;
    /**
     * Total base fare amount that includes surcharges (if applicable).
    Example: 200000.

     *
     * @var SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemBase
     */
    protected $base;
    /**
     * Total taxes amount.
    Example: 50000

     *
     * @var SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTaxes
     */
    protected $taxes;
    /**
     * Total price: 50000.
     *
     * @var SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTotal
     */
    protected $total;

    /**
     * @return int
     */
    public function getTypeCount(): ?int
    {
        return $this->typeCount;
    }

    /**
     * @param int $typeCount
     *
     * @return self
     */
    public function setTypeCount(?int $typeCount): self
    {
        $this->typeCount = $typeCount;

        return $this;
    }

    /**
     * Passenger type being requested for pricing. If the passenger type sent by the GDS is not in the below predefined list, then it is shown as is.
     Predefined values are: ADT= Adult CHD = Child INF = Infant GOV = Government MIL = Military SRC = Senior citizen STD = Student YTH = Youth
     Example: CHD.

     *
     * @return string
     */
    public function getTypeRequested(): ?string
    {
        return $this->typeRequested;
    }

    /**
     * Passenger type being requested for pricing. If the passenger type sent by the GDS is not in the below predefined list, then it is shown as is.
     Predefined values are: ADT= Adult CHD = Child INF = Infant GOV = Government MIL = Military SRC = Senior citizen STD = Student YTH = Youth
     Example: CHD.

     *
     * @param string $typeRequested
     *
     * @return self
     */
    public function setTypeRequested(?string $typeRequested): self
    {
        $this->typeRequested = $typeRequested;

        return $this;
    }

    /**
     * Passenger type being priced. This type can be different from the type requested if there is no available fare for the requested type. For example the requested type is GOV and the priced type is ADT because there is no available fare for type GOV and there is an available fare for type ADT. If the passenger type sent by the GDS is not the below predefined list, then it is shown as is.
    Predefined values are: ADT= Adult CHD = Child INF = Infant GOV = Government MIL = Military SRC = Senior citizen STD = Student YTH = Youth
    Example: ADT.

     *
     * @return string
     */
    public function getTypePriced(): ?string
    {
        return $this->typePriced;
    }

    /**
     * Passenger type being priced. This type can be different from the type requested if there is no available fare for the requested type. For example the requested type is GOV and the priced type is ADT because there is no available fare for type GOV and there is an available fare for type ADT. If the passenger type sent by the GDS is not the below predefined list, then it is shown as is.
    Predefined values are: ADT= Adult CHD = Child INF = Infant GOV = Government MIL = Military SRC = Senior citizen STD = Student YTH = Youth
    Example: ADT.

     *
     * @param string $typePriced
     *
     * @return self
     */
    public function setTypePriced(?string $typePriced): self
    {
        $this->typePriced = $typePriced;

        return $this;
    }

    /**
     * Ticket by date/ time.
    Example: 2013-12-25.this is not the Booking Time Limit (BookByDate) that applies to offers in a shopping response. This is the date/ time when a ticket-associated offer must be purchased/ ticketed.

     *
     * @return mixed
     */
    public function getTicketByDate()
    {
        return $this->ticketByDate;
    }

    /**
     * Ticket by date/ time.
    Example: 2013-12-25.this is not the Booking Time Limit (BookByDate) that applies to offers in a shopping response. This is the date/ time when a ticket-associated offer must be purchased/ ticketed.

     *
     * @param mixed $ticketByDate
     *
     * @return self
     */
    public function setTicketByDate($ticketByDate): self
    {
        $this->ticketByDate = $ticketByDate;

        return $this;
    }

    /**
     * Validating carrier airline designator code.
     *
     * @return mixed
     */
    public function getValidatingCarrier()
    {
        return $this->validatingCarrier;
    }

    /**
     * Validating carrier airline designator code.
     *
     * @param mixed $validatingCarrier
     *
     * @return self
     */
    public function setValidatingCarrier($validatingCarrier): self
    {
        $this->validatingCarrier = $validatingCarrier;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getExtensionPointSummary()
    {
        return $this->extensionPointSummary;
    }

    /**
     * @param mixed $extensionPointSummary
     *
     * @return self
     */
    public function setExtensionPointSummary($extensionPointSummary): self
    {
        $this->extensionPointSummary = $extensionPointSummary;

        return $this;
    }

    /**
     * Total price for all passengers of the same type.
     *
     * @return SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTypeTotalPrice
     */
    public function getTypeTotalPrice(): ?SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTypeTotalPrice
    {
        return $this->typeTotalPrice;
    }

    /**
     * Total price for all passengers of the same type.
     *
     * @param SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTypeTotalPrice $typeTotalPrice
     *
     * @return self
     */
    public function setTypeTotalPrice(?SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTypeTotalPrice $typeTotalPrice): self
    {
        $this->typeTotalPrice = $typeTotalPrice;

        return $this;
    }

    /**
     * Total base fare amount that includes surcharges (if applicable).
    Example: 200000.

     *
     * @return SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemBase
     */
    public function getBase(): ?SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemBase
    {
        return $this->base;
    }

    /**
     * Total base fare amount that includes surcharges (if applicable).
    Example: 200000.

     *
     * @param SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemBase $base
     *
     * @return self
     */
    public function setBase(?SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemBase $base): self
    {
        $this->base = $base;

        return $this;
    }

    /**
     * Total taxes amount.
    Example: 50000

     *
     * @return SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTaxes
     */
    public function getTaxes(): ?SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTaxes
    {
        return $this->taxes;
    }

    /**
     * Total taxes amount.
    Example: 50000

     *
     * @param SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTaxes $taxes
     *
     * @return self
     */
    public function setTaxes(?SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTaxes $taxes): self
    {
        $this->taxes = $taxes;

        return $this;
    }

    /**
     * Total price: 50000.
     *
     * @return SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTotal
     */
    public function getTotal(): ?SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTotal
    {
        return $this->total;
    }

    /**
     * Total price: 50000.
     *
     * @param SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTotal $total
     *
     * @return self
     */
    public function setTotal(?SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroupTravelerFareInfoItemTotal $total): self
    {
        $this->total = $total;

        return $this;
    }
}
