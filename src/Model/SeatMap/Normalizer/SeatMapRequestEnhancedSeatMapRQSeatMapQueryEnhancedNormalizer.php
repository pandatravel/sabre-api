<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\SeatMap\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhanced';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\SeatMap\Model\SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhanced;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\SeatMap\Model\SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhanced();
        if (property_exists($data, 'AirlineRecordLocator')) {
            $object->setAirlineRecordLocator($data->{'AirlineRecordLocator'});
        }
        if (property_exists($data, 'SeatMapSource')) {
            $object->setSeatMapSource($data->{'SeatMapSource'});
        }
        if (property_exists($data, 'Client')) {
            $object->setClient($data->{'Client'});
        }
        if (property_exists($data, 'ExtensionPoint_Query')) {
            $object->setExtensionPointQuery($data->{'ExtensionPoint_Query'});
        }
        if (property_exists($data, 'correlationID')) {
            $object->setCorrelationID($data->{'correlationID'});
        }
        if (property_exists($data, 'RequestType')) {
            $object->setRequestType($data->{'RequestType'});
        }
        if (property_exists($data, 'Currency')) {
            $object->setCurrency($data->{'Currency'});
        }
        if (property_exists($data, 'CabinDefinition')) {
            $object->setCabinDefinition($this->denormalizer->denormalize($data->{'CabinDefinition'}, 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedCabinDefinition', 'json', $context));
        }
        if (property_exists($data, 'POS')) {
            $object->setPOS($this->denormalizer->denormalize($data->{'POS'}, 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedPOS', 'json', $context));
        }
        if (property_exists($data, 'Flight')) {
            $object->setFlight($this->denormalizer->denormalize($data->{'Flight'}, 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFlight', 'json', $context));
        }
        if (property_exists($data, 'FareGroup')) {
            $object->setFareGroup($this->denormalizer->denormalize($data->{'FareGroup'}, 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareGroup', 'json', $context));
        }
        if (property_exists($data, 'FareAvailQualifiers')) {
            $values = [];
            foreach ($data->{'FareAvailQualifiers'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedFareAvailQualifiersItem', 'json', $context);
            }
            $object->setFareAvailQualifiers($values);
        }
        if (property_exists($data, 'JourneyData')) {
            $object->setJourneyData($this->denormalizer->denormalize($data->{'JourneyData'}, 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedJourneyData', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAirlineRecordLocator()) {
            $data->{'AirlineRecordLocator'} = $object->getAirlineRecordLocator();
        }
        if (null !== $object->getSeatMapSource()) {
            $data->{'SeatMapSource'} = $object->getSeatMapSource();
        }
        if (null !== $object->getClient()) {
            $data->{'Client'} = $object->getClient();
        }
        if (null !== $object->getExtensionPointQuery()) {
            $data->{'ExtensionPoint_Query'} = $object->getExtensionPointQuery();
        }
        if (null !== $object->getCorrelationID()) {
            $data->{'correlationID'} = $object->getCorrelationID();
        }
        if (null !== $object->getRequestType()) {
            $data->{'RequestType'} = $object->getRequestType();
        }
        if (null !== $object->getCurrency()) {
            $data->{'Currency'} = $object->getCurrency();
        }
        if (null !== $object->getCabinDefinition()) {
            $data->{'CabinDefinition'} = $this->normalizer->normalize($object->getCabinDefinition(), 'json', $context);
        }
        if (null !== $object->getPOS()) {
            $data->{'POS'} = $this->normalizer->normalize($object->getPOS(), 'json', $context);
        }
        if (null !== $object->getFlight()) {
            $data->{'Flight'} = $this->normalizer->normalize($object->getFlight(), 'json', $context);
        }
        if (null !== $object->getFareGroup()) {
            $data->{'FareGroup'} = $this->normalizer->normalize($object->getFareGroup(), 'json', $context);
        }
        if (null !== $object->getFareAvailQualifiers()) {
            $values = [];
            foreach ($object->getFareAvailQualifiers() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'FareAvailQualifiers'} = $values;
        }
        if (null !== $object->getJourneyData()) {
            $data->{'JourneyData'} = $this->normalizer->normalize($object->getJourneyData(), 'json', $context);
        }

        return $data;
    }
}
