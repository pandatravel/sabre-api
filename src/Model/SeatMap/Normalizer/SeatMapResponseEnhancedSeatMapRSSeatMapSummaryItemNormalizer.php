<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\SeatMap\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\SeatMap\Model\SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItem;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\SeatMap\Model\SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItem();
        if (property_exists($data, 'type')) {
            $object->setType($data->{'type'});
        }
        if (property_exists($data, 'changeOfGaugeInd')) {
            $object->setChangeOfGaugeInd($data->{'changeOfGaugeInd'});
        }
        if (property_exists($data, 'mapID')) {
            $object->setMapID($data->{'mapID'});
        }
        if (property_exists($data, 'system')) {
            $object->setSystem($data->{'system'});
        }
        if (property_exists($data, 'RequestType')) {
            $object->setRequestType($data->{'RequestType'});
        }
        if (property_exists($data, 'Currency')) {
            $object->setCurrency($data->{'Currency'});
        }
        if (property_exists($data, 'Equipment')) {
            $object->setEquipment($data->{'Equipment'});
        }
        if (property_exists($data, 'Flight')) {
            $object->setFlight($this->denormalizer->denormalize($data->{'Flight'}, 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItemFlight', 'json', $context));
        }
        if (property_exists($data, 'TaxTable')) {
            $values = [];
            foreach ($data->{'TaxTable'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItemTaxTableItem', 'json', $context);
            }
            $object->setTaxTable($values);
        }
        if (property_exists($data, 'PriceList')) {
            $object->setPriceList($this->denormalizer->denormalize($data->{'PriceList'}, 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItemPriceList', 'json', $context));
        }
        if (property_exists($data, 'Cabin')) {
            $values_1 = [];
            foreach ($data->{'Cabin'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItemCabinItem', 'json', $context);
            }
            $object->setCabin($values_1);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getType()) {
            $data->{'type'} = $object->getType();
        }
        if (null !== $object->getChangeOfGaugeInd()) {
            $data->{'changeOfGaugeInd'} = $object->getChangeOfGaugeInd();
        }
        if (null !== $object->getMapID()) {
            $data->{'mapID'} = $object->getMapID();
        }
        if (null !== $object->getSystem()) {
            $data->{'system'} = $object->getSystem();
        }
        if (null !== $object->getRequestType()) {
            $data->{'RequestType'} = $object->getRequestType();
        }
        if (null !== $object->getCurrency()) {
            $data->{'Currency'} = $object->getCurrency();
        }
        if (null !== $object->getEquipment()) {
            $data->{'Equipment'} = $object->getEquipment();
        }
        if (null !== $object->getFlight()) {
            $data->{'Flight'} = $this->normalizer->normalize($object->getFlight(), 'json', $context);
        }
        if (null !== $object->getTaxTable()) {
            $values = [];
            foreach ($object->getTaxTable() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'TaxTable'} = $values;
        }
        if (null !== $object->getPriceList()) {
            $data->{'PriceList'} = $this->normalizer->normalize($object->getPriceList(), 'json', $context);
        }
        if (null !== $object->getCabin()) {
            $values_1 = [];
            foreach ($object->getCabin() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'Cabin'} = $values_1;
        }

        return $data;
    }
}
