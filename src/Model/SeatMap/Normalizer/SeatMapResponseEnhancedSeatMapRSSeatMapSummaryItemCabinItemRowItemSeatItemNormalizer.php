<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\SeatMap\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItemCabinItemRowItemSeatItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItemCabinItemRowItemSeatItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\SeatMap\Model\SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItemCabinItemRowItemSeatItem;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\SeatMap\Model\SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItemCabinItemRowItemSeatItem();
        if (property_exists($data, 'occupiedInd')) {
            $object->setOccupiedInd($data->{'occupiedInd'});
        }
        if (property_exists($data, 'inoperativeInd')) {
            $object->setInoperativeInd($data->{'inoperativeInd'});
        }
        if (property_exists($data, 'premiumInd')) {
            $object->setPremiumInd($data->{'premiumInd'});
        }
        if (property_exists($data, 'chargeableInd')) {
            $object->setChargeableInd($data->{'chargeableInd'});
        }
        if (property_exists($data, 'exitRowInd')) {
            $object->setExitRowInd($data->{'exitRowInd'});
        }
        if (property_exists($data, 'restrictedReclineInd')) {
            $object->setRestrictedReclineInd($data->{'restrictedReclineInd'});
        }
        if (property_exists($data, 'noInfantInd')) {
            $object->setNoInfantInd($data->{'noInfantInd'});
        }
        if (property_exists($data, 'Number')) {
            $object->setNumber($data->{'Number'});
        }
        if (property_exists($data, 'Occupation')) {
            $values = [];
            foreach ($data->{'Occupation'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItemCabinItemRowItemSeatItemOccupationItem', 'json', $context);
            }
            $object->setOccupation($values);
        }
        if (property_exists($data, 'Facilities')) {
            $values_1 = [];
            foreach ($data->{'Facilities'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItemCabinItemRowItemSeatItemFacilitiesItem', 'json', $context);
            }
            $object->setFacilities($values_1);
        }
        if (property_exists($data, 'Price')) {
            $values_2 = [];
            foreach ($data->{'Price'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapResponseEnhancedSeatMapRSSeatMapSummaryItemCabinItemRowItemSeatItemPriceItem', 'json', $context);
            }
            $object->setPrice($values_2);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getOccupiedInd()) {
            $data->{'occupiedInd'} = $object->getOccupiedInd();
        }
        if (null !== $object->getInoperativeInd()) {
            $data->{'inoperativeInd'} = $object->getInoperativeInd();
        }
        if (null !== $object->getPremiumInd()) {
            $data->{'premiumInd'} = $object->getPremiumInd();
        }
        if (null !== $object->getChargeableInd()) {
            $data->{'chargeableInd'} = $object->getChargeableInd();
        }
        if (null !== $object->getExitRowInd()) {
            $data->{'exitRowInd'} = $object->getExitRowInd();
        }
        if (null !== $object->getRestrictedReclineInd()) {
            $data->{'restrictedReclineInd'} = $object->getRestrictedReclineInd();
        }
        if (null !== $object->getNoInfantInd()) {
            $data->{'noInfantInd'} = $object->getNoInfantInd();
        }
        if (null !== $object->getNumber()) {
            $data->{'Number'} = $object->getNumber();
        }
        if (null !== $object->getOccupation()) {
            $values = [];
            foreach ($object->getOccupation() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'Occupation'} = $values;
        }
        if (null !== $object->getFacilities()) {
            $values_1 = [];
            foreach ($object->getFacilities() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'Facilities'} = $values_1;
        }
        if (null !== $object->getPrice()) {
            $values_2 = [];
            foreach ($object->getPrice() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'Price'} = $values_2;
        }

        return $data;
    }
}
