<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\SeatMap\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedPOSNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\SeatMap\\Model\\SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedPOS';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\SeatMap\Model\SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedPOS;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\SeatMap\Model\SeatMapRequestEnhancedSeatMapRQSeatMapQueryEnhancedPOS();
        if (property_exists($data, 'duty')) {
            $object->setDuty($data->{'duty'});
        }
        if (property_exists($data, 'LNIATA')) {
            $object->setLNIATA($data->{'LNIATA'});
        }
        if (property_exists($data, 'company')) {
            $object->setCompany($data->{'company'});
        }
        if (property_exists($data, 'multiHost')) {
            $object->setMultiHost($data->{'multiHost'});
        }
        if (property_exists($data, 'sine')) {
            $object->setSine($data->{'sine'});
        }
        if (property_exists($data, 'PCC')) {
            $object->setPCC($data->{'PCC'});
        }
        if (property_exists($data, 'Actual')) {
            $object->setActual($data->{'Actual'});
        }
        if (property_exists($data, 'Home')) {
            $object->setHome($data->{'Home'});
        }
        if (property_exists($data, 'ClientContext')) {
            $object->setClientContext($data->{'ClientContext'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getDuty()) {
            $data->{'duty'} = $object->getDuty();
        }
        if (null !== $object->getLNIATA()) {
            $data->{'LNIATA'} = $object->getLNIATA();
        }
        if (null !== $object->getCompany()) {
            $data->{'company'} = $object->getCompany();
        }
        if (null !== $object->getMultiHost()) {
            $data->{'multiHost'} = $object->getMultiHost();
        }
        if (null !== $object->getSine()) {
            $data->{'sine'} = $object->getSine();
        }
        if (null !== $object->getPCC()) {
            $data->{'PCC'} = $object->getPCC();
        }
        if (null !== $object->getActual()) {
            $data->{'Actual'} = $object->getActual();
        }
        if (null !== $object->getHome()) {
            $data->{'Home'} = $object->getHome();
        }
        if (null !== $object->getClientContext()) {
            $data->{'ClientContext'} = $object->getClientContext();
        }

        return $data;
    }
}
