<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ItineraryGroupTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\ItineraryGroupType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\ItineraryGroupType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\ItineraryGroupType();
        if (property_exists($data, 'groupDescription')) {
            $object->setGroupDescription($this->denormalizer->denormalize($data->{'groupDescription'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\GroupDescription', 'json', $context));
        }
        if (property_exists($data, 'itineraries')) {
            $values = [];
            foreach ($data->{'itineraries'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\ItineraryType', 'json', $context);
            }
            $object->setItineraries($values);
        }
        if (property_exists($data, 'processingMessages')) {
            $values_1 = [];
            foreach ($data->{'processingMessages'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\ProcessingMessageType', 'json', $context);
            }
            $object->setProcessingMessages($values_1);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getGroupDescription()) {
            $data->{'groupDescription'} = $this->normalizer->normalize($object->getGroupDescription(), 'json', $context);
        }
        if (null !== $object->getItineraries()) {
            $values = [];
            foreach ($object->getItineraries() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'itineraries'} = $values;
        }
        if (null !== $object->getProcessingMessages()) {
            $values_1 = [];
            foreach ($object->getProcessingMessages() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'processingMessages'} = $values_1;
        }

        return $data;
    }
}
