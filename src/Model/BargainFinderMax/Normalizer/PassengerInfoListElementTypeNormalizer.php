<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PassengerInfoListElementTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\PassengerInfoListElementType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\PassengerInfoListElementType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\PassengerInfoListElementType();
        if (property_exists($data, 'passengerInfo')) {
            $object->setPassengerInfo($this->denormalizer->denormalize($data->{'passengerInfo'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\PassengerInformationType', 'json', $context));
        }
        if (property_exists($data, 'passengerNotAvailableInfo')) {
            $object->setPassengerNotAvailableInfo($this->denormalizer->denormalize($data->{'passengerNotAvailableInfo'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\PassengerNotAvailableInfoType', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getPassengerInfo()) {
            $data->{'passengerInfo'} = $this->normalizer->normalize($object->getPassengerInfo(), 'json', $context);
        }
        if (null !== $object->getPassengerNotAvailableInfo()) {
            $data->{'passengerNotAvailableInfo'} = $this->normalizer->normalize($object->getPassengerNotAvailableInfo(), 'json', $context);
        }

        return $data;
    }
}
