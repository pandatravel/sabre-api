<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305FlexibleFaresTypeFareParametersNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParameters';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305FlexibleFaresTypeFareParameters;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305FlexibleFaresTypeFareParameters();
        if (property_exists($data, 'AccountCode')) {
            $values = [];
            foreach ($data->{'AccountCode'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersAccountCode', 'json', $context);
            }
            $object->setAccountCode($values);
        }
        if (property_exists($data, 'Baggage')) {
            $object->setBaggage($this->denormalizer->denormalize($data->{'Baggage'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305BaggageType', 'json', $context));
        }
        if (property_exists($data, 'BrandedFareIndicators')) {
            $object->setBrandedFareIndicators($this->denormalizer->denormalize($data->{'BrandedFareIndicators'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305BrandedFareIndicatorsBase', 'json', $context));
        }
        if (property_exists($data, 'Cabin')) {
            $object->setCabin($this->denormalizer->denormalize($data->{'Cabin'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersCabin', 'json', $context));
        }
        if (property_exists($data, 'ClassOfService')) {
            $values_1 = [];
            foreach ($data->{'ClassOfService'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ClassOfServiceElemType', 'json', $context);
            }
            $object->setClassOfService($values_1);
        }
        if (property_exists($data, 'CorporateID')) {
            $values_2 = [];
            foreach ($data->{'CorporateID'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersCorporateID', 'json', $context);
            }
            $object->setCorporateID($values_2);
        }
        if (property_exists($data, 'ExcludeRestricted')) {
            $object->setExcludeRestricted($this->denormalizer->denormalize($data->{'ExcludeRestricted'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersExcludeRestricted', 'json', $context));
        }
        if (property_exists($data, 'FareBasis')) {
            $values_3 = [];
            foreach ($data->{'FareBasis'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FareBasisType', 'json', $context);
            }
            $object->setFareBasis($values_3);
        }
        if (property_exists($data, 'FareType')) {
            $values_4 = [];
            foreach ($data->{'FareType'} as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FareTypePrefType', 'json', $context);
            }
            $object->setFareType($values_4);
        }
        if (property_exists($data, 'JumpCabinLogic')) {
            $object->setJumpCabinLogic($this->denormalizer->denormalize($data->{'JumpCabinLogic'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305JumpCabinLogicType', 'json', $context));
        }
        if (property_exists($data, 'KeepSameCabin')) {
            $object->setKeepSameCabin($this->denormalizer->denormalize($data->{'KeepSameCabin'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305KeepSameCabinType', 'json', $context));
        }
        if (property_exists($data, 'Leg')) {
            $values_5 = [];
            foreach ($data->{'Leg'} as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersLeg', 'json', $context);
            }
            $object->setLeg($values_5);
        }
        if (property_exists($data, 'MinMaxStay')) {
            $object->setMinMaxStay($this->denormalizer->denormalize($data->{'MinMaxStay'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersMinMaxStay', 'json', $context));
        }
        if (property_exists($data, 'NegotiatedFaresOnly')) {
            $object->setNegotiatedFaresOnly($this->denormalizer->denormalize($data->{'NegotiatedFaresOnly'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersNegotiatedFaresOnly', 'json', $context));
        }
        if (property_exists($data, 'PassengerType')) {
            $object->setPassengerType($this->denormalizer->denormalize($data->{'PassengerType'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersPassengerType', 'json', $context));
        }
        if (property_exists($data, 'PassengerTypeQuantity')) {
            $values_6 = [];
            foreach ($data->{'PassengerTypeQuantity'} as $value_6) {
                $values_6[] = $this->denormalizer->denormalize($value_6, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PassengerTypeQuantityType', 'json', $context);
            }
            $object->setPassengerTypeQuantity($values_6);
        }
        if (property_exists($data, 'PrivateFare')) {
            $object->setPrivateFare($this->denormalizer->denormalize($data->{'PrivateFare'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersPrivateFare', 'json', $context));
        }
        if (property_exists($data, 'PublicFare')) {
            $object->setPublicFare($this->denormalizer->denormalize($data->{'PublicFare'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersPublicFare', 'json', $context));
        }
        if (property_exists($data, 'RefundPenalty')) {
            $object->setRefundPenalty($this->denormalizer->denormalize($data->{'RefundPenalty'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersRefundPenalty', 'json', $context));
        }
        if (property_exists($data, 'ResTicketing')) {
            $object->setResTicketing($this->denormalizer->denormalize($data->{'ResTicketing'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersResTicketing', 'json', $context));
        }
        if (property_exists($data, 'UseNegotiatedFares')) {
            $object->setUseNegotiatedFares($this->denormalizer->denormalize($data->{'UseNegotiatedFares'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersUseNegotiatedFares', 'json', $context));
        }
        if (property_exists($data, 'UsePassengerFares')) {
            $object->setUsePassengerFares($this->denormalizer->denormalize($data->{'UsePassengerFares'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersUsePassengerFares', 'json', $context));
        }
        if (property_exists($data, 'VoluntaryChanges')) {
            $object->setVoluntaryChanges($this->denormalizer->denormalize($data->{'VoluntaryChanges'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305VoluntaryChangesSMPType', 'json', $context));
        }
        if (property_exists($data, 'XOFares')) {
            $object->setXOFares($this->denormalizer->denormalize($data->{'XOFares'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersXOFares', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAccountCode()) {
            $values = [];
            foreach ($object->getAccountCode() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'AccountCode'} = $values;
        }
        if (null !== $object->getBaggage()) {
            $data->{'Baggage'} = $this->normalizer->normalize($object->getBaggage(), 'json', $context);
        }
        if (null !== $object->getBrandedFareIndicators()) {
            $data->{'BrandedFareIndicators'} = $this->normalizer->normalize($object->getBrandedFareIndicators(), 'json', $context);
        }
        if (null !== $object->getCabin()) {
            $data->{'Cabin'} = $this->normalizer->normalize($object->getCabin(), 'json', $context);
        }
        if (null !== $object->getClassOfService()) {
            $values_1 = [];
            foreach ($object->getClassOfService() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'ClassOfService'} = $values_1;
        }
        if (null !== $object->getCorporateID()) {
            $values_2 = [];
            foreach ($object->getCorporateID() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'CorporateID'} = $values_2;
        }
        if (null !== $object->getExcludeRestricted()) {
            $data->{'ExcludeRestricted'} = $this->normalizer->normalize($object->getExcludeRestricted(), 'json', $context);
        }
        if (null !== $object->getFareBasis()) {
            $values_3 = [];
            foreach ($object->getFareBasis() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'FareBasis'} = $values_3;
        }
        if (null !== $object->getFareType()) {
            $values_4 = [];
            foreach ($object->getFareType() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $data->{'FareType'} = $values_4;
        }
        if (null !== $object->getJumpCabinLogic()) {
            $data->{'JumpCabinLogic'} = $this->normalizer->normalize($object->getJumpCabinLogic(), 'json', $context);
        }
        if (null !== $object->getKeepSameCabin()) {
            $data->{'KeepSameCabin'} = $this->normalizer->normalize($object->getKeepSameCabin(), 'json', $context);
        }
        if (null !== $object->getLeg()) {
            $values_5 = [];
            foreach ($object->getLeg() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $data->{'Leg'} = $values_5;
        }
        if (null !== $object->getMinMaxStay()) {
            $data->{'MinMaxStay'} = $this->normalizer->normalize($object->getMinMaxStay(), 'json', $context);
        }
        if (null !== $object->getNegotiatedFaresOnly()) {
            $data->{'NegotiatedFaresOnly'} = $this->normalizer->normalize($object->getNegotiatedFaresOnly(), 'json', $context);
        }
        if (null !== $object->getPassengerType()) {
            $data->{'PassengerType'} = $this->normalizer->normalize($object->getPassengerType(), 'json', $context);
        }
        if (null !== $object->getPassengerTypeQuantity()) {
            $values_6 = [];
            foreach ($object->getPassengerTypeQuantity() as $value_6) {
                $values_6[] = $this->normalizer->normalize($value_6, 'json', $context);
            }
            $data->{'PassengerTypeQuantity'} = $values_6;
        }
        if (null !== $object->getPrivateFare()) {
            $data->{'PrivateFare'} = $this->normalizer->normalize($object->getPrivateFare(), 'json', $context);
        }
        if (null !== $object->getPublicFare()) {
            $data->{'PublicFare'} = $this->normalizer->normalize($object->getPublicFare(), 'json', $context);
        }
        if (null !== $object->getRefundPenalty()) {
            $data->{'RefundPenalty'} = $this->normalizer->normalize($object->getRefundPenalty(), 'json', $context);
        }
        if (null !== $object->getResTicketing()) {
            $data->{'ResTicketing'} = $this->normalizer->normalize($object->getResTicketing(), 'json', $context);
        }
        if (null !== $object->getUseNegotiatedFares()) {
            $data->{'UseNegotiatedFares'} = $this->normalizer->normalize($object->getUseNegotiatedFares(), 'json', $context);
        }
        if (null !== $object->getUsePassengerFares()) {
            $data->{'UsePassengerFares'} = $this->normalizer->normalize($object->getUsePassengerFares(), 'json', $context);
        }
        if (null !== $object->getVoluntaryChanges()) {
            $data->{'VoluntaryChanges'} = $this->normalizer->normalize($object->getVoluntaryChanges(), 'json', $context);
        }
        if (null !== $object->getXOFares()) {
            $data->{'XOFares'} = $this->normalizer->normalize($object->getXOFares(), 'json', $context);
        }

        return $data;
    }
}
