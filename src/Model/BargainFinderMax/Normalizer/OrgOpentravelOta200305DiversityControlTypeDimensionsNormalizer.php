<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305DiversityControlTypeDimensionsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305DiversityControlTypeDimensions';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305DiversityControlTypeDimensions';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305DiversityControlTypeDimensions();
        if (property_exists($data, 'Carrier')) {
            $object->setCarrier($this->denormalizer->denormalize($data->{'Carrier'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305DiversityControlTypeDimensionsCarrier', 'json', $context));
        }
        if (property_exists($data, 'InboundOutboundPairing')) {
            $object->setInboundOutboundPairing($this->denormalizer->denormalize($data->{'InboundOutboundPairing'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305DiversityControlTypeDimensionsInboundOutboundPairing', 'json', $context));
        }
        if (property_exists($data, 'OperatingDuplicate')) {
            $object->setOperatingDuplicate($this->denormalizer->denormalize($data->{'OperatingDuplicate'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305DiversityControlTypeDimensionsOperatingDuplicate', 'json', $context));
        }
        if (property_exists($data, 'PriceWeight')) {
            $object->setPriceWeight($data->{'PriceWeight'});
        }
        if (property_exists($data, 'StopsNumber')) {
            $object->setStopsNumber($this->denormalizer->denormalize($data->{'StopsNumber'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305DiversityControlTypeDimensionsStopsNumber', 'json', $context));
        }
        if (property_exists($data, 'TimeOfDay')) {
            $object->setTimeOfDay($this->denormalizer->denormalize($data->{'TimeOfDay'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305DiversityControlTypeDimensionsTimeOfDay', 'json', $context));
        }
        if (property_exists($data, 'TravelTime')) {
            $object->setTravelTime($this->denormalizer->denormalize($data->{'TravelTime'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305DiversityControlTypeDimensionsTravelTime', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getCarrier()) {
            $data->{'Carrier'} = $this->normalizer->normalize($object->getCarrier(), 'json', $context);
        }
        if (null !== $object->getInboundOutboundPairing()) {
            $data->{'InboundOutboundPairing'} = $this->normalizer->normalize($object->getInboundOutboundPairing(), 'json', $context);
        }
        if (null !== $object->getOperatingDuplicate()) {
            $data->{'OperatingDuplicate'} = $this->normalizer->normalize($object->getOperatingDuplicate(), 'json', $context);
        }
        if (null !== $object->getPriceWeight()) {
            $data->{'PriceWeight'} = $object->getPriceWeight();
        }
        if (null !== $object->getStopsNumber()) {
            $data->{'StopsNumber'} = $this->normalizer->normalize($object->getStopsNumber(), 'json', $context);
        }
        if (null !== $object->getTimeOfDay()) {
            $data->{'TimeOfDay'} = $this->normalizer->normalize($object->getTimeOfDay(), 'json', $context);
        }
        if (null !== $object->getTravelTime()) {
            $data->{'TravelTime'} = $this->normalizer->normalize($object->getTravelTime(), 'json', $context);
        }

        return $data;
    }
}
