<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriorityNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriority';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriority';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriority();
        if (property_exists($data, 'ConnectionTime')) {
            $object->setConnectionTime($this->denormalizer->denormalize($data->{'ConnectionTime'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriorityConnectionTime', 'json', $context));
        }
        if (property_exists($data, 'DepartureTime')) {
            $object->setDepartureTime($this->denormalizer->denormalize($data->{'DepartureTime'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriorityDepartureTime', 'json', $context));
        }
        if (property_exists($data, 'DirectFlights')) {
            $object->setDirectFlights($this->denormalizer->denormalize($data->{'DirectFlights'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriorityDirectFlights', 'json', $context));
        }
        if (property_exists($data, 'ElapsedTime')) {
            $object->setElapsedTime($this->denormalizer->denormalize($data->{'ElapsedTime'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriorityElapsedTime', 'json', $context));
        }
        if (property_exists($data, 'LegTime')) {
            $object->setLegTime($this->denormalizer->denormalize($data->{'LegTime'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriorityLegTime', 'json', $context));
        }
        if (property_exists($data, 'MarketingCarrier')) {
            $object->setMarketingCarrier($this->denormalizer->denormalize($data->{'MarketingCarrier'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriorityMarketingCarrier', 'json', $context));
        }
        if (property_exists($data, 'OperatingCarrier')) {
            $object->setOperatingCarrier($this->denormalizer->denormalize($data->{'OperatingCarrier'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriorityOperatingCarrier', 'json', $context));
        }
        if (property_exists($data, 'Price')) {
            $object->setPrice($this->denormalizer->denormalize($data->{'Price'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriorityPrice', 'json', $context));
        }
        if (property_exists($data, 'Time')) {
            $object->setTime($this->denormalizer->denormalize($data->{'Time'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriorityTime', 'json', $context));
        }
        if (property_exists($data, 'Vendor')) {
            $object->setVendor($this->denormalizer->denormalize($data->{'Vendor'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsPriorityVendor', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getConnectionTime()) {
            $data->{'ConnectionTime'} = $this->normalizer->normalize($object->getConnectionTime(), 'json', $context);
        }
        if (null !== $object->getDepartureTime()) {
            $data->{'DepartureTime'} = $this->normalizer->normalize($object->getDepartureTime(), 'json', $context);
        }
        if (null !== $object->getDirectFlights()) {
            $data->{'DirectFlights'} = $this->normalizer->normalize($object->getDirectFlights(), 'json', $context);
        }
        if (null !== $object->getElapsedTime()) {
            $data->{'ElapsedTime'} = $this->normalizer->normalize($object->getElapsedTime(), 'json', $context);
        }
        if (null !== $object->getLegTime()) {
            $data->{'LegTime'} = $this->normalizer->normalize($object->getLegTime(), 'json', $context);
        }
        if (null !== $object->getMarketingCarrier()) {
            $data->{'MarketingCarrier'} = $this->normalizer->normalize($object->getMarketingCarrier(), 'json', $context);
        }
        if (null !== $object->getOperatingCarrier()) {
            $data->{'OperatingCarrier'} = $this->normalizer->normalize($object->getOperatingCarrier(), 'json', $context);
        }
        if (null !== $object->getPrice()) {
            $data->{'Price'} = $this->normalizer->normalize($object->getPrice(), 'json', $context);
        }
        if (null !== $object->getTime()) {
            $data->{'Time'} = $this->normalizer->normalize($object->getTime(), 'json', $context);
        }
        if (null !== $object->getVendor()) {
            $data->{'Vendor'} = $this->normalizer->normalize($object->getVendor(), 'json', $context);
        }

        return $data;
    }
}
