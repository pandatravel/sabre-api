<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SellingFareDataTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\SellingFareDataType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\SellingFareDataType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\SellingFareDataType();
        if (property_exists($data, 'baseFareAmount')) {
            $object->setBaseFareAmount($data->{'baseFareAmount'});
        }
        if (property_exists($data, 'constructedTotalAmount')) {
            $object->setConstructedTotalAmount($data->{'constructedTotalAmount'});
        }
        if (property_exists($data, 'equivalentAmount')) {
            $object->setEquivalentAmount($data->{'equivalentAmount'});
        }
        if (property_exists($data, 'fareCalculation')) {
            $object->setFareCalculation($data->{'fareCalculation'});
        }
        if (property_exists($data, 'fareRetailerRule')) {
            $object->setFareRetailerRule($data->{'fareRetailerRule'});
        }
        if (property_exists($data, 'handlingMarkups')) {
            $values = [];
            foreach ($data->{'handlingMarkups'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\HandlingMarkupType', 'json', $context);
            }
            $object->setHandlingMarkups($values);
        }
        if (property_exists($data, 'taxSummaries')) {
            $values_1 = [];
            foreach ($data->{'taxSummaries'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\TaxSummaryIDType', 'json', $context);
            }
            $object->setTaxSummaries($values_1);
        }
        if (property_exists($data, 'taxes')) {
            $values_2 = [];
            foreach ($data->{'taxes'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\TaxIDType', 'json', $context);
            }
            $object->setTaxes($values_2);
        }
        if (property_exists($data, 'totalPerPassenger')) {
            $object->setTotalPerPassenger($data->{'totalPerPassenger'});
        }
        if (property_exists($data, 'totalTaxAmount')) {
            $object->setTotalTaxAmount($data->{'totalTaxAmount'});
        }
        if (property_exists($data, 'type')) {
            $object->setType($data->{'type'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBaseFareAmount()) {
            $data->{'baseFareAmount'} = $object->getBaseFareAmount();
        }
        if (null !== $object->getConstructedTotalAmount()) {
            $data->{'constructedTotalAmount'} = $object->getConstructedTotalAmount();
        }
        if (null !== $object->getEquivalentAmount()) {
            $data->{'equivalentAmount'} = $object->getEquivalentAmount();
        }
        if (null !== $object->getFareCalculation()) {
            $data->{'fareCalculation'} = $object->getFareCalculation();
        }
        if (null !== $object->getFareRetailerRule()) {
            $data->{'fareRetailerRule'} = $object->getFareRetailerRule();
        }
        if (null !== $object->getHandlingMarkups()) {
            $values = [];
            foreach ($object->getHandlingMarkups() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'handlingMarkups'} = $values;
        }
        if (null !== $object->getTaxSummaries()) {
            $values_1 = [];
            foreach ($object->getTaxSummaries() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'taxSummaries'} = $values_1;
        }
        if (null !== $object->getTaxes()) {
            $values_2 = [];
            foreach ($object->getTaxes() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'taxes'} = $values_2;
        }
        if (null !== $object->getTotalPerPassenger()) {
            $data->{'totalPerPassenger'} = $object->getTotalPerPassenger();
        }
        if (null !== $object->getTotalTaxAmount()) {
            $data->{'totalTaxAmount'} = $object->getTotalTaxAmount();
        }
        if (null !== $object->getType()) {
            $data->{'type'} = $object->getType();
        }

        return $data;
    }
}
