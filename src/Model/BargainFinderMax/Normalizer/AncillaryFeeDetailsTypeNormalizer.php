<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AncillaryFeeDetailsTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\AncillaryFeeDetailsType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\AncillaryFeeDetailsType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\AncillaryFeeDetailsType();
        if (property_exists($data, 'amount')) {
            $object->setAmount($data->{'amount'});
        }
        if (property_exists($data, 'ancillaryTypeCode')) {
            $object->setAncillaryTypeCode($data->{'ancillaryTypeCode'});
        }
        if (property_exists($data, 'baggageId')) {
            $object->setBaggageId($data->{'baggageId'});
        }
        if (property_exists($data, 'carrier')) {
            $object->setCarrier($data->{'carrier'});
        }
        if (property_exists($data, 'code')) {
            $object->setCode($data->{'code'});
        }
        if (property_exists($data, 'departureDate')) {
            $object->setDepartureDate($data->{'departureDate'});
        }
        if (property_exists($data, 'description')) {
            $object->setDescription($data->{'description'});
        }
        if (property_exists($data, 'destination')) {
            $object->setDestination($data->{'destination'});
        }
        if (property_exists($data, 'endSegment')) {
            $object->setEndSegment($data->{'endSegment'});
        }
        if (property_exists($data, 'origin')) {
            $object->setOrigin($data->{'origin'});
        }
        if (property_exists($data, 'startSegment')) {
            $object->setStartSegment($data->{'startSegment'});
        }
        if (property_exists($data, 'subcode')) {
            $object->setSubcode($data->{'subcode'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAmount()) {
            $data->{'amount'} = $object->getAmount();
        }
        if (null !== $object->getAncillaryTypeCode()) {
            $data->{'ancillaryTypeCode'} = $object->getAncillaryTypeCode();
        }
        if (null !== $object->getBaggageId()) {
            $data->{'baggageId'} = $object->getBaggageId();
        }
        if (null !== $object->getCarrier()) {
            $data->{'carrier'} = $object->getCarrier();
        }
        if (null !== $object->getCode()) {
            $data->{'code'} = $object->getCode();
        }
        if (null !== $object->getDepartureDate()) {
            $data->{'departureDate'} = $object->getDepartureDate();
        }
        if (null !== $object->getDescription()) {
            $data->{'description'} = $object->getDescription();
        }
        if (null !== $object->getDestination()) {
            $data->{'destination'} = $object->getDestination();
        }
        if (null !== $object->getEndSegment()) {
            $data->{'endSegment'} = $object->getEndSegment();
        }
        if (null !== $object->getOrigin()) {
            $data->{'origin'} = $object->getOrigin();
        }
        if (null !== $object->getStartSegment()) {
            $data->{'startSegment'} = $object->getStartSegment();
        }
        if (null !== $object->getSubcode()) {
            $data->{'subcode'} = $object->getSubcode();
        }

        return $data;
    }
}
