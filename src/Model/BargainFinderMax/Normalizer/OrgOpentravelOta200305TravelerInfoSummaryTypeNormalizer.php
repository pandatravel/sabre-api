<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305TravelerInfoSummaryTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TravelerInfoSummaryType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TravelerInfoSummaryType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305TravelerInfoSummaryType();
        if (property_exists($data, 'AirTravelerAvail') && $data->{'AirTravelerAvail'} !== null) {
            $values = [];
            foreach ($data->{'AirTravelerAvail'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TravelerInformationType', 'json', $context);
            }
            $object->setAirTravelerAvail($values);
        }
        if (property_exists($data, 'PriceRequestInformation') && $data->{'PriceRequestInformation'} !== null) {
            $object->setPriceRequestInformation($this->denormalizer->denormalize($data->{'PriceRequestInformation'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationType', 'json', $context));
        }
        if (property_exists($data, 'SeatsRequested') && $data->{'SeatsRequested'} !== null) {
            $values_1 = [];
            foreach ($data->{'SeatsRequested'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setSeatsRequested($values_1);
        }
        if (property_exists($data, 'SpecificPTC_Indicator') && $data->{'SpecificPTC_Indicator'} !== null) {
            $object->setSpecificPTCIndicator($data->{'SpecificPTC_Indicator'});
        }
        if (property_exists($data, 'TPA_Extensions') && $data->{'TPA_Extensions'} !== null) {
            $object->setTPAExtensions($this->denormalizer->denormalize($data->{'TPA_Extensions'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TravelerInfoSummaryTPAExtensionsType', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAirTravelerAvail()) {
            $values = [];
            foreach ($object->getAirTravelerAvail() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'AirTravelerAvail'} = $values;
        }
        if (null !== $object->getPriceRequestInformation()) {
            $data->{'PriceRequestInformation'} = $this->normalizer->normalize($object->getPriceRequestInformation(), 'json', $context);
        }
        if (null !== $object->getSeatsRequested()) {
            $values_1 = [];
            foreach ($object->getSeatsRequested() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'SeatsRequested'} = $values_1;
        }
        if (null !== $object->getSpecificPTCIndicator()) {
            $data->{'SpecificPTC_Indicator'} = $object->getSpecificPTCIndicator();
        }
        if (null !== $object->getTPAExtensions()) {
            $data->{'TPA_Extensions'} = $this->normalizer->normalize($object->getTPAExtensions(), 'json', $context);
        }

        return $data;
    }
}
