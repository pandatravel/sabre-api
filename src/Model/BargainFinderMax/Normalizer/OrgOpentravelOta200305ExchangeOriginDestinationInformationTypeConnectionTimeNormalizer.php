<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeConnectionTimeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeConnectionTime';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeConnectionTime';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeConnectionTime();
        if (property_exists($data, 'EnableExcludedConnection')) {
            $object->setEnableExcludedConnection($data->{'EnableExcludedConnection'});
        }
        if (property_exists($data, 'ExcludedConnectionBegin')) {
            $object->setExcludedConnectionBegin($data->{'ExcludedConnectionBegin'});
        }
        if (property_exists($data, 'ExcludedConnectionEnd')) {
            $object->setExcludedConnectionEnd($data->{'ExcludedConnectionEnd'});
        }
        if (property_exists($data, 'Max')) {
            $object->setMax($data->{'Max'});
        }
        if (property_exists($data, 'Min')) {
            $object->setMin($data->{'Min'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getEnableExcludedConnection()) {
            $data->{'EnableExcludedConnection'} = $object->getEnableExcludedConnection();
        }
        if (null !== $object->getExcludedConnectionBegin()) {
            $data->{'ExcludedConnectionBegin'} = $object->getExcludedConnectionBegin();
        }
        if (null !== $object->getExcludedConnectionEnd()) {
            $data->{'ExcludedConnectionEnd'} = $object->getExcludedConnectionEnd();
        }
        if (null !== $object->getMax()) {
            $data->{'Max'} = $object->getMax();
        }
        if (null !== $object->getMin()) {
            $data->{'Min'} = $object->getMin();
        }

        return $data;
    }
}
