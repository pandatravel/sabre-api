<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305ExchangeOriginDestinationInformationType();
        if (property_exists($data, 'AlternateTime') && $data->{'AlternateTime'} !== null) {
            $object->setAlternateTime($this->denormalizer->denormalize($data->{'AlternateTime'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeAlternateTime', 'json', $context));
        }
        if (property_exists($data, 'ArrivalDateTime') && $data->{'ArrivalDateTime'} !== null) {
            $object->setArrivalDateTime($data->{'ArrivalDateTime'});
        }
        if (property_exists($data, 'ArrivalDates') && $data->{'ArrivalDates'} !== null) {
            $object->setArrivalDates($this->denormalizer->denormalize($data->{'ArrivalDates'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TravelDateTimeTypeArrivalDates', 'json', $context));
        }
        if (property_exists($data, 'ArrivalWindow') && $data->{'ArrivalWindow'} !== null) {
            $object->setArrivalWindow($data->{'ArrivalWindow'});
        }
        if (property_exists($data, 'CabinPref') && $data->{'CabinPref'} !== null) {
            $object->setCabinPref($this->denormalizer->denormalize($data->{'CabinPref'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305CabinPrefType', 'json', $context));
        }
        if (property_exists($data, 'ConnectionLocations') && $data->{'ConnectionLocations'} !== null) {
            $object->setConnectionLocations($this->denormalizer->denormalize($data->{'ConnectionLocations'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ConnectionType', 'json', $context));
        }
        if (property_exists($data, 'ConnectionTime') && $data->{'ConnectionTime'} !== null) {
            $object->setConnectionTime($this->denormalizer->denormalize($data->{'ConnectionTime'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeConnectionTime', 'json', $context));
        }
        if (property_exists($data, 'DateFlexibility') && $data->{'DateFlexibility'} !== null) {
            $values = [];
            foreach ($data->{'DateFlexibility'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeDateFlexibility', 'json', $context);
            }
            $object->setDateFlexibility($values);
        }
        if (property_exists($data, 'DepartureDateTime') && $data->{'DepartureDateTime'} !== null) {
            $object->setDepartureDateTime($data->{'DepartureDateTime'});
        }
        if (property_exists($data, 'DepartureDates') && $data->{'DepartureDates'} !== null) {
            $object->setDepartureDates($this->denormalizer->denormalize($data->{'DepartureDates'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TravelDateTimeTypeDepartureDates', 'json', $context));
        }
        if (property_exists($data, 'DepartureWindow') && $data->{'DepartureWindow'} !== null) {
            $object->setDepartureWindow($data->{'DepartureWindow'});
        }
        if (property_exists($data, 'DestinationLocation') && $data->{'DestinationLocation'} !== null) {
            $object->setDestinationLocation($this->denormalizer->denormalize($data->{'DestinationLocation'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305OriginDestinationInformationTypeDestinationLocation', 'json', $context));
        }
        if (property_exists($data, 'Flight') && $data->{'Flight'} !== null) {
            $values_1 = [];
            foreach ($data->{'Flight'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationFlightType', 'json', $context);
            }
            $object->setFlight($values_1);
        }
        if (property_exists($data, 'MaxOneWayOptions') && $data->{'MaxOneWayOptions'} !== null) {
            $object->setMaxOneWayOptions($this->denormalizer->denormalize($data->{'MaxOneWayOptions'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeMaxOneWayOptions', 'json', $context));
        }
        if (property_exists($data, 'NumOneWayOptions') && $data->{'NumOneWayOptions'} !== null) {
            $object->setNumOneWayOptions($this->denormalizer->denormalize($data->{'NumOneWayOptions'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeNumOneWayOptions', 'json', $context));
        }
        if (property_exists($data, 'OriginLocation') && $data->{'OriginLocation'} !== null) {
            $object->setOriginLocation($this->denormalizer->denormalize($data->{'OriginLocation'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305OriginDestinationInformationTypeOriginLocation', 'json', $context));
        }
        if (property_exists($data, 'SegmentType') && $data->{'SegmentType'} !== null) {
            $object->setSegmentType($this->denormalizer->denormalize($data->{'SegmentType'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeSegmentType', 'json', $context));
        }
        if (property_exists($data, 'SisterDestinationLocation') && $data->{'SisterDestinationLocation'} !== null) {
            $values_2 = [];
            foreach ($data->{'SisterDestinationLocation'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305RequestSpecifiedLocationType', 'json', $context);
            }
            $object->setSisterDestinationLocation($values_2);
        }
        if (property_exists($data, 'SisterDestinationMileage') && $data->{'SisterDestinationMileage'} !== null) {
            $object->setSisterDestinationMileage($this->denormalizer->denormalize($data->{'SisterDestinationMileage'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeSisterDestinationMileage', 'json', $context));
        }
        if (property_exists($data, 'SisterOriginLocation') && $data->{'SisterOriginLocation'} !== null) {
            $values_3 = [];
            foreach ($data->{'SisterOriginLocation'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305RequestSpecifiedLocationType', 'json', $context);
            }
            $object->setSisterOriginLocation($values_3);
        }
        if (property_exists($data, 'SisterOriginMileage') && $data->{'SisterOriginMileage'} !== null) {
            $object->setSisterOriginMileage($this->denormalizer->denormalize($data->{'SisterOriginMileage'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeSisterOriginMileage', 'json', $context));
        }
        if (property_exists($data, 'TotalTravelTime') && $data->{'TotalTravelTime'} !== null) {
            $object->setTotalTravelTime($this->denormalizer->denormalize($data->{'TotalTravelTime'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeTotalTravelTime', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAlternateTime()) {
            $data->{'AlternateTime'} = $this->normalizer->normalize($object->getAlternateTime(), 'json', $context);
        }
        if (null !== $object->getArrivalDateTime()) {
            $data->{'ArrivalDateTime'} = $object->getArrivalDateTime();
        }
        if (null !== $object->getArrivalDates()) {
            $data->{'ArrivalDates'} = $this->normalizer->normalize($object->getArrivalDates(), 'json', $context);
        }
        if (null !== $object->getArrivalWindow()) {
            $data->{'ArrivalWindow'} = $object->getArrivalWindow();
        }
        if (null !== $object->getCabinPref()) {
            $data->{'CabinPref'} = $this->normalizer->normalize($object->getCabinPref(), 'json', $context);
        }
        if (null !== $object->getConnectionLocations()) {
            $data->{'ConnectionLocations'} = $this->normalizer->normalize($object->getConnectionLocations(), 'json', $context);
        }
        if (null !== $object->getConnectionTime()) {
            $data->{'ConnectionTime'} = $this->normalizer->normalize($object->getConnectionTime(), 'json', $context);
        }
        if (null !== $object->getDateFlexibility()) {
            $values = [];
            foreach ($object->getDateFlexibility() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'DateFlexibility'} = $values;
        }
        if (null !== $object->getDepartureDateTime()) {
            $data->{'DepartureDateTime'} = $object->getDepartureDateTime();
        }
        if (null !== $object->getDepartureDates()) {
            $data->{'DepartureDates'} = $this->normalizer->normalize($object->getDepartureDates(), 'json', $context);
        }
        if (null !== $object->getDepartureWindow()) {
            $data->{'DepartureWindow'} = $object->getDepartureWindow();
        }
        if (null !== $object->getDestinationLocation()) {
            $data->{'DestinationLocation'} = $this->normalizer->normalize($object->getDestinationLocation(), 'json', $context);
        }
        if (null !== $object->getFlight()) {
            $values_1 = [];
            foreach ($object->getFlight() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'Flight'} = $values_1;
        }
        if (null !== $object->getMaxOneWayOptions()) {
            $data->{'MaxOneWayOptions'} = $this->normalizer->normalize($object->getMaxOneWayOptions(), 'json', $context);
        }
        if (null !== $object->getNumOneWayOptions()) {
            $data->{'NumOneWayOptions'} = $this->normalizer->normalize($object->getNumOneWayOptions(), 'json', $context);
        }
        if (null !== $object->getOriginLocation()) {
            $data->{'OriginLocation'} = $this->normalizer->normalize($object->getOriginLocation(), 'json', $context);
        }
        if (null !== $object->getSegmentType()) {
            $data->{'SegmentType'} = $this->normalizer->normalize($object->getSegmentType(), 'json', $context);
        }
        if (null !== $object->getSisterDestinationLocation()) {
            $values_2 = [];
            foreach ($object->getSisterDestinationLocation() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'SisterDestinationLocation'} = $values_2;
        }
        if (null !== $object->getSisterDestinationMileage()) {
            $data->{'SisterDestinationMileage'} = $this->normalizer->normalize($object->getSisterDestinationMileage(), 'json', $context);
        }
        if (null !== $object->getSisterOriginLocation()) {
            $values_3 = [];
            foreach ($object->getSisterOriginLocation() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'SisterOriginLocation'} = $values_3;
        }
        if (null !== $object->getSisterOriginMileage()) {
            $data->{'SisterOriginMileage'} = $this->normalizer->normalize($object->getSisterOriginMileage(), 'json', $context);
        }
        if (null !== $object->getTotalTravelTime()) {
            $data->{'TotalTravelTime'} = $this->normalizer->normalize($object->getTotalTravelTime(), 'json', $context);
        }

        return $data;
    }
}
