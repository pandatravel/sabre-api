<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class EquipmentNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\Equipment';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\Equipment';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\Equipment();
        if (property_exists($data, 'change') && $data->{'change'} !== null) {
            $object->setChange($data->{'change'});
        }
        if (property_exists($data, 'code') && $data->{'code'} !== null) {
            $object->setCode($data->{'code'});
        }
        if (property_exists($data, 'typeForFirstLeg') && $data->{'typeForFirstLeg'} !== null) {
            $object->setTypeForFirstLeg($data->{'typeForFirstLeg'});
        }
        if (property_exists($data, 'typeForLastLeg') && $data->{'typeForLastLeg'} !== null) {
            $object->setTypeForLastLeg($data->{'typeForLastLeg'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getChange()) {
            $data->{'change'} = $object->getChange();
        }
        if (null !== $object->getCode()) {
            $data->{'code'} = $object->getCode();
        }
        if (null !== $object->getTypeForFirstLeg()) {
            $data->{'typeForFirstLeg'} = $object->getTypeForFirstLeg();
        }
        if (null !== $object->getTypeForLastLeg()) {
            $data->{'typeForLastLeg'} = $object->getTypeForLastLeg();
        }

        return $data;
    }
}
