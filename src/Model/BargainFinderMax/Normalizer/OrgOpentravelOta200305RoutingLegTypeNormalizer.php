<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305RoutingLegTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305RoutingLegType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305RoutingLegType;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305RoutingLegType();
        if (property_exists($data, 'ConnectPoint')) {
            $values = [];
            foreach ($data->{'ConnectPoint'} as $value) {
                $values[] = $value;
            }
            $object->setConnectPoint($values);
        }
        if (property_exists($data, 'InboundCarrier')) {
            $values_1 = [];
            foreach ($data->{'InboundCarrier'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setInboundCarrier($values_1);
        }
        if (property_exists($data, 'InboundOutboundCarrier')) {
            $values_2 = [];
            foreach ($data->{'InboundOutboundCarrier'} as $value_2) {
                $values_2[] = $value_2;
            }
            $object->setInboundOutboundCarrier($values_2);
        }
        if (property_exists($data, 'OutboundCarrier')) {
            $values_3 = [];
            foreach ($data->{'OutboundCarrier'} as $value_3) {
                $values_3[] = $value_3;
            }
            $object->setOutboundCarrier($values_3);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getConnectPoint()) {
            $values = [];
            foreach ($object->getConnectPoint() as $value) {
                $values[] = $value;
            }
            $data->{'ConnectPoint'} = $values;
        }
        if (null !== $object->getInboundCarrier()) {
            $values_1 = [];
            foreach ($object->getInboundCarrier() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'InboundCarrier'} = $values_1;
        }
        if (null !== $object->getInboundOutboundCarrier()) {
            $values_2 = [];
            foreach ($object->getInboundOutboundCarrier() as $value_2) {
                $values_2[] = $value_2;
            }
            $data->{'InboundOutboundCarrier'} = $values_2;
        }
        if (null !== $object->getOutboundCarrier()) {
            $values_3 = [];
            foreach ($object->getOutboundCarrier() as $value_3) {
                $values_3[] = $value_3;
            }
            $data->{'OutboundCarrier'} = $values_3;
        }

        return $data;
    }
}
