<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class BaggageInformationTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\BaggageInformationType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\BaggageInformationType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\BaggageInformationType();
        if (property_exists($data, 'airlineCode')) {
            $object->setAirlineCode($data->{'airlineCode'});
        }
        if (property_exists($data, 'allowance')) {
            $object->setAllowance($this->denormalizer->denormalize($data->{'allowance'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\Allowance', 'json', $context));
        }
        if (property_exists($data, 'charge')) {
            $object->setCharge($this->denormalizer->denormalize($data->{'charge'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\Charge', 'json', $context));
        }
        if (property_exists($data, 'provisionType')) {
            $object->setProvisionType($data->{'provisionType'});
        }
        if (property_exists($data, 'segments')) {
            $values = [];
            foreach ($data->{'segments'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\Segment', 'json', $context);
            }
            $object->setSegments($values);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAirlineCode()) {
            $data->{'airlineCode'} = $object->getAirlineCode();
        }
        if (null !== $object->getAllowance()) {
            $data->{'allowance'} = $this->normalizer->normalize($object->getAllowance(), 'json', $context);
        }
        if (null !== $object->getCharge()) {
            $data->{'charge'} = $this->normalizer->normalize($object->getCharge(), 'json', $context);
        }
        if (null !== $object->getProvisionType()) {
            $data->{'provisionType'} = $object->getProvisionType();
        }
        if (null !== $object->getSegments()) {
            $values = [];
            foreach ($object->getSegments() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'segments'} = $values;
        }

        return $data;
    }
}
