<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305ExchangeTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305ExchangeType();
        if (property_exists($data, 'Arunk') && $data->{'Arunk'} !== null) {
            $values = [];
            foreach ($data->{'Arunk'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ArunkType', 'json', $context);
            }
            $object->setArunk($values);
        }
        if (property_exists($data, 'BypassAdvancePurchaseOption') && $data->{'BypassAdvancePurchaseOption'} !== null) {
            $object->setBypassAdvancePurchaseOption($data->{'BypassAdvancePurchaseOption'});
        }
        if (property_exists($data, 'ExchangedTktIssueDateTime') && $data->{'ExchangedTktIssueDateTime'} !== null) {
            $object->setExchangedTktIssueDateTime($data->{'ExchangedTktIssueDateTime'});
        }
        if (property_exists($data, 'Fare') && $data->{'Fare'} !== null) {
            $object->setFare($this->denormalizer->denormalize($data->{'Fare'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeFareType', 'json', $context));
        }
        if (property_exists($data, 'NumberOfTaxBoxes') && $data->{'NumberOfTaxBoxes'} !== null) {
            $object->setNumberOfTaxBoxes($data->{'NumberOfTaxBoxes'});
        }
        if (property_exists($data, 'OriginDestinationInformation') && $data->{'OriginDestinationInformation'} !== null) {
            $values_1 = [];
            foreach ($data->{'OriginDestinationInformation'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationType', 'json', $context);
            }
            $object->setOriginDestinationInformation($values_1);
        }
        if (property_exists($data, 'OriginalTktIssueDateTime') && $data->{'OriginalTktIssueDateTime'} !== null) {
            $object->setOriginalTktIssueDateTime($data->{'OriginalTktIssueDateTime'});
        }
        if (property_exists($data, 'POS') && $data->{'POS'} !== null) {
            $object->setPOS($this->denormalizer->denormalize($data->{'POS'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangePOSType', 'json', $context));
        }
        if (property_exists($data, 'PreviousExchangeDateTime') && $data->{'PreviousExchangeDateTime'} !== null) {
            $object->setPreviousExchangeDateTime($data->{'PreviousExchangeDateTime'});
        }
        if (property_exists($data, 'TPA_Extensions') && $data->{'TPA_Extensions'} !== null) {
            $object->setTPAExtensions($this->denormalizer->denormalize($data->{'TPA_Extensions'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeTPAExtensionsType', 'json', $context));
        }
        if (property_exists($data, 'TravelPreferences') && $data->{'TravelPreferences'} !== null) {
            $object->setTravelPreferences($this->denormalizer->denormalize($data->{'TravelPreferences'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeAirSearchPrefsType', 'json', $context));
        }
        if (property_exists($data, 'TravelerInfoSummary') && $data->{'TravelerInfoSummary'} !== null) {
            $object->setTravelerInfoSummary($this->denormalizer->denormalize($data->{'TravelerInfoSummary'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TravelerInfoSummaryType', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getArunk()) {
            $values = [];
            foreach ($object->getArunk() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'Arunk'} = $values;
        }
        if (null !== $object->getBypassAdvancePurchaseOption()) {
            $data->{'BypassAdvancePurchaseOption'} = $object->getBypassAdvancePurchaseOption();
        }
        if (null !== $object->getExchangedTktIssueDateTime()) {
            $data->{'ExchangedTktIssueDateTime'} = $object->getExchangedTktIssueDateTime();
        }
        if (null !== $object->getFare()) {
            $data->{'Fare'} = $this->normalizer->normalize($object->getFare(), 'json', $context);
        }
        if (null !== $object->getNumberOfTaxBoxes()) {
            $data->{'NumberOfTaxBoxes'} = $object->getNumberOfTaxBoxes();
        }
        if (null !== $object->getOriginDestinationInformation()) {
            $values_1 = [];
            foreach ($object->getOriginDestinationInformation() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'OriginDestinationInformation'} = $values_1;
        }
        if (null !== $object->getOriginalTktIssueDateTime()) {
            $data->{'OriginalTktIssueDateTime'} = $object->getOriginalTktIssueDateTime();
        }
        if (null !== $object->getPOS()) {
            $data->{'POS'} = $this->normalizer->normalize($object->getPOS(), 'json', $context);
        }
        if (null !== $object->getPreviousExchangeDateTime()) {
            $data->{'PreviousExchangeDateTime'} = $object->getPreviousExchangeDateTime();
        }
        if (null !== $object->getTPAExtensions()) {
            $data->{'TPA_Extensions'} = $this->normalizer->normalize($object->getTPAExtensions(), 'json', $context);
        }
        if (null !== $object->getTravelPreferences()) {
            $data->{'TravelPreferences'} = $this->normalizer->normalize($object->getTravelPreferences(), 'json', $context);
        }
        if (null !== $object->getTravelerInfoSummary()) {
            $data->{'TravelerInfoSummary'} = $this->normalizer->normalize($object->getTravelerInfoSummary(), 'json', $context);
        }

        return $data;
    }
}
