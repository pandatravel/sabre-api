<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305FlexibleFaresTypeFareParametersLegNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersLeg';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersLeg';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305FlexibleFaresTypeFareParametersLeg();
        if (property_exists($data, 'Baggage') && $data->{'Baggage'} !== null) {
            $object->setBaggage($this->denormalizer->denormalize($data->{'Baggage'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305BaggageType', 'json', $context));
        }
        if (property_exists($data, 'BrandFilters') && $data->{'BrandFilters'} !== null) {
            $object->setBrandFilters($this->denormalizer->denormalize($data->{'BrandFilters'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305BrandFiltersType', 'json', $context));
        }
        if (property_exists($data, 'Cabin') && $data->{'Cabin'} !== null) {
            $object->setCabin($this->denormalizer->denormalize($data->{'Cabin'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresTypeFareParametersLegCabin', 'json', $context));
        }
        if (property_exists($data, 'ClassOfService') && $data->{'ClassOfService'} !== null) {
            $values = [];
            foreach ($data->{'ClassOfService'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ClassOfServiceElemType', 'json', $context);
            }
            $object->setClassOfService($values);
        }
        if (property_exists($data, 'FareBasis') && $data->{'FareBasis'} !== null) {
            $values_1 = [];
            foreach ($data->{'FareBasis'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FareBasisType', 'json', $context);
            }
            $object->setFareBasis($values_1);
        }
        if (property_exists($data, 'FareType') && $data->{'FareType'} !== null) {
            $values_2 = [];
            foreach ($data->{'FareType'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FareTypePrefType', 'json', $context);
            }
            $object->setFareType($values_2);
        }
        if (property_exists($data, 'Num') && $data->{'Num'} !== null) {
            $object->setNum($data->{'Num'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBaggage()) {
            $data->{'Baggage'} = $this->normalizer->normalize($object->getBaggage(), 'json', $context);
        }
        if (null !== $object->getBrandFilters()) {
            $data->{'BrandFilters'} = $this->normalizer->normalize($object->getBrandFilters(), 'json', $context);
        }
        if (null !== $object->getCabin()) {
            $data->{'Cabin'} = $this->normalizer->normalize($object->getCabin(), 'json', $context);
        }
        if (null !== $object->getClassOfService()) {
            $values = [];
            foreach ($object->getClassOfService() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'ClassOfService'} = $values;
        }
        if (null !== $object->getFareBasis()) {
            $values_1 = [];
            foreach ($object->getFareBasis() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'FareBasis'} = $values_1;
        }
        if (null !== $object->getFareType()) {
            $values_2 = [];
            foreach ($object->getFareType() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'FareType'} = $values_2;
        }
        if (null !== $object->getNum()) {
            $data->{'Num'} = $object->getNum();
        }

        return $data;
    }
}
