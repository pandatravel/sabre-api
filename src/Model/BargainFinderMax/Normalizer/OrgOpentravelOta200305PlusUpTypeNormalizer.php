<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305PlusUpTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PlusUpType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PlusUpType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305PlusUpType();
        if (property_exists($data, 'Amount')) {
            $object->setAmount($data->{'Amount'});
        }
        if (property_exists($data, 'CountryOfPayment')) {
            $object->setCountryOfPayment($data->{'CountryOfPayment'});
        }
        if (property_exists($data, 'DestinationCity')) {
            $object->setDestinationCity($data->{'DestinationCity'});
        }
        if (property_exists($data, 'FareDestinationCity')) {
            $object->setFareDestinationCity($data->{'FareDestinationCity'});
        }
        if (property_exists($data, 'FareOriginCity')) {
            $object->setFareOriginCity($data->{'FareOriginCity'});
        }
        if (property_exists($data, 'Message')) {
            $object->setMessage($data->{'Message'});
        }
        if (property_exists($data, 'OriginCity')) {
            $object->setOriginCity($data->{'OriginCity'});
        }
        if (property_exists($data, 'ViaCity')) {
            $object->setViaCity($data->{'ViaCity'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAmount()) {
            $data->{'Amount'} = $object->getAmount();
        }
        if (null !== $object->getCountryOfPayment()) {
            $data->{'CountryOfPayment'} = $object->getCountryOfPayment();
        }
        if (null !== $object->getDestinationCity()) {
            $data->{'DestinationCity'} = $object->getDestinationCity();
        }
        if (null !== $object->getFareDestinationCity()) {
            $data->{'FareDestinationCity'} = $object->getFareDestinationCity();
        }
        if (null !== $object->getFareOriginCity()) {
            $data->{'FareOriginCity'} = $object->getFareOriginCity();
        }
        if (null !== $object->getMessage()) {
            $data->{'Message'} = $object->getMessage();
        }
        if (null !== $object->getOriginCity()) {
            $data->{'OriginCity'} = $object->getOriginCity();
        }
        if (null !== $object->getViaCity()) {
            $data->{'ViaCity'} = $object->getViaCity();
        }

        return $data;
    }
}
