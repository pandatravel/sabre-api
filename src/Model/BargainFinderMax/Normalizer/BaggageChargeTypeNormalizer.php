<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class BaggageChargeTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\BaggageChargeType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\BaggageChargeType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\BaggageChargeType();
        if (property_exists($data, 'description1') && $data->{'description1'} !== null) {
            $object->setDescription1($data->{'description1'});
        }
        if (property_exists($data, 'description2') && $data->{'description2'} !== null) {
            $object->setDescription2($data->{'description2'});
        }
        if (property_exists($data, 'equivalentAmount') && $data->{'equivalentAmount'} !== null) {
            $object->setEquivalentAmount($data->{'equivalentAmount'});
        }
        if (property_exists($data, 'equivalentCurrency') && $data->{'equivalentCurrency'} !== null) {
            $object->setEquivalentCurrency($data->{'equivalentCurrency'});
        }
        if (property_exists($data, 'firstPiece') && $data->{'firstPiece'} !== null) {
            $object->setFirstPiece($data->{'firstPiece'});
        }
        if (property_exists($data, 'id') && $data->{'id'} !== null) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'lastPiece') && $data->{'lastPiece'} !== null) {
            $object->setLastPiece($data->{'lastPiece'});
        }
        if (property_exists($data, 'noChargeNotAvailable') && $data->{'noChargeNotAvailable'} !== null) {
            $object->setNoChargeNotAvailable($data->{'noChargeNotAvailable'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getDescription1()) {
            $data->{'description1'} = $object->getDescription1();
        }
        if (null !== $object->getDescription2()) {
            $data->{'description2'} = $object->getDescription2();
        }
        if (null !== $object->getEquivalentAmount()) {
            $data->{'equivalentAmount'} = $object->getEquivalentAmount();
        }
        if (null !== $object->getEquivalentCurrency()) {
            $data->{'equivalentCurrency'} = $object->getEquivalentCurrency();
        }
        if (null !== $object->getFirstPiece()) {
            $data->{'firstPiece'} = $object->getFirstPiece();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getLastPiece()) {
            $data->{'lastPiece'} = $object->getLastPiece();
        }
        if (null !== $object->getNoChargeNotAvailable()) {
            $data->{'noChargeNotAvailable'} = $object->getNoChargeNotAvailable();
        }

        return $data;
    }
}
