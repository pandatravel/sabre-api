<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsIndicatorsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsIndicators';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsIndicators';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsIndicators();
        if (property_exists($data, 'MinMaxStay') && $data->{'MinMaxStay'} !== null) {
            $object->setMinMaxStay($this->denormalizer->denormalize($data->{'MinMaxStay'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsIndicatorsMinMaxStay', 'json', $context));
        }
        if (property_exists($data, 'RefundPenalty') && $data->{'RefundPenalty'} !== null) {
            $object->setRefundPenalty($this->denormalizer->denormalize($data->{'RefundPenalty'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsIndicatorsRefundPenalty', 'json', $context));
        }
        if (property_exists($data, 'ResTicketing') && $data->{'ResTicketing'} !== null) {
            $object->setResTicketing($this->denormalizer->denormalize($data->{'ResTicketing'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsIndicatorsResTicketing', 'json', $context));
        }
        if (property_exists($data, 'RetainFare') && $data->{'RetainFare'} !== null) {
            $object->setRetainFare($this->denormalizer->denormalize($data->{'RetainFare'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsIndicatorsRetainFare', 'json', $context));
        }
        if (property_exists($data, 'TravelPolicy') && $data->{'TravelPolicy'} !== null) {
            $object->setTravelPolicy($this->denormalizer->denormalize($data->{'TravelPolicy'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsIndicatorsTravelPolicy', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getMinMaxStay()) {
            $data->{'MinMaxStay'} = $this->normalizer->normalize($object->getMinMaxStay(), 'json', $context);
        }
        if (null !== $object->getRefundPenalty()) {
            $data->{'RefundPenalty'} = $this->normalizer->normalize($object->getRefundPenalty(), 'json', $context);
        }
        if (null !== $object->getResTicketing()) {
            $data->{'ResTicketing'} = $this->normalizer->normalize($object->getResTicketing(), 'json', $context);
        }
        if (null !== $object->getRetainFare()) {
            $data->{'RetainFare'} = $this->normalizer->normalize($object->getRetainFare(), 'json', $context);
        }
        if (null !== $object->getTravelPolicy()) {
            $data->{'TravelPolicy'} = $this->normalizer->normalize($object->getTravelPolicy(), 'json', $context);
        }

        return $data;
    }
}
