<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsBrandedFareIndicatorsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsBrandedFareIndicators';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsBrandedFareIndicators';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsBrandedFareIndicators();
        if (property_exists($data, 'BrandFilters')) {
            $object->setBrandFilters($this->denormalizer->denormalize($data->{'BrandFilters'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305BrandFiltersType', 'json', $context));
        }
        if (property_exists($data, 'ItinParityBrandlessLeg')) {
            $object->setItinParityBrandlessLeg($data->{'ItinParityBrandlessLeg'});
        }
        if (property_exists($data, 'ItinParityFallbackMode')) {
            $object->setItinParityFallbackMode($data->{'ItinParityFallbackMode'});
        }
        if (property_exists($data, 'KeepLegParityForLowestSingle')) {
            $object->setKeepLegParityForLowestSingle($data->{'KeepLegParityForLowestSingle'});
        }
        if (property_exists($data, 'MultipleBrandedFares')) {
            $object->setMultipleBrandedFares($data->{'MultipleBrandedFares'});
        }
        if (property_exists($data, 'ParityMode')) {
            $object->setParityMode($data->{'ParityMode'});
        }
        if (property_exists($data, 'ReturnBrandAncillaries')) {
            $object->setReturnBrandAncillaries($data->{'ReturnBrandAncillaries'});
        }
        if (property_exists($data, 'ReturnCheapestUnbrandedFare')) {
            $object->setReturnCheapestUnbrandedFare($this->denormalizer->denormalize($data->{'ReturnCheapestUnbrandedFare'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PriceRequestInformationTypeTPAExtensionsBrandedFareIndicatorsReturnCheapestUnbrandedFare', 'json', $context));
        }
        if (property_exists($data, 'SingleBrandedFare')) {
            $object->setSingleBrandedFare($data->{'SingleBrandedFare'});
        }
        if (property_exists($data, 'UpsellLimit')) {
            $object->setUpsellLimit($data->{'UpsellLimit'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBrandFilters()) {
            $data->{'BrandFilters'} = $this->normalizer->normalize($object->getBrandFilters(), 'json', $context);
        }
        if (null !== $object->getItinParityBrandlessLeg()) {
            $data->{'ItinParityBrandlessLeg'} = $object->getItinParityBrandlessLeg();
        }
        if (null !== $object->getItinParityFallbackMode()) {
            $data->{'ItinParityFallbackMode'} = $object->getItinParityFallbackMode();
        }
        if (null !== $object->getKeepLegParityForLowestSingle()) {
            $data->{'KeepLegParityForLowestSingle'} = $object->getKeepLegParityForLowestSingle();
        }
        if (null !== $object->getMultipleBrandedFares()) {
            $data->{'MultipleBrandedFares'} = $object->getMultipleBrandedFares();
        }
        if (null !== $object->getParityMode()) {
            $data->{'ParityMode'} = $object->getParityMode();
        }
        if (null !== $object->getReturnBrandAncillaries()) {
            $data->{'ReturnBrandAncillaries'} = $object->getReturnBrandAncillaries();
        }
        if (null !== $object->getReturnCheapestUnbrandedFare()) {
            $data->{'ReturnCheapestUnbrandedFare'} = $this->normalizer->normalize($object->getReturnCheapestUnbrandedFare(), 'json', $context);
        }
        if (null !== $object->getSingleBrandedFare()) {
            $data->{'SingleBrandedFare'} = $object->getSingleBrandedFare();
        }
        if (null !== $object->getUpsellLimit()) {
            $data->{'UpsellLimit'} = $object->getUpsellLimit();
        }

        return $data;
    }
}
