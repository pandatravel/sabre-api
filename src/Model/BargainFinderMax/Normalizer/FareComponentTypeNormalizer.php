<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class FareComponentTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\FareComponentType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\FareComponentType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\FareComponentType();
        if (property_exists($data, 'applicablePricingCategories') && $data->{'applicablePricingCategories'} !== null) {
            $object->setApplicablePricingCategories($data->{'applicablePricingCategories'});
        }
        if (property_exists($data, 'aslRetailerRuleCode') && $data->{'aslRetailerRuleCode'} !== null) {
            $object->setAslRetailerRuleCode($data->{'aslRetailerRuleCode'});
        }
        if (property_exists($data, 'brand') && $data->{'brand'} !== null) {
            $object->setBrand($this->denormalizer->denormalize($data->{'brand'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\BrandType', 'json', $context));
        }
        if (property_exists($data, 'corporateIdMatched') && $data->{'corporateIdMatched'} !== null) {
            $object->setCorporateIdMatched($data->{'corporateIdMatched'});
        }
        if (property_exists($data, 'direction') && $data->{'direction'} !== null) {
            $object->setDirection($data->{'direction'});
        }
        if (property_exists($data, 'directionality') && $data->{'directionality'} !== null) {
            $object->setDirectionality($data->{'directionality'});
        }
        if (property_exists($data, 'displayCategoryType') && $data->{'displayCategoryType'} !== null) {
            $object->setDisplayCategoryType($data->{'displayCategoryType'});
        }
        if (property_exists($data, 'fareAmount') && $data->{'fareAmount'} !== null) {
            $object->setFareAmount($data->{'fareAmount'});
        }
        if (property_exists($data, 'fareBasisCode') && $data->{'fareBasisCode'} !== null) {
            $object->setFareBasisCode($data->{'fareBasisCode'});
        }
        if (property_exists($data, 'fareComponentReferenceId') && $data->{'fareComponentReferenceId'} !== null) {
            $object->setFareComponentReferenceId($data->{'fareComponentReferenceId'});
        }
        if (property_exists($data, 'fareCurrency') && $data->{'fareCurrency'} !== null) {
            $object->setFareCurrency($data->{'fareCurrency'});
        }
        if (property_exists($data, 'farePassengerType') && $data->{'farePassengerType'} !== null) {
            $object->setFarePassengerType($data->{'farePassengerType'});
        }
        if (property_exists($data, 'fareTypeBitmap') && $data->{'fareTypeBitmap'} !== null) {
            $object->setFareTypeBitmap($data->{'fareTypeBitmap'});
        }
        if (property_exists($data, 'generalRetailerRuleCode') && $data->{'generalRetailerRuleCode'} !== null) {
            $object->setGeneralRetailerRuleCode($data->{'generalRetailerRuleCode'});
        }
        if (property_exists($data, 'governingCarrier') && $data->{'governingCarrier'} !== null) {
            $object->setGoverningCarrier($data->{'governingCarrier'});
        }
        if (property_exists($data, 'handlingMarkupDetails') && $data->{'handlingMarkupDetails'} !== null) {
            $values = [];
            foreach ($data->{'handlingMarkupDetails'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\HandlingMarkupDetailType', 'json', $context);
            }
            $object->setHandlingMarkupDetails($values);
        }
        if (property_exists($data, 'higherIntermediatePoints') && $data->{'higherIntermediatePoints'} !== null) {
            $values_1 = [];
            foreach ($data->{'higherIntermediatePoints'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\HigherIntermediatePointType', 'json', $context);
            }
            $object->setHigherIntermediatePoints($values_1);
        }
        if (property_exists($data, 'id') && $data->{'id'} !== null) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'matchedAccountCode') && $data->{'matchedAccountCode'} !== null) {
            $object->setMatchedAccountCode($data->{'matchedAccountCode'});
        }
        if (property_exists($data, 'mileage') && $data->{'mileage'} !== null) {
            $object->setMileage($data->{'mileage'});
        }
        if (property_exists($data, 'mileageSurcharge') && $data->{'mileageSurcharge'} !== null) {
            $object->setMileageSurcharge($data->{'mileageSurcharge'});
        }
        if (property_exists($data, 'milesAmount') && $data->{'milesAmount'} !== null) {
            $object->setMilesAmount($data->{'milesAmount'});
        }
        if (property_exists($data, 'negotiatedFare') && $data->{'negotiatedFare'} !== null) {
            $object->setNegotiatedFare($data->{'negotiatedFare'});
        }
        if (property_exists($data, 'notValidAfter') && $data->{'notValidAfter'} !== null) {
            $object->setNotValidAfter($data->{'notValidAfter'});
        }
        if (property_exists($data, 'notValidBefore') && $data->{'notValidBefore'} !== null) {
            $object->setNotValidBefore($data->{'notValidBefore'});
        }
        if (property_exists($data, 'oneWayFare') && $data->{'oneWayFare'} !== null) {
            $object->setOneWayFare($data->{'oneWayFare'});
        }
        if (property_exists($data, 'plusUps') && $data->{'plusUps'} !== null) {
            $values_2 = [];
            foreach ($data->{'plusUps'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\PlusUpInformationType', 'json', $context);
            }
            $object->setPlusUps($values_2);
        }
        if (property_exists($data, 'privateFare') && $data->{'privateFare'} !== null) {
            $object->setPrivateFare($data->{'privateFare'});
        }
        if (property_exists($data, 'publishedFareAmount') && $data->{'publishedFareAmount'} !== null) {
            $object->setPublishedFareAmount($data->{'publishedFareAmount'});
        }
        if (property_exists($data, 'segments') && $data->{'segments'} !== null) {
            $values_3 = [];
            foreach ($data->{'segments'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\SegmentsType', 'json', $context);
            }
            $object->setSegments($values_3);
        }
        if (property_exists($data, 'ticketDesignator') && $data->{'ticketDesignator'} !== null) {
            $object->setTicketDesignator($data->{'ticketDesignator'});
        }
        if (property_exists($data, 'vendorCode') && $data->{'vendorCode'} !== null) {
            $object->setVendorCode($data->{'vendorCode'});
        }
        if (property_exists($data, 'webBasedFare') && $data->{'webBasedFare'} !== null) {
            $object->setWebBasedFare($data->{'webBasedFare'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getApplicablePricingCategories()) {
            $data->{'applicablePricingCategories'} = $object->getApplicablePricingCategories();
        }
        if (null !== $object->getAslRetailerRuleCode()) {
            $data->{'aslRetailerRuleCode'} = $object->getAslRetailerRuleCode();
        }
        if (null !== $object->getBrand()) {
            $data->{'brand'} = $this->normalizer->normalize($object->getBrand(), 'json', $context);
        }
        if (null !== $object->getCorporateIdMatched()) {
            $data->{'corporateIdMatched'} = $object->getCorporateIdMatched();
        }
        if (null !== $object->getDirection()) {
            $data->{'direction'} = $object->getDirection();
        }
        if (null !== $object->getDirectionality()) {
            $data->{'directionality'} = $object->getDirectionality();
        }
        if (null !== $object->getDisplayCategoryType()) {
            $data->{'displayCategoryType'} = $object->getDisplayCategoryType();
        }
        if (null !== $object->getFareAmount()) {
            $data->{'fareAmount'} = $object->getFareAmount();
        }
        if (null !== $object->getFareBasisCode()) {
            $data->{'fareBasisCode'} = $object->getFareBasisCode();
        }
        if (null !== $object->getFareComponentReferenceId()) {
            $data->{'fareComponentReferenceId'} = $object->getFareComponentReferenceId();
        }
        if (null !== $object->getFareCurrency()) {
            $data->{'fareCurrency'} = $object->getFareCurrency();
        }
        if (null !== $object->getFarePassengerType()) {
            $data->{'farePassengerType'} = $object->getFarePassengerType();
        }
        if (null !== $object->getFareTypeBitmap()) {
            $data->{'fareTypeBitmap'} = $object->getFareTypeBitmap();
        }
        if (null !== $object->getGeneralRetailerRuleCode()) {
            $data->{'generalRetailerRuleCode'} = $object->getGeneralRetailerRuleCode();
        }
        if (null !== $object->getGoverningCarrier()) {
            $data->{'governingCarrier'} = $object->getGoverningCarrier();
        }
        if (null !== $object->getHandlingMarkupDetails()) {
            $values = [];
            foreach ($object->getHandlingMarkupDetails() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'handlingMarkupDetails'} = $values;
        }
        if (null !== $object->getHigherIntermediatePoints()) {
            $values_1 = [];
            foreach ($object->getHigherIntermediatePoints() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'higherIntermediatePoints'} = $values_1;
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getMatchedAccountCode()) {
            $data->{'matchedAccountCode'} = $object->getMatchedAccountCode();
        }
        if (null !== $object->getMileage()) {
            $data->{'mileage'} = $object->getMileage();
        }
        if (null !== $object->getMileageSurcharge()) {
            $data->{'mileageSurcharge'} = $object->getMileageSurcharge();
        }
        if (null !== $object->getMilesAmount()) {
            $data->{'milesAmount'} = $object->getMilesAmount();
        }
        if (null !== $object->getNegotiatedFare()) {
            $data->{'negotiatedFare'} = $object->getNegotiatedFare();
        }
        if (null !== $object->getNotValidAfter()) {
            $data->{'notValidAfter'} = $object->getNotValidAfter();
        }
        if (null !== $object->getNotValidBefore()) {
            $data->{'notValidBefore'} = $object->getNotValidBefore();
        }
        if (null !== $object->getOneWayFare()) {
            $data->{'oneWayFare'} = $object->getOneWayFare();
        }
        if (null !== $object->getPlusUps()) {
            $values_2 = [];
            foreach ($object->getPlusUps() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'plusUps'} = $values_2;
        }
        if (null !== $object->getPrivateFare()) {
            $data->{'privateFare'} = $object->getPrivateFare();
        }
        if (null !== $object->getPublishedFareAmount()) {
            $data->{'publishedFareAmount'} = $object->getPublishedFareAmount();
        }
        if (null !== $object->getSegments()) {
            $values_3 = [];
            foreach ($object->getSegments() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'segments'} = $values_3;
        }
        if (null !== $object->getTicketDesignator()) {
            $data->{'ticketDesignator'} = $object->getTicketDesignator();
        }
        if (null !== $object->getVendorCode()) {
            $data->{'vendorCode'} = $object->getVendorCode();
        }
        if (null !== $object->getWebBasedFare()) {
            $data->{'webBasedFare'} = $object->getWebBasedFare();
        }

        return $data;
    }
}
