<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CarrierNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\Carrier';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\Carrier';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\Carrier();
        if (property_exists($data, 'alliances')) {
            $object->setAlliances($data->{'alliances'});
        }
        if (property_exists($data, 'basicBookingRequest')) {
            $object->setBasicBookingRequest($data->{'basicBookingRequest'});
        }
        if (property_exists($data, 'callDirect')) {
            $object->setCallDirect($data->{'callDirect'});
        }
        if (property_exists($data, 'codeShared')) {
            $object->setCodeShared($data->{'codeShared'});
        }
        if (property_exists($data, 'disclosure')) {
            $object->setDisclosure($data->{'disclosure'});
        }
        if (property_exists($data, 'equipment')) {
            $object->setEquipment($this->denormalizer->denormalize($data->{'equipment'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\Equipment', 'json', $context));
        }
        if (property_exists($data, 'marketing')) {
            $object->setMarketing($data->{'marketing'});
        }
        if (property_exists($data, 'marketingFlightNumber')) {
            $object->setMarketingFlightNumber($data->{'marketingFlightNumber'});
        }
        if (property_exists($data, 'operating')) {
            $object->setOperating($data->{'operating'});
        }
        if (property_exists($data, 'operatingFlightNumber')) {
            $object->setOperatingFlightNumber($data->{'operatingFlightNumber'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAlliances()) {
            $data->{'alliances'} = $object->getAlliances();
        }
        if (null !== $object->getBasicBookingRequest()) {
            $data->{'basicBookingRequest'} = $object->getBasicBookingRequest();
        }
        if (null !== $object->getCallDirect()) {
            $data->{'callDirect'} = $object->getCallDirect();
        }
        if (null !== $object->getCodeShared()) {
            $data->{'codeShared'} = $object->getCodeShared();
        }
        if (null !== $object->getDisclosure()) {
            $data->{'disclosure'} = $object->getDisclosure();
        }
        if (null !== $object->getEquipment()) {
            $data->{'equipment'} = $this->normalizer->normalize($object->getEquipment(), 'json', $context);
        }
        if (null !== $object->getMarketing()) {
            $data->{'marketing'} = $object->getMarketing();
        }
        if (null !== $object->getMarketingFlightNumber()) {
            $data->{'marketingFlightNumber'} = $object->getMarketingFlightNumber();
        }
        if (null !== $object->getOperating()) {
            $data->{'operating'} = $object->getOperating();
        }
        if (null !== $object->getOperatingFlightNumber()) {
            $data->{'operatingFlightNumber'} = $object->getOperatingFlightNumber();
        }

        return $data;
    }
}
