<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PricingInformationTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\PricingInformationType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\PricingInformationType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\PricingInformationType();
        if (property_exists($data, 'PoSCountryCode')) {
            $object->setPoSCountryCode($data->{'PoSCountryCode'});
        }
        if (property_exists($data, 'brand')) {
            $object->setBrand($data->{'brand'});
        }
        if (property_exists($data, 'brandsOnAnyMarket')) {
            $object->setBrandsOnAnyMarket($data->{'brandsOnAnyMarket'});
        }
        if (property_exists($data, 'cached')) {
            $object->setCached($this->denormalizer->denormalize($data->{'cached'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\Cached', 'json', $context));
        }
        if (property_exists($data, 'fare')) {
            $object->setFare($this->denormalizer->denormalize($data->{'fare'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\FareType', 'json', $context));
        }
        if (property_exists($data, 'flexibleFare')) {
            $object->setFlexibleFare($data->{'flexibleFare'});
        }
        if (property_exists($data, 'offer')) {
            $object->setOffer($this->denormalizer->denormalize($data->{'offer'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\Offer', 'json', $context));
        }
        if (property_exists($data, 'passengerGroup')) {
            $object->setPassengerGroup($data->{'passengerGroup'});
        }
        if (property_exists($data, 'pricingSubsource')) {
            $object->setPricingSubsource($data->{'pricingSubsource'});
        }
        if (property_exists($data, 'program')) {
            $object->setProgram($data->{'program'});
        }
        if (property_exists($data, 'pseudoCityCode')) {
            $object->setPseudoCityCode($data->{'pseudoCityCode'});
        }
        if (property_exists($data, 'revalidated')) {
            $object->setRevalidated($data->{'revalidated'});
        }
        if (property_exists($data, 'soldOut')) {
            $object->setSoldOut($this->denormalizer->denormalize($data->{'soldOut'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\SoldOutType', 'json', $context));
        }
        if (property_exists($data, 'tickets')) {
            $values = [];
            foreach ($data->{'tickets'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\TicketType', 'json', $context);
            }
            $object->setTickets($values);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getPoSCountryCode()) {
            $data->{'PoSCountryCode'} = $object->getPoSCountryCode();
        }
        if (null !== $object->getBrand()) {
            $data->{'brand'} = $object->getBrand();
        }
        if (null !== $object->getBrandsOnAnyMarket()) {
            $data->{'brandsOnAnyMarket'} = $object->getBrandsOnAnyMarket();
        }
        if (null !== $object->getCached()) {
            $data->{'cached'} = $this->normalizer->normalize($object->getCached(), 'json', $context);
        }
        if (null !== $object->getFare()) {
            $data->{'fare'} = $this->normalizer->normalize($object->getFare(), 'json', $context);
        }
        if (null !== $object->getFlexibleFare()) {
            $data->{'flexibleFare'} = $object->getFlexibleFare();
        }
        if (null !== $object->getOffer()) {
            $data->{'offer'} = $this->normalizer->normalize($object->getOffer(), 'json', $context);
        }
        if (null !== $object->getPassengerGroup()) {
            $data->{'passengerGroup'} = $object->getPassengerGroup();
        }
        if (null !== $object->getPricingSubsource()) {
            $data->{'pricingSubsource'} = $object->getPricingSubsource();
        }
        if (null !== $object->getProgram()) {
            $data->{'program'} = $object->getProgram();
        }
        if (null !== $object->getPseudoCityCode()) {
            $data->{'pseudoCityCode'} = $object->getPseudoCityCode();
        }
        if (null !== $object->getRevalidated()) {
            $data->{'revalidated'} = $object->getRevalidated();
        }
        if (null !== $object->getSoldOut()) {
            $data->{'soldOut'} = $this->normalizer->normalize($object->getSoldOut(), 'json', $context);
        }
        if (null !== $object->getTickets()) {
            $values = [];
            foreach ($object->getTickets() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'tickets'} = $values;
        }

        return $data;
    }
}
