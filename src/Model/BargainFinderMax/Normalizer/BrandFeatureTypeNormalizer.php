<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class BrandFeatureTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\BrandFeatureType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\BrandFeatureType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\BrandFeatureType();
        if (property_exists($data, 'application') && $data->{'application'} !== null) {
            $object->setApplication($data->{'application'});
        }
        if (property_exists($data, 'commercialName') && $data->{'commercialName'} !== null) {
            $object->setCommercialName($data->{'commercialName'});
        }
        if (property_exists($data, 'id') && $data->{'id'} !== null) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'serviceGroup') && $data->{'serviceGroup'} !== null) {
            $object->setServiceGroup($data->{'serviceGroup'});
        }
        if (property_exists($data, 'serviceType') && $data->{'serviceType'} !== null) {
            $object->setServiceType($data->{'serviceType'});
        }
        if (property_exists($data, 'subCode') && $data->{'subCode'} !== null) {
            $object->setSubCode($data->{'subCode'});
        }
        if (property_exists($data, 'vendor') && $data->{'vendor'} !== null) {
            $object->setVendor($data->{'vendor'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getApplication()) {
            $data->{'application'} = $object->getApplication();
        }
        if (null !== $object->getCommercialName()) {
            $data->{'commercialName'} = $object->getCommercialName();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getServiceGroup()) {
            $data->{'serviceGroup'} = $object->getServiceGroup();
        }
        if (null !== $object->getServiceType()) {
            $data->{'serviceType'} = $object->getServiceType();
        }
        if (null !== $object->getSubCode()) {
            $data->{'subCode'} = $object->getSubCode();
        }
        if (null !== $object->getVendor()) {
            $data->{'vendor'} = $object->getVendor();
        }

        return $data;
    }
}
