<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305BillingInformationTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305BillingInformationType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305BillingInformationType;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305BillingInformationType();
        if (property_exists($data, 'AAACity')) {
            $object->setAAACity($data->{'AAACity'});
        }
        if (property_exists($data, 'ActionCode')) {
            $object->setActionCode($data->{'ActionCode'});
        }
        if (property_exists($data, 'AgentSineIn')) {
            $object->setAgentSineIn($data->{'AgentSineIn'});
        }
        if (property_exists($data, 'PartitionID')) {
            $object->setPartitionID($data->{'PartitionID'});
        }
        if (property_exists($data, 'ServiceName')) {
            $object->setServiceName($data->{'ServiceName'});
        }
        if (property_exists($data, 'UserBranch')) {
            $object->setUserBranch($data->{'UserBranch'});
        }
        if (property_exists($data, 'UserSetAddress')) {
            $object->setUserSetAddress($data->{'UserSetAddress'});
        }
        if (property_exists($data, 'UserStation')) {
            $object->setUserStation($data->{'UserStation'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAAACity()) {
            $data->{'AAACity'} = $object->getAAACity();
        }
        if (null !== $object->getActionCode()) {
            $data->{'ActionCode'} = $object->getActionCode();
        }
        if (null !== $object->getAgentSineIn()) {
            $data->{'AgentSineIn'} = $object->getAgentSineIn();
        }
        if (null !== $object->getPartitionID()) {
            $data->{'PartitionID'} = $object->getPartitionID();
        }
        if (null !== $object->getServiceName()) {
            $data->{'ServiceName'} = $object->getServiceName();
        }
        if (null !== $object->getUserBranch()) {
            $data->{'UserBranch'} = $object->getUserBranch();
        }
        if (null !== $object->getUserSetAddress()) {
            $data->{'UserSetAddress'} = $object->getUserSetAddress();
        }
        if (null !== $object->getUserStation()) {
            $data->{'UserStation'} = $object->getUserStation();
        }

        return $data;
    }
}
