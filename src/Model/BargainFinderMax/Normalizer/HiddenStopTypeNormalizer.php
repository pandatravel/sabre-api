<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class HiddenStopTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\HiddenStopType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\BargainFinderMax\HiddenStopType;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\HiddenStopType();
        if (property_exists($data, 'airMiles')) {
            $object->setAirMiles($data->{'airMiles'});
        }
        if (property_exists($data, 'airport')) {
            $object->setAirport($data->{'airport'});
        }
        if (property_exists($data, 'arrivalDateAdjustment')) {
            $object->setArrivalDateAdjustment($data->{'arrivalDateAdjustment'});
        }
        if (property_exists($data, 'arrivalTime')) {
            $object->setArrivalTime($data->{'arrivalTime'});
        }
        if (property_exists($data, 'city')) {
            $object->setCity($data->{'city'});
        }
        if (property_exists($data, 'country')) {
            $object->setCountry($data->{'country'});
        }
        if (property_exists($data, 'departureDateAdjustment')) {
            $object->setDepartureDateAdjustment($data->{'departureDateAdjustment'});
        }
        if (property_exists($data, 'departureTime')) {
            $object->setDepartureTime($data->{'departureTime'});
        }
        if (property_exists($data, 'elapsedLayoverTime')) {
            $object->setElapsedLayoverTime($data->{'elapsedLayoverTime'});
        }
        if (property_exists($data, 'elapsedTime')) {
            $object->setElapsedTime($data->{'elapsedTime'});
        }
        if (property_exists($data, 'equipment')) {
            $object->setEquipment($data->{'equipment'});
        }
        if (property_exists($data, 'state')) {
            $object->setState($data->{'state'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAirMiles()) {
            $data->{'airMiles'} = $object->getAirMiles();
        }
        if (null !== $object->getAirport()) {
            $data->{'airport'} = $object->getAirport();
        }
        if (null !== $object->getArrivalDateAdjustment()) {
            $data->{'arrivalDateAdjustment'} = $object->getArrivalDateAdjustment();
        }
        if (null !== $object->getArrivalTime()) {
            $data->{'arrivalTime'} = $object->getArrivalTime();
        }
        if (null !== $object->getCity()) {
            $data->{'city'} = $object->getCity();
        }
        if (null !== $object->getCountry()) {
            $data->{'country'} = $object->getCountry();
        }
        if (null !== $object->getDepartureDateAdjustment()) {
            $data->{'departureDateAdjustment'} = $object->getDepartureDateAdjustment();
        }
        if (null !== $object->getDepartureTime()) {
            $data->{'departureTime'} = $object->getDepartureTime();
        }
        if (null !== $object->getElapsedLayoverTime()) {
            $data->{'elapsedLayoverTime'} = $object->getElapsedLayoverTime();
        }
        if (null !== $object->getElapsedTime()) {
            $data->{'elapsedTime'} = $object->getElapsedTime();
        }
        if (null !== $object->getEquipment()) {
            $data->{'equipment'} = $object->getEquipment();
        }
        if (null !== $object->getState()) {
            $data->{'state'} = $object->getState();
        }

        return $data;
    }
}
