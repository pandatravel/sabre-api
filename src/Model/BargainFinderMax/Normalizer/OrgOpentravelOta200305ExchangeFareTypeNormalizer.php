<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305ExchangeFareTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeFareType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeFareType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305ExchangeFareType();
        if (property_exists($data, 'BaseFareAmount')) {
            $object->setBaseFareAmount($data->{'BaseFareAmount'});
        }
        if (property_exists($data, 'BaseFareCurrency')) {
            $object->setBaseFareCurrency($data->{'BaseFareCurrency'});
        }
        if (property_exists($data, 'FareCalcCurrency')) {
            $object->setFareCalcCurrency($data->{'FareCalcCurrency'});
        }
        if (property_exists($data, 'NonRefundableAmount')) {
            $object->setNonRefundableAmount($data->{'NonRefundableAmount'});
        }
        if (property_exists($data, 'ROE')) {
            $object->setROE($data->{'ROE'});
        }
        if (property_exists($data, 'ValidatingCarrier')) {
            $object->setValidatingCarrier($data->{'ValidatingCarrier'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBaseFareAmount()) {
            $data->{'BaseFareAmount'} = $object->getBaseFareAmount();
        }
        if (null !== $object->getBaseFareCurrency()) {
            $data->{'BaseFareCurrency'} = $object->getBaseFareCurrency();
        }
        if (null !== $object->getFareCalcCurrency()) {
            $data->{'FareCalcCurrency'} = $object->getFareCalcCurrency();
        }
        if (null !== $object->getNonRefundableAmount()) {
            $data->{'NonRefundableAmount'} = $object->getNonRefundableAmount();
        }
        if (null !== $object->getROE()) {
            $data->{'ROE'} = $object->getROE();
        }
        if (null !== $object->getValidatingCarrier()) {
            $data->{'ValidatingCarrier'} = $object->getValidatingCarrier();
        }

        return $data;
    }
}
