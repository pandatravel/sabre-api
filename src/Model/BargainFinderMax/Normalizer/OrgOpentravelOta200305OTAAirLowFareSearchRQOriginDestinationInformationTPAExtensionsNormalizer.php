<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305OTAAirLowFareSearchRQOriginDestinationInformationTPAExtensionsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305OTAAirLowFareSearchRQOriginDestinationInformationTPAExtensions';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305OTAAirLowFareSearchRQOriginDestinationInformationTPAExtensions;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305OTAAirLowFareSearchRQOriginDestinationInformationTPAExtensions();
        if (property_exists($data, 'AlternateTime')) {
            $object->setAlternateTime($this->denormalizer->denormalize($data->{'AlternateTime'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeAlternateTime', 'json', $context));
        }
        if (property_exists($data, 'Baggage')) {
            $object->setBaggage($this->denormalizer->denormalize($data->{'Baggage'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305BaggageType', 'json', $context));
        }
        if (property_exists($data, 'BrandFilters')) {
            $object->setBrandFilters($this->denormalizer->denormalize($data->{'BrandFilters'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305BrandFiltersType', 'json', $context));
        }
        if (property_exists($data, 'CabinPref')) {
            $object->setCabinPref($this->denormalizer->denormalize($data->{'CabinPref'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305CabinPrefType', 'json', $context));
        }
        if (property_exists($data, 'ClassOfService')) {
            $values = [];
            foreach ($data->{'ClassOfService'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ClassOfServiceElemType', 'json', $context);
            }
            $object->setClassOfService($values);
        }
        if (property_exists($data, 'ConnectionTime')) {
            $object->setConnectionTime($this->denormalizer->denormalize($data->{'ConnectionTime'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeConnectionTime', 'json', $context));
        }
        if (property_exists($data, 'DateFlexibility')) {
            $values_1 = [];
            foreach ($data->{'DateFlexibility'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeDateFlexibility', 'json', $context);
            }
            $object->setDateFlexibility($values_1);
        }
        if (property_exists($data, 'DepartureDays')) {
            $object->setDepartureDays($this->denormalizer->denormalize($data->{'DepartureDays'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305DepartureDaysType', 'json', $context));
        }
        if (property_exists($data, 'FareBasis')) {
            $values_2 = [];
            foreach ($data->{'FareBasis'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FareBasisType', 'json', $context);
            }
            $object->setFareBasis($values_2);
        }
        if (property_exists($data, 'FareType')) {
            $values_3 = [];
            foreach ($data->{'FareType'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FareTypePrefType', 'json', $context);
            }
            $object->setFareType($values_3);
        }
        if (property_exists($data, 'Flight')) {
            $values_4 = [];
            foreach ($data->{'Flight'} as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305OriginDestinationFlightType', 'json', $context);
            }
            $object->setFlight($values_4);
        }
        if (property_exists($data, 'IncludeAlliancePref')) {
            $values_5 = [];
            foreach ($data->{'IncludeAlliancePref'} as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AllianceType', 'json', $context);
            }
            $object->setIncludeAlliancePref($values_5);
        }
        if (property_exists($data, 'IncludeVendorPref')) {
            $values_6 = [];
            foreach ($data->{'IncludeVendorPref'} as $value_6) {
                $values_6[] = $this->denormalizer->denormalize($value_6, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305IncludeVendorPrefType', 'json', $context);
            }
            $object->setIncludeVendorPref($values_6);
        }
        if (property_exists($data, 'MaxOneWayOptions')) {
            $object->setMaxOneWayOptions($this->denormalizer->denormalize($data->{'MaxOneWayOptions'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeMaxOneWayOptions', 'json', $context));
        }
        if (property_exists($data, 'NumOneWayOptions')) {
            $object->setNumOneWayOptions($this->denormalizer->denormalize($data->{'NumOneWayOptions'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeNumOneWayOptions', 'json', $context));
        }
        if (property_exists($data, 'PassengerPriceAdjustment')) {
            $values_7 = [];
            foreach ($data->{'PassengerPriceAdjustment'} as $value_7) {
                $values_7[] = $this->denormalizer->denormalize($value_7, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305PassengerPriceAdjustmentType', 'json', $context);
            }
            $object->setPassengerPriceAdjustment($values_7);
        }
        if (property_exists($data, 'Routing')) {
            $values_8 = [];
            foreach ($data->{'Routing'} as $value_8) {
                $values_8[] = $this->denormalizer->denormalize($value_8, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305RoutingDefinitionType', 'json', $context);
            }
            $object->setRouting($values_8);
        }
        if (property_exists($data, 'SegmentType')) {
            $object->setSegmentType($this->denormalizer->denormalize($data->{'SegmentType'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeSegmentType', 'json', $context));
        }
        if (property_exists($data, 'SisterDestinationLocation')) {
            $values_9 = [];
            foreach ($data->{'SisterDestinationLocation'} as $value_9) {
                $values_9[] = $this->denormalizer->denormalize($value_9, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305RequestSpecifiedLocationType', 'json', $context);
            }
            $object->setSisterDestinationLocation($values_9);
        }
        if (property_exists($data, 'SisterDestinationMileage')) {
            $object->setSisterDestinationMileage($this->denormalizer->denormalize($data->{'SisterDestinationMileage'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeSisterDestinationMileage', 'json', $context));
        }
        if (property_exists($data, 'SisterOriginLocation')) {
            $values_10 = [];
            foreach ($data->{'SisterOriginLocation'} as $value_10) {
                $values_10[] = $this->denormalizer->denormalize($value_10, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305RequestSpecifiedLocationType', 'json', $context);
            }
            $object->setSisterOriginLocation($values_10);
        }
        if (property_exists($data, 'SisterOriginMileage')) {
            $object->setSisterOriginMileage($this->denormalizer->denormalize($data->{'SisterOriginMileage'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeSisterOriginMileage', 'json', $context));
        }
        if (property_exists($data, 'Stopover')) {
            $object->setStopover($this->denormalizer->denormalize($data->{'Stopover'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305StopoverType', 'json', $context));
        }
        if (property_exists($data, 'TotalTravelTime')) {
            $object->setTotalTravelTime($this->denormalizer->denormalize($data->{'TotalTravelTime'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeOriginDestinationInformationTypeTotalTravelTime', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAlternateTime()) {
            $data->{'AlternateTime'} = $this->normalizer->normalize($object->getAlternateTime(), 'json', $context);
        }
        if (null !== $object->getBaggage()) {
            $data->{'Baggage'} = $this->normalizer->normalize($object->getBaggage(), 'json', $context);
        }
        if (null !== $object->getBrandFilters()) {
            $data->{'BrandFilters'} = $this->normalizer->normalize($object->getBrandFilters(), 'json', $context);
        }
        if (null !== $object->getCabinPref()) {
            $data->{'CabinPref'} = $this->normalizer->normalize($object->getCabinPref(), 'json', $context);
        }
        if (null !== $object->getClassOfService()) {
            $values = [];
            foreach ($object->getClassOfService() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'ClassOfService'} = $values;
        }
        if (null !== $object->getConnectionTime()) {
            $data->{'ConnectionTime'} = $this->normalizer->normalize($object->getConnectionTime(), 'json', $context);
        }
        if (null !== $object->getDateFlexibility()) {
            $values_1 = [];
            foreach ($object->getDateFlexibility() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'DateFlexibility'} = $values_1;
        }
        if (null !== $object->getDepartureDays()) {
            $data->{'DepartureDays'} = $this->normalizer->normalize($object->getDepartureDays(), 'json', $context);
        }
        if (null !== $object->getFareBasis()) {
            $values_2 = [];
            foreach ($object->getFareBasis() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'FareBasis'} = $values_2;
        }
        if (null !== $object->getFareType()) {
            $values_3 = [];
            foreach ($object->getFareType() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'FareType'} = $values_3;
        }
        if (null !== $object->getFlight()) {
            $values_4 = [];
            foreach ($object->getFlight() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $data->{'Flight'} = $values_4;
        }
        if (null !== $object->getIncludeAlliancePref()) {
            $values_5 = [];
            foreach ($object->getIncludeAlliancePref() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $data->{'IncludeAlliancePref'} = $values_5;
        }
        if (null !== $object->getIncludeVendorPref()) {
            $values_6 = [];
            foreach ($object->getIncludeVendorPref() as $value_6) {
                $values_6[] = $this->normalizer->normalize($value_6, 'json', $context);
            }
            $data->{'IncludeVendorPref'} = $values_6;
        }
        if (null !== $object->getMaxOneWayOptions()) {
            $data->{'MaxOneWayOptions'} = $this->normalizer->normalize($object->getMaxOneWayOptions(), 'json', $context);
        }
        if (null !== $object->getNumOneWayOptions()) {
            $data->{'NumOneWayOptions'} = $this->normalizer->normalize($object->getNumOneWayOptions(), 'json', $context);
        }
        if (null !== $object->getPassengerPriceAdjustment()) {
            $values_7 = [];
            foreach ($object->getPassengerPriceAdjustment() as $value_7) {
                $values_7[] = $this->normalizer->normalize($value_7, 'json', $context);
            }
            $data->{'PassengerPriceAdjustment'} = $values_7;
        }
        if (null !== $object->getRouting()) {
            $values_8 = [];
            foreach ($object->getRouting() as $value_8) {
                $values_8[] = $this->normalizer->normalize($value_8, 'json', $context);
            }
            $data->{'Routing'} = $values_8;
        }
        if (null !== $object->getSegmentType()) {
            $data->{'SegmentType'} = $this->normalizer->normalize($object->getSegmentType(), 'json', $context);
        }
        if (null !== $object->getSisterDestinationLocation()) {
            $values_9 = [];
            foreach ($object->getSisterDestinationLocation() as $value_9) {
                $values_9[] = $this->normalizer->normalize($value_9, 'json', $context);
            }
            $data->{'SisterDestinationLocation'} = $values_9;
        }
        if (null !== $object->getSisterDestinationMileage()) {
            $data->{'SisterDestinationMileage'} = $this->normalizer->normalize($object->getSisterDestinationMileage(), 'json', $context);
        }
        if (null !== $object->getSisterOriginLocation()) {
            $values_10 = [];
            foreach ($object->getSisterOriginLocation() as $value_10) {
                $values_10[] = $this->normalizer->normalize($value_10, 'json', $context);
            }
            $data->{'SisterOriginLocation'} = $values_10;
        }
        if (null !== $object->getSisterOriginMileage()) {
            $data->{'SisterOriginMileage'} = $this->normalizer->normalize($object->getSisterOriginMileage(), 'json', $context);
        }
        if (null !== $object->getStopover()) {
            $data->{'Stopover'} = $this->normalizer->normalize($object->getStopover(), 'json', $context);
        }
        if (null !== $object->getTotalTravelTime()) {
            $data->{'TotalTravelTime'} = $this->normalizer->normalize($object->getTotalTravelTime(), 'json', $context);
        }

        return $data;
    }
}
