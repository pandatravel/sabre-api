<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class FareComponentBreakdownTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\FareComponentBreakdownType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\FareComponentBreakdownType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\FareComponentBreakdownType();
        if (property_exists($data, 'contractFamilyId')) {
            $object->setContractFamilyId($data->{'contractFamilyId'});
        }
        if (property_exists($data, 'contractId')) {
            $object->setContractId($data->{'contractId'});
        }
        if (property_exists($data, 'earnedFareComponentCommission')) {
            $object->setEarnedFareComponentCommission($data->{'earnedFareComponentCommission'});
        }
        if (property_exists($data, 'fareComponentCommission')) {
            $object->setFareComponentCommission($data->{'fareComponentCommission'});
        }
        if (property_exists($data, 'fareComponentReferenceId')) {
            $object->setFareComponentReferenceId($data->{'fareComponentReferenceId'});
        }
        if (property_exists($data, 'methodId')) {
            $object->setMethodId($data->{'methodId'});
        }
        if (property_exists($data, 'ruleFamilyId')) {
            $object->setRuleFamilyId($data->{'ruleFamilyId'});
        }
        if (property_exists($data, 'ruleId')) {
            $object->setRuleId($data->{'ruleId'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getContractFamilyId()) {
            $data->{'contractFamilyId'} = $object->getContractFamilyId();
        }
        if (null !== $object->getContractId()) {
            $data->{'contractId'} = $object->getContractId();
        }
        if (null !== $object->getEarnedFareComponentCommission()) {
            $data->{'earnedFareComponentCommission'} = $object->getEarnedFareComponentCommission();
        }
        if (null !== $object->getFareComponentCommission()) {
            $data->{'fareComponentCommission'} = $object->getFareComponentCommission();
        }
        if (null !== $object->getFareComponentReferenceId()) {
            $data->{'fareComponentReferenceId'} = $object->getFareComponentReferenceId();
        }
        if (null !== $object->getMethodId()) {
            $data->{'methodId'} = $object->getMethodId();
        }
        if (null !== $object->getRuleFamilyId()) {
            $data->{'ruleFamilyId'} = $object->getRuleFamilyId();
        }
        if (null !== $object->getRuleId()) {
            $data->{'ruleId'} = $object->getRuleId();
        }

        return $data;
    }
}
