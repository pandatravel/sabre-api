<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305TransactionTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305TransactionType();
        if (property_exists($data, 'ATSETest')) {
            $object->setATSETest($this->denormalizer->denormalize($data->{'ATSETest'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeATSETest', 'json', $context));
        }
        if (property_exists($data, 'AirStreaming')) {
            $object->setAirStreaming($this->denormalizer->denormalize($data->{'AirStreaming'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeAirStreaming', 'json', $context));
        }
        if (property_exists($data, 'AvailableLevel')) {
            $object->setAvailableLevel($this->denormalizer->denormalize($data->{'AvailableLevel'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeAvailableLevel', 'json', $context));
        }
        if (property_exists($data, 'Branch')) {
            $object->setBranch($this->denormalizer->denormalize($data->{'Branch'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeBranch', 'json', $context));
        }
        if (property_exists($data, 'ChunkNumber')) {
            $object->setChunkNumber($data->{'ChunkNumber'});
        }
        if (property_exists($data, 'ClientSessionID')) {
            $object->setClientSessionID($this->denormalizer->denormalize($data->{'ClientSessionID'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeClientSessionID', 'json', $context));
        }
        if (property_exists($data, 'CompressResponse')) {
            $object->setCompressResponse($this->denormalizer->denormalize($data->{'CompressResponse'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeCompressResponse', 'json', $context));
        }
        if (property_exists($data, 'ConfigSet')) {
            $object->setConfigSet($data->{'ConfigSet'});
        }
        if (property_exists($data, 'Debug')) {
            $object->setDebug($data->{'Debug'});
        }
        if (property_exists($data, 'DebugKey')) {
            $object->setDebugKey($data->{'DebugKey'});
        }
        if (property_exists($data, 'Diagnostics')) {
            $object->setDiagnostics($this->denormalizer->denormalize($data->{'Diagnostics'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeDiagnostics', 'json', $context));
        }
        if (property_exists($data, 'DisableCache')) {
            $object->setDisableCache($data->{'DisableCache'});
        }
        if (property_exists($data, 'FareOverrides')) {
            $object->setFareOverrides($this->denormalizer->denormalize($data->{'FareOverrides'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeFareOverrides', 'json', $context));
        }
        if (property_exists($data, 'PurchaseType')) {
            $object->setPurchaseType($this->denormalizer->denormalize($data->{'PurchaseType'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypePurchaseType', 'json', $context));
        }
        if (property_exists($data, 'RequestType')) {
            $object->setRequestType($this->denormalizer->denormalize($data->{'RequestType'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeRequestType', 'json', $context));
        }
        if (property_exists($data, 'ResponseSorting')) {
            $object->setResponseSorting($this->denormalizer->denormalize($data->{'ResponseSorting'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeResponseSorting', 'json', $context));
        }
        if (property_exists($data, 'SabreAth')) {
            $object->setSabreAth($this->denormalizer->denormalize($data->{'SabreAth'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeSabreAth', 'json', $context));
        }
        if (property_exists($data, 'SeatStatusSim')) {
            $object->setSeatStatusSim($this->denormalizer->denormalize($data->{'SeatStatusSim'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305SeatStatusSimType', 'json', $context));
        }
        if (property_exists($data, 'ServiceTag')) {
            $object->setServiceTag($this->denormalizer->denormalize($data->{'ServiceTag'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeServiceTag', 'json', $context));
        }
        if (property_exists($data, 'ShowItinSource')) {
            $object->setShowItinSource($data->{'ShowItinSource'});
        }
        if (property_exists($data, 'SubagentData')) {
            $object->setSubagentData($this->denormalizer->denormalize($data->{'SubagentData'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeSubagentData', 'json', $context));
        }
        if (property_exists($data, 'TranID')) {
            $object->setTranID($this->denormalizer->denormalize($data->{'TranID'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeTranID', 'json', $context));
        }
        if (property_exists($data, 'TravelerPersona')) {
            $object->setTravelerPersona($this->denormalizer->denormalize($data->{'TravelerPersona'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TransactionTypeTravelerPersona', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getATSETest()) {
            $data->{'ATSETest'} = $this->normalizer->normalize($object->getATSETest(), 'json', $context);
        }
        if (null !== $object->getAirStreaming()) {
            $data->{'AirStreaming'} = $this->normalizer->normalize($object->getAirStreaming(), 'json', $context);
        }
        if (null !== $object->getAvailableLevel()) {
            $data->{'AvailableLevel'} = $this->normalizer->normalize($object->getAvailableLevel(), 'json', $context);
        }
        if (null !== $object->getBranch()) {
            $data->{'Branch'} = $this->normalizer->normalize($object->getBranch(), 'json', $context);
        }
        if (null !== $object->getChunkNumber()) {
            $data->{'ChunkNumber'} = $object->getChunkNumber();
        }
        if (null !== $object->getClientSessionID()) {
            $data->{'ClientSessionID'} = $this->normalizer->normalize($object->getClientSessionID(), 'json', $context);
        }
        if (null !== $object->getCompressResponse()) {
            $data->{'CompressResponse'} = $this->normalizer->normalize($object->getCompressResponse(), 'json', $context);
        }
        if (null !== $object->getConfigSet()) {
            $data->{'ConfigSet'} = $object->getConfigSet();
        }
        if (null !== $object->getDebug()) {
            $data->{'Debug'} = $object->getDebug();
        }
        if (null !== $object->getDebugKey()) {
            $data->{'DebugKey'} = $object->getDebugKey();
        }
        if (null !== $object->getDiagnostics()) {
            $data->{'Diagnostics'} = $this->normalizer->normalize($object->getDiagnostics(), 'json', $context);
        }
        if (null !== $object->getDisableCache()) {
            $data->{'DisableCache'} = $object->getDisableCache();
        }
        if (null !== $object->getFareOverrides()) {
            $data->{'FareOverrides'} = $this->normalizer->normalize($object->getFareOverrides(), 'json', $context);
        }
        if (null !== $object->getPurchaseType()) {
            $data->{'PurchaseType'} = $this->normalizer->normalize($object->getPurchaseType(), 'json', $context);
        }
        if (null !== $object->getRequestType()) {
            $data->{'RequestType'} = $this->normalizer->normalize($object->getRequestType(), 'json', $context);
        }
        if (null !== $object->getResponseSorting()) {
            $data->{'ResponseSorting'} = $this->normalizer->normalize($object->getResponseSorting(), 'json', $context);
        }
        if (null !== $object->getSabreAth()) {
            $data->{'SabreAth'} = $this->normalizer->normalize($object->getSabreAth(), 'json', $context);
        }
        if (null !== $object->getSeatStatusSim()) {
            $data->{'SeatStatusSim'} = $this->normalizer->normalize($object->getSeatStatusSim(), 'json', $context);
        }
        if (null !== $object->getServiceTag()) {
            $data->{'ServiceTag'} = $this->normalizer->normalize($object->getServiceTag(), 'json', $context);
        }
        if (null !== $object->getShowItinSource()) {
            $data->{'ShowItinSource'} = $object->getShowItinSource();
        }
        if (null !== $object->getSubagentData()) {
            $data->{'SubagentData'} = $this->normalizer->normalize($object->getSubagentData(), 'json', $context);
        }
        if (null !== $object->getTranID()) {
            $data->{'TranID'} = $this->normalizer->normalize($object->getTranID(), 'json', $context);
        }
        if (null !== $object->getTravelerPersona()) {
            $data->{'TravelerPersona'} = $this->normalizer->normalize($object->getTravelerPersona(), 'json', $context);
        }

        return $data;
    }
}
