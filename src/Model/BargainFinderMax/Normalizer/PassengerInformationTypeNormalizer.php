<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PassengerInformationTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\PassengerInformationType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\PassengerInformationType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\PassengerInformationType();
        if (property_exists($data, 'baggageInformation') && $data->{'baggageInformation'} !== null) {
            $values = [];
            foreach ($data->{'baggageInformation'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\BaggageInformationType', 'json', $context);
            }
            $object->setBaggageInformation($values);
        }
        if (property_exists($data, 'currencyConversion') && $data->{'currencyConversion'} !== null) {
            $object->setCurrencyConversion($this->denormalizer->denormalize($data->{'currencyConversion'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\CurrencyConversionType', 'json', $context));
        }
        if (property_exists($data, 'divide') && $data->{'divide'} !== null) {
            $object->setDivide($data->{'divide'});
        }
        if (property_exists($data, 'fareComponents') && $data->{'fareComponents'} !== null) {
            $values_1 = [];
            foreach ($data->{'fareComponents'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\FareComponentIDType', 'json', $context);
            }
            $object->setFareComponents($values_1);
        }
        if (property_exists($data, 'fareMessages') && $data->{'fareMessages'} !== null) {
            $values_2 = [];
            foreach ($data->{'fareMessages'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\FareMessageType', 'json', $context);
            }
            $object->setFareMessages($values_2);
        }
        if (property_exists($data, 'legs') && $data->{'legs'} !== null) {
            $values_3 = [];
            foreach ($data->{'legs'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\PricingLegType', 'json', $context);
            }
            $object->setLegs($values_3);
        }
        if (property_exists($data, 'nonRefundable') && $data->{'nonRefundable'} !== null) {
            $object->setNonRefundable($data->{'nonRefundable'});
        }
        if (property_exists($data, 'obFees') && $data->{'obFees'} !== null) {
            $values_4 = [];
            foreach ($data->{'obFees'} as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OBFeeIDType', 'json', $context);
            }
            $object->setObFees($values_4);
        }
        if (property_exists($data, 'passengerNumber') && $data->{'passengerNumber'} !== null) {
            $object->setPassengerNumber($data->{'passengerNumber'});
        }
        if (property_exists($data, 'passengerTotalFare') && $data->{'passengerTotalFare'} !== null) {
            $object->setPassengerTotalFare($this->denormalizer->denormalize($data->{'passengerTotalFare'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\PassengerTotalFareType', 'json', $context));
        }
        if (property_exists($data, 'passengerType') && $data->{'passengerType'} !== null) {
            $object->setPassengerType($data->{'passengerType'});
        }
        if (property_exists($data, 'penaltiesInfo') && $data->{'penaltiesInfo'} !== null) {
            $object->setPenaltiesInfo($this->denormalizer->denormalize($data->{'penaltiesInfo'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\PenaltiesType', 'json', $context));
        }
        if (property_exists($data, 'plusUps') && $data->{'plusUps'} !== null) {
            $values_5 = [];
            foreach ($data->{'plusUps'} as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\PlusUpInformationType', 'json', $context);
            }
            $object->setPlusUps($values_5);
        }
        if (property_exists($data, 'reissue') && $data->{'reissue'} !== null) {
            $object->setReissue($this->denormalizer->denormalize($data->{'reissue'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\ReissueType', 'json', $context));
        }
        if (property_exists($data, 'sellingFareData') && $data->{'sellingFareData'} !== null) {
            $values_6 = [];
            foreach ($data->{'sellingFareData'} as $value_6) {
                $values_6[] = $this->denormalizer->denormalize($value_6, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\SellingFareDataType', 'json', $context);
            }
            $object->setSellingFareData($values_6);
        }
        if (property_exists($data, 'stopover') && $data->{'stopover'} !== null) {
            $object->setStopover($data->{'stopover'});
        }
        if (property_exists($data, 'taxSummaries') && $data->{'taxSummaries'} !== null) {
            $values_7 = [];
            foreach ($data->{'taxSummaries'} as $value_7) {
                $values_7[] = $this->denormalizer->denormalize($value_7, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\TaxSummaryIDType', 'json', $context);
            }
            $object->setTaxSummaries($values_7);
        }
        if (property_exists($data, 'taxes') && $data->{'taxes'} !== null) {
            $values_8 = [];
            foreach ($data->{'taxes'} as $value_8) {
                $values_8[] = $this->denormalizer->denormalize($value_8, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\TaxIDType', 'json', $context);
            }
            $object->setTaxes($values_8);
        }
        if (property_exists($data, 'total') && $data->{'total'} !== null) {
            $object->setTotal($data->{'total'});
        }
        if (property_exists($data, 'validatingCarrierCommissionInfo') && $data->{'validatingCarrierCommissionInfo'} !== null) {
            $values_9 = [];
            foreach ($data->{'validatingCarrierCommissionInfo'} as $value_9) {
                $values_9[] = $this->denormalizer->denormalize($value_9, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\ValidatingCarrierCommissionInfoType', 'json', $context);
            }
            $object->setValidatingCarrierCommissionInfo($values_9);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBaggageInformation()) {
            $values = [];
            foreach ($object->getBaggageInformation() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'baggageInformation'} = $values;
        }
        if (null !== $object->getCurrencyConversion()) {
            $data->{'currencyConversion'} = $this->normalizer->normalize($object->getCurrencyConversion(), 'json', $context);
        }
        if (null !== $object->getDivide()) {
            $data->{'divide'} = $object->getDivide();
        }
        if (null !== $object->getFareComponents()) {
            $values_1 = [];
            foreach ($object->getFareComponents() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'fareComponents'} = $values_1;
        }
        if (null !== $object->getFareMessages()) {
            $values_2 = [];
            foreach ($object->getFareMessages() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'fareMessages'} = $values_2;
        }
        if (null !== $object->getLegs()) {
            $values_3 = [];
            foreach ($object->getLegs() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'legs'} = $values_3;
        }
        if (null !== $object->getNonRefundable()) {
            $data->{'nonRefundable'} = $object->getNonRefundable();
        }
        if (null !== $object->getObFees()) {
            $values_4 = [];
            foreach ($object->getObFees() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $data->{'obFees'} = $values_4;
        }
        if (null !== $object->getPassengerNumber()) {
            $data->{'passengerNumber'} = $object->getPassengerNumber();
        }
        if (null !== $object->getPassengerTotalFare()) {
            $data->{'passengerTotalFare'} = $this->normalizer->normalize($object->getPassengerTotalFare(), 'json', $context);
        }
        if (null !== $object->getPassengerType()) {
            $data->{'passengerType'} = $object->getPassengerType();
        }
        if (null !== $object->getPenaltiesInfo()) {
            $data->{'penaltiesInfo'} = $this->normalizer->normalize($object->getPenaltiesInfo(), 'json', $context);
        }
        if (null !== $object->getPlusUps()) {
            $values_5 = [];
            foreach ($object->getPlusUps() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $data->{'plusUps'} = $values_5;
        }
        if (null !== $object->getReissue()) {
            $data->{'reissue'} = $this->normalizer->normalize($object->getReissue(), 'json', $context);
        }
        if (null !== $object->getSellingFareData()) {
            $values_6 = [];
            foreach ($object->getSellingFareData() as $value_6) {
                $values_6[] = $this->normalizer->normalize($value_6, 'json', $context);
            }
            $data->{'sellingFareData'} = $values_6;
        }
        if (null !== $object->getStopover()) {
            $data->{'stopover'} = $object->getStopover();
        }
        if (null !== $object->getTaxSummaries()) {
            $values_7 = [];
            foreach ($object->getTaxSummaries() as $value_7) {
                $values_7[] = $this->normalizer->normalize($value_7, 'json', $context);
            }
            $data->{'taxSummaries'} = $values_7;
        }
        if (null !== $object->getTaxes()) {
            $values_8 = [];
            foreach ($object->getTaxes() as $value_8) {
                $values_8[] = $this->normalizer->normalize($value_8, 'json', $context);
            }
            $data->{'taxes'} = $values_8;
        }
        if (null !== $object->getTotal()) {
            $data->{'total'} = $object->getTotal();
        }
        if (null !== $object->getValidatingCarrierCommissionInfo()) {
            $values_9 = [];
            foreach ($object->getValidatingCarrierCommissionInfo() as $value_9) {
                $values_9[] = $this->normalizer->normalize($value_9, 'json', $context);
            }
            $data->{'validatingCarrierCommissionInfo'} = $values_9;
        }

        return $data;
    }
}
