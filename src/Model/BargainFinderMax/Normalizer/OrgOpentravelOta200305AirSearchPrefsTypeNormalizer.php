<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305AirSearchPrefsTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305AirSearchPrefsType;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305AirSearchPrefsType();
        if (property_exists($data, 'AllFlightsData')) {
            $object->setAllFlightsData($data->{'AllFlightsData'});
        }
        if (property_exists($data, 'AncillaryFees')) {
            $object->setAncillaryFees($this->denormalizer->denormalize($data->{'AncillaryFees'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeAncillaryFees', 'json', $context));
        }
        if (property_exists($data, 'Baggage')) {
            $object->setBaggage($this->denormalizer->denormalize($data->{'Baggage'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeBaggage', 'json', $context));
        }
        if (property_exists($data, 'CabinPref')) {
            $values = [];
            foreach ($data->{'CabinPref'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305CabinPrefType', 'json', $context);
            }
            $object->setCabinPref($values);
        }
        if (property_exists($data, 'CommissionCodeQualifiers')) {
            $object->setCommissionCodeQualifiers($this->denormalizer->denormalize($data->{'CommissionCodeQualifiers'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeCommissionCodeQualifiers', 'json', $context));
        }
        if (property_exists($data, 'ETicketDesired')) {
            $object->setETicketDesired($data->{'ETicketDesired'});
        }
        if (property_exists($data, 'EquipPref')) {
            $values_1 = [];
            foreach ($data->{'EquipPref'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305EquipmentTypePref', 'json', $context);
            }
            $object->setEquipPref($values_1);
        }
        if (property_exists($data, 'FareRestrictPref')) {
            $values_2 = [];
            foreach ($data->{'FareRestrictPref'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeFareRestrictPref', 'json', $context);
            }
            $object->setFareRestrictPref($values_2);
        }
        if (property_exists($data, 'FlightTypePref')) {
            $object->setFlightTypePref($this->denormalizer->denormalize($data->{'FlightTypePref'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlightTypePrefType', 'json', $context));
        }
        if (property_exists($data, 'FrequentFlyer')) {
            $values_3 = [];
            foreach ($data->{'FrequentFlyer'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeFrequentFlyer', 'json', $context);
            }
            $object->setFrequentFlyer($values_3);
        }
        if (property_exists($data, 'Hybrid')) {
            $object->setHybrid($data->{'Hybrid'});
        }
        if (property_exists($data, 'InterlineBrands')) {
            $object->setInterlineBrands($this->denormalizer->denormalize($data->{'InterlineBrands'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305InterlineBrandsType', 'json', $context));
        }
        if (property_exists($data, 'LookForAlternatives')) {
            $object->setLookForAlternatives($data->{'LookForAlternatives'});
        }
        if (property_exists($data, 'MaxStopsQuantity')) {
            $object->setMaxStopsQuantity($data->{'MaxStopsQuantity'});
        }
        if (property_exists($data, 'OnTimeRate')) {
            $object->setOnTimeRate($data->{'OnTimeRate'});
        }
        if (property_exists($data, 'SmokingAllowed')) {
            $object->setSmokingAllowed($data->{'SmokingAllowed'});
        }
        if (property_exists($data, 'SpanishFamilyDiscount')) {
            $object->setSpanishFamilyDiscount($this->denormalizer->denormalize($data->{'SpanishFamilyDiscount'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeSpanishFamilyDiscount', 'json', $context));
        }
        if (property_exists($data, 'TPA_Extensions')) {
            $object->setTPAExtensions($this->denormalizer->denormalize($data->{'TPA_Extensions'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensions', 'json', $context));
        }
        if (property_exists($data, 'TicketDistribPref')) {
            $values_4 = [];
            foreach ($data->{'TicketDistribPref'} as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TicketDistribPrefType', 'json', $context);
            }
            $object->setTicketDistribPref($values_4);
        }
        if (property_exists($data, 'UseAllFlights')) {
            $object->setUseAllFlights($data->{'UseAllFlights'});
        }
        if (property_exists($data, 'ValidInterlineTicket')) {
            $object->setValidInterlineTicket($data->{'ValidInterlineTicket'});
        }
        if (property_exists($data, 'VendorPref')) {
            $values_5 = [];
            foreach ($data->{'VendorPref'} as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305CompanyNamePrefType', 'json', $context);
            }
            $object->setVendorPref($values_5);
        }
        if (property_exists($data, 'VendorPrefApplicability')) {
            $values_6 = [];
            foreach ($data->{'VendorPrefApplicability'} as $value_6) {
                $values_6[] = $this->denormalizer->denormalize($value_6, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305VendorPrefApplicabilityType', 'json', $context);
            }
            $object->setVendorPrefApplicability($values_6);
        }
        if (property_exists($data, 'VendorPrefPairing')) {
            $values_7 = [];
            foreach ($data->{'VendorPrefPairing'} as $value_7) {
                $values_7[] = $this->denormalizer->denormalize($value_7, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305VendorPrefPairingType', 'json', $context);
            }
            $object->setVendorPrefPairing($values_7);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAllFlightsData()) {
            $data->{'AllFlightsData'} = $object->getAllFlightsData();
        }
        if (null !== $object->getAncillaryFees()) {
            $data->{'AncillaryFees'} = $this->normalizer->normalize($object->getAncillaryFees(), 'json', $context);
        }
        if (null !== $object->getBaggage()) {
            $data->{'Baggage'} = $this->normalizer->normalize($object->getBaggage(), 'json', $context);
        }
        if (null !== $object->getCabinPref()) {
            $values = [];
            foreach ($object->getCabinPref() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'CabinPref'} = $values;
        }
        if (null !== $object->getCommissionCodeQualifiers()) {
            $data->{'CommissionCodeQualifiers'} = $this->normalizer->normalize($object->getCommissionCodeQualifiers(), 'json', $context);
        }
        if (null !== $object->getETicketDesired()) {
            $data->{'ETicketDesired'} = $object->getETicketDesired();
        }
        if (null !== $object->getEquipPref()) {
            $values_1 = [];
            foreach ($object->getEquipPref() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'EquipPref'} = $values_1;
        }
        if (null !== $object->getFareRestrictPref()) {
            $values_2 = [];
            foreach ($object->getFareRestrictPref() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'FareRestrictPref'} = $values_2;
        }
        if (null !== $object->getFlightTypePref()) {
            $data->{'FlightTypePref'} = $this->normalizer->normalize($object->getFlightTypePref(), 'json', $context);
        }
        if (null !== $object->getFrequentFlyer()) {
            $values_3 = [];
            foreach ($object->getFrequentFlyer() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'FrequentFlyer'} = $values_3;
        }
        if (null !== $object->getHybrid()) {
            $data->{'Hybrid'} = $object->getHybrid();
        }
        if (null !== $object->getInterlineBrands()) {
            $data->{'InterlineBrands'} = $this->normalizer->normalize($object->getInterlineBrands(), 'json', $context);
        }
        if (null !== $object->getLookForAlternatives()) {
            $data->{'LookForAlternatives'} = $object->getLookForAlternatives();
        }
        if (null !== $object->getMaxStopsQuantity()) {
            $data->{'MaxStopsQuantity'} = $object->getMaxStopsQuantity();
        }
        if (null !== $object->getOnTimeRate()) {
            $data->{'OnTimeRate'} = $object->getOnTimeRate();
        }
        if (null !== $object->getSmokingAllowed()) {
            $data->{'SmokingAllowed'} = $object->getSmokingAllowed();
        }
        if (null !== $object->getSpanishFamilyDiscount()) {
            $data->{'SpanishFamilyDiscount'} = $this->normalizer->normalize($object->getSpanishFamilyDiscount(), 'json', $context);
        }
        if (null !== $object->getTPAExtensions()) {
            $data->{'TPA_Extensions'} = $this->normalizer->normalize($object->getTPAExtensions(), 'json', $context);
        }
        if (null !== $object->getTicketDistribPref()) {
            $values_4 = [];
            foreach ($object->getTicketDistribPref() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $data->{'TicketDistribPref'} = $values_4;
        }
        if (null !== $object->getUseAllFlights()) {
            $data->{'UseAllFlights'} = $object->getUseAllFlights();
        }
        if (null !== $object->getValidInterlineTicket()) {
            $data->{'ValidInterlineTicket'} = $object->getValidInterlineTicket();
        }
        if (null !== $object->getVendorPref()) {
            $values_5 = [];
            foreach ($object->getVendorPref() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $data->{'VendorPref'} = $values_5;
        }
        if (null !== $object->getVendorPrefApplicability()) {
            $values_6 = [];
            foreach ($object->getVendorPrefApplicability() as $value_6) {
                $values_6[] = $this->normalizer->normalize($value_6, 'json', $context);
            }
            $data->{'VendorPrefApplicability'} = $values_6;
        }
        if (null !== $object->getVendorPrefPairing()) {
            $values_7 = [];
            foreach ($object->getVendorPrefPairing() as $value_7) {
                $values_7[] = $this->normalizer->normalize($value_7, 'json', $context);
            }
            $data->{'VendorPrefPairing'} = $values_7;
        }

        return $data;
    }
}
