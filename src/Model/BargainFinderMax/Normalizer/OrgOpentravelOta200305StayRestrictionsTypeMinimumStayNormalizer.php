<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305StayRestrictionsTypeMinimumStayNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305StayRestrictionsTypeMinimumStay';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305StayRestrictionsTypeMinimumStay;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305StayRestrictionsTypeMinimumStay();
        if (property_exists($data, 'MinStay')) {
            $object->setMinStay($data->{'MinStay'});
        }
        if (property_exists($data, 'MinStayDate')) {
            $object->setMinStayDate($data->{'MinStayDate'});
        }
        if (property_exists($data, 'ReturnTimeOfDay')) {
            $object->setReturnTimeOfDay($data->{'ReturnTimeOfDay'});
        }
        if (property_exists($data, 'StayUnit')) {
            $object->setStayUnit($data->{'StayUnit'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getMinStay()) {
            $data->{'MinStay'} = $object->getMinStay();
        }
        if (null !== $object->getMinStayDate()) {
            $data->{'MinStayDate'} = $object->getMinStayDate();
        }
        if (null !== $object->getReturnTimeOfDay()) {
            $data->{'ReturnTimeOfDay'} = $object->getReturnTimeOfDay();
        }
        if (null !== $object->getStayUnit()) {
            $data->{'StayUnit'} = $object->getStayUnit();
        }

        return $data;
    }
}
