<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ValidatingCarrierCommissionInfoTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\ValidatingCarrierCommissionInfoType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\ValidatingCarrierCommissionInfoType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\ValidatingCarrierCommissionInfoType();
        if (property_exists($data, 'commissionAmount')) {
            $object->setCommissionAmount($data->{'commissionAmount'});
        }
        if (property_exists($data, 'commissionContractQualifier')) {
            $object->setCommissionContractQualifier($data->{'commissionContractQualifier'});
        }
        if (property_exists($data, 'commissionPercent')) {
            $object->setCommissionPercent($data->{'commissionPercent'});
        }
        if (property_exists($data, 'earnedCommissionAmount')) {
            $object->setEarnedCommissionAmount($data->{'earnedCommissionAmount'});
        }
        if (property_exists($data, 'fareComponentBreakdowns')) {
            $values = [];
            foreach ($data->{'fareComponentBreakdowns'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\FareComponentBreakdownType', 'json', $context);
            }
            $object->setFareComponentBreakdowns($values);
        }
        if (property_exists($data, 'sourcePcc')) {
            $object->setSourcePcc($data->{'sourcePcc'});
        }
        if (property_exists($data, 'totalAmountIncludingMarkUp')) {
            $object->setTotalAmountIncludingMarkUp($data->{'totalAmountIncludingMarkUp'});
        }
        if (property_exists($data, 'validatingCarrier')) {
            $object->setValidatingCarrier($data->{'validatingCarrier'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getCommissionAmount()) {
            $data->{'commissionAmount'} = $object->getCommissionAmount();
        }
        if (null !== $object->getCommissionContractQualifier()) {
            $data->{'commissionContractQualifier'} = $object->getCommissionContractQualifier();
        }
        if (null !== $object->getCommissionPercent()) {
            $data->{'commissionPercent'} = $object->getCommissionPercent();
        }
        if (null !== $object->getEarnedCommissionAmount()) {
            $data->{'earnedCommissionAmount'} = $object->getEarnedCommissionAmount();
        }
        if (null !== $object->getFareComponentBreakdowns()) {
            $values = [];
            foreach ($object->getFareComponentBreakdowns() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'fareComponentBreakdowns'} = $values;
        }
        if (null !== $object->getSourcePcc()) {
            $data->{'sourcePcc'} = $object->getSourcePcc();
        }
        if (null !== $object->getTotalAmountIncludingMarkUp()) {
            $data->{'totalAmountIncludingMarkUp'} = $object->getTotalAmountIncludingMarkUp();
        }
        if (null !== $object->getValidatingCarrier()) {
            $data->{'validatingCarrier'} = $object->getValidatingCarrier();
        }

        return $data;
    }
}
