<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305FareOptionalDetailsTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FareOptionalDetailsType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305FareOptionalDetailsType;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305FareOptionalDetailsType();
        if (property_exists($data, 'Amount')) {
            $object->setAmount($data->{'Amount'});
        }
        if (property_exists($data, 'BasisCode')) {
            $object->setBasisCode($data->{'BasisCode'});
        }
        if (property_exists($data, 'BrandID')) {
            $object->setBrandID($data->{'BrandID'});
        }
        if (property_exists($data, 'ComponentNo')) {
            $object->setComponentNo($data->{'ComponentNo'});
        }
        if (property_exists($data, 'ProgramID')) {
            $object->setProgramID($data->{'ProgramID'});
        }
        if (property_exists($data, 'RuleNumber')) {
            $object->setRuleNumber($data->{'RuleNumber'});
        }
        if (property_exists($data, 'SourceVendor')) {
            $object->setSourceVendor($data->{'SourceVendor'});
        }
        if (property_exists($data, 'Tariff')) {
            $object->setTariff($data->{'Tariff'});
        }
        if (property_exists($data, 'Vendor')) {
            $object->setVendor($data->{'Vendor'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAmount()) {
            $data->{'Amount'} = $object->getAmount();
        }
        if (null !== $object->getBasisCode()) {
            $data->{'BasisCode'} = $object->getBasisCode();
        }
        if (null !== $object->getBrandID()) {
            $data->{'BrandID'} = $object->getBrandID();
        }
        if (null !== $object->getComponentNo()) {
            $data->{'ComponentNo'} = $object->getComponentNo();
        }
        if (null !== $object->getProgramID()) {
            $data->{'ProgramID'} = $object->getProgramID();
        }
        if (null !== $object->getRuleNumber()) {
            $data->{'RuleNumber'} = $object->getRuleNumber();
        }
        if (null !== $object->getSourceVendor()) {
            $data->{'SourceVendor'} = $object->getSourceVendor();
        }
        if (null !== $object->getTariff()) {
            $data->{'Tariff'} = $object->getTariff();
        }
        if (null !== $object->getVendor()) {
            $data->{'Vendor'} = $object->getVendor();
        }

        return $data;
    }
}
