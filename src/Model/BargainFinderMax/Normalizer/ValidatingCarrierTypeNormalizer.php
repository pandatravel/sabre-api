<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ValidatingCarrierTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\ValidatingCarrierType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\ValidatingCarrierType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\ValidatingCarrierType();
        if (property_exists($data, 'alternates') && $data->{'alternates'} !== null) {
            $values = [];
            foreach ($data->{'alternates'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\ValidatingCarrier', 'json', $context);
            }
            $object->setAlternates($values);
        }
        if (property_exists($data, 'country') && $data->{'country'} !== null) {
            $object->setCountry($data->{'country'});
        }
        if (property_exists($data, 'default') && $data->{'default'} !== null) {
            $object->setDefault($this->denormalizer->denormalize($data->{'default'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\ValidatingCarrier', 'json', $context));
        }
        if (property_exists($data, 'id') && $data->{'id'} !== null) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'newVcxProcess') && $data->{'newVcxProcess'} !== null) {
            $object->setNewVcxProcess($data->{'newVcxProcess'});
        }
        if (property_exists($data, 'otherTicketings') && $data->{'otherTicketings'} !== null) {
            $values_1 = [];
            foreach ($data->{'otherTicketings'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\ValidatingCarrier', 'json', $context);
            }
            $object->setOtherTicketings($values_1);
        }
        if (property_exists($data, 'settlementMethod') && $data->{'settlementMethod'} !== null) {
            $object->setSettlementMethod($data->{'settlementMethod'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAlternates()) {
            $values = [];
            foreach ($object->getAlternates() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'alternates'} = $values;
        }
        if (null !== $object->getCountry()) {
            $data->{'country'} = $object->getCountry();
        }
        if (null !== $object->getDefault()) {
            $data->{'default'} = $this->normalizer->normalize($object->getDefault(), 'json', $context);
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getNewVcxProcess()) {
            $data->{'newVcxProcess'} = $object->getNewVcxProcess();
        }
        if (null !== $object->getOtherTicketings()) {
            $values_1 = [];
            foreach ($object->getOtherTicketings() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'otherTicketings'} = $values_1;
        }
        if (null !== $object->getSettlementMethod()) {
            $data->{'settlementMethod'} = $object->getSettlementMethod();
        }

        return $data;
    }
}
