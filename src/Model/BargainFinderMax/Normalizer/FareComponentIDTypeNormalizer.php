<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class FareComponentIDTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\FareComponentIDType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\FareComponentIDType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\FareComponentIDType();
        if (property_exists($data, 'brandFeatures') && $data->{'brandFeatures'} !== null) {
            $values = [];
            foreach ($data->{'brandFeatures'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\BrandFeatureIDType', 'json', $context);
            }
            $object->setBrandFeatures($values);
        }
        if (property_exists($data, 'effectivePriceDeviation') && $data->{'effectivePriceDeviation'} !== null) {
            $object->setEffectivePriceDeviation($data->{'effectivePriceDeviation'});
        }
        if (property_exists($data, 'ref') && $data->{'ref'} !== null) {
            $object->setRef($data->{'ref'});
        }
        if (property_exists($data, 'segments') && $data->{'segments'} !== null) {
            $values_1 = [];
            foreach ($data->{'segments'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\FareComponentSegmentsType', 'json', $context);
            }
            $object->setSegments($values_1);
        }
        if (property_exists($data, 'taxSummaries') && $data->{'taxSummaries'} !== null) {
            $values_2 = [];
            foreach ($data->{'taxSummaries'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\TaxSummaryIDType', 'json', $context);
            }
            $object->setTaxSummaries($values_2);
        }
        if (property_exists($data, 'taxes') && $data->{'taxes'} !== null) {
            $values_3 = [];
            foreach ($data->{'taxes'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\TaxIDType', 'json', $context);
            }
            $object->setTaxes($values_3);
        }
        if (property_exists($data, 'totalFare') && $data->{'totalFare'} !== null) {
            $object->setTotalFare($this->denormalizer->denormalize($data->{'totalFare'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\TotalFareType', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBrandFeatures()) {
            $values = [];
            foreach ($object->getBrandFeatures() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'brandFeatures'} = $values;
        }
        if (null !== $object->getEffectivePriceDeviation()) {
            $data->{'effectivePriceDeviation'} = $object->getEffectivePriceDeviation();
        }
        if (null !== $object->getRef()) {
            $data->{'ref'} = $object->getRef();
        }
        if (null !== $object->getSegments()) {
            $values_1 = [];
            foreach ($object->getSegments() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'segments'} = $values_1;
        }
        if (null !== $object->getTaxSummaries()) {
            $values_2 = [];
            foreach ($object->getTaxSummaries() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'taxSummaries'} = $values_2;
        }
        if (null !== $object->getTaxes()) {
            $values_3 = [];
            foreach ($object->getTaxes() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'taxes'} = $values_3;
        }
        if (null !== $object->getTotalFare()) {
            $data->{'totalFare'} = $this->normalizer->normalize($object->getTotalFare(), 'json', $context);
        }

        return $data;
    }
}
