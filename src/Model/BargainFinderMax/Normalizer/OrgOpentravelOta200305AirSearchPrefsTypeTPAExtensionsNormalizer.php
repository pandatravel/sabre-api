<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensions';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensions;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensions();
        if (property_exists($data, 'AdditionalFareLimit')) {
            $object->setAdditionalFareLimit($this->denormalizer->denormalize($data->{'AdditionalFareLimit'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsAdditionalFareLimit', 'json', $context));
        }
        if (property_exists($data, 'AirServiceOnly')) {
            $object->setAirServiceOnly($this->denormalizer->denormalize($data->{'AirServiceOnly'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsAirServiceOnly', 'json', $context));
        }
        if (property_exists($data, 'AircraftTypePenalty')) {
            $object->setAircraftTypePenalty($this->denormalizer->denormalize($data->{'AircraftTypePenalty'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsAircraftTypePenalty', 'json', $context));
        }
        if (property_exists($data, 'AltCitiesCombinations')) {
            $object->setAltCitiesCombinations($this->denormalizer->denormalize($data->{'AltCitiesCombinations'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AltCitiesCombinationsType', 'json', $context));
        }
        if (property_exists($data, 'AlternateAirportPenalty')) {
            $object->setAlternateAirportPenalty($this->denormalizer->denormalize($data->{'AlternateAirportPenalty'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsAlternateAirportPenalty', 'json', $context));
        }
        if (property_exists($data, 'ArrivalWindow')) {
            $object->setArrivalWindow($data->{'ArrivalWindow'});
        }
        if (property_exists($data, 'Budget')) {
            $object->setBudget($this->denormalizer->denormalize($data->{'Budget'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsBudget', 'json', $context));
        }
        if (property_exists($data, 'ClassOfService')) {
            $values = [];
            foreach ($data->{'ClassOfService'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ClassOfServiceElemType', 'json', $context);
            }
            $object->setClassOfService($values);
        }
        if (property_exists($data, 'CodeShareIndicator')) {
            $object->setCodeShareIndicator($this->denormalizer->denormalize($data->{'CodeShareIndicator'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305CodeShareIndicator', 'json', $context));
        }
        if (property_exists($data, 'ContentType')) {
            $object->setContentType($this->denormalizer->denormalize($data->{'ContentType'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsContentType', 'json', $context));
        }
        if (property_exists($data, 'CountryPref')) {
            $values_1 = [];
            foreach ($data->{'CountryPref'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsCountryPref', 'json', $context);
            }
            $object->setCountryPref($values_1);
        }
        if (property_exists($data, 'DataSources')) {
            $object->setDataSources($this->denormalizer->denormalize($data->{'DataSources'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsDataSources', 'json', $context));
        }
        if (property_exists($data, 'DepartureWindow')) {
            $object->setDepartureWindow($data->{'DepartureWindow'});
        }
        if (property_exists($data, 'DiversityParameters')) {
            $object->setDiversityParameters($this->denormalizer->denormalize($data->{'DiversityParameters'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsDiversityParameters', 'json', $context));
        }
        if (property_exists($data, 'DomesticLayoverTime')) {
            $object->setDomesticLayoverTime($this->denormalizer->denormalize($data->{'DomesticLayoverTime'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsDomesticLayoverTime', 'json', $context));
        }
        if (property_exists($data, 'ExcludeAlliancePref')) {
            $values_2 = [];
            foreach ($data->{'ExcludeAlliancePref'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AllianceType', 'json', $context);
            }
            $object->setExcludeAlliancePref($values_2);
        }
        if (property_exists($data, 'ExcludeCallDirectCarriers')) {
            $object->setExcludeCallDirectCarriers($this->denormalizer->denormalize($data->{'ExcludeCallDirectCarriers'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsExcludeCallDirectCarriers', 'json', $context));
        }
        if (property_exists($data, 'ExcludeVendorPref')) {
            $values_3 = [];
            foreach ($data->{'ExcludeVendorPref'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsExcludeVendorPref', 'json', $context);
            }
            $object->setExcludeVendorPref($values_3);
        }
        if (property_exists($data, 'ExemptAllTaxes')) {
            $object->setExemptAllTaxes($this->denormalizer->denormalize($data->{'ExemptAllTaxes'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeTravelPreferencesTPAExtensionsTypeExemptAllTaxes', 'json', $context));
        }
        if (property_exists($data, 'ExemptAllTaxesAndFees')) {
            $object->setExemptAllTaxesAndFees($this->denormalizer->denormalize($data->{'ExemptAllTaxesAndFees'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeTravelPreferencesTPAExtensionsTypeExemptAllTaxesAndFees', 'json', $context));
        }
        if (property_exists($data, 'ExemptTax')) {
            $values_4 = [];
            foreach ($data->{'ExemptTax'} as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305TaxCodeType', 'json', $context);
            }
            $object->setExemptTax($values_4);
        }
        if (property_exists($data, 'FareAmountThreshold')) {
            $object->setFareAmountThreshold($this->denormalizer->denormalize($data->{'FareAmountThreshold'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsFareAmountThreshold', 'json', $context));
        }
        if (property_exists($data, 'FareBasis')) {
            $values_5 = [];
            foreach ($data->{'FareBasis'} as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FareBasisType', 'json', $context);
            }
            $object->setFareBasis($values_5);
        }
        if (property_exists($data, 'FareFocusRules')) {
            $object->setFareFocusRules($this->denormalizer->denormalize($data->{'FareFocusRules'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsFareFocusRules', 'json', $context));
        }
        if (property_exists($data, 'FareType')) {
            $values_6 = [];
            foreach ($data->{'FareType'} as $value_6) {
                $values_6[] = $this->denormalizer->denormalize($value_6, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FareTypePrefType', 'json', $context);
            }
            $object->setFareType($values_6);
        }
        if (property_exists($data, 'FlexibleFares')) {
            $object->setFlexibleFares($this->denormalizer->denormalize($data->{'FlexibleFares'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlexibleFaresType', 'json', $context));
        }
        if (property_exists($data, 'FlightRepeatLimit')) {
            $object->setFlightRepeatLimit($this->denormalizer->denormalize($data->{'FlightRepeatLimit'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsFlightRepeatLimit', 'json', $context));
        }
        if (property_exists($data, 'FlightRestrictions')) {
            $object->setFlightRestrictions($this->denormalizer->denormalize($data->{'FlightRestrictions'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsFlightRestrictions', 'json', $context));
        }
        if (property_exists($data, 'FlightStopsAsConnections')) {
            $object->setFlightStopsAsConnections($this->denormalizer->denormalize($data->{'FlightStopsAsConnections'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305FlightStopsAsConnectionsType', 'json', $context));
        }
        if (property_exists($data, 'ForceKeywordRestrictedContent')) {
            $object->setForceKeywordRestrictedContent($this->denormalizer->denormalize($data->{'ForceKeywordRestrictedContent'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsForceKeywordRestrictedContent', 'json', $context));
        }
        if (property_exists($data, 'GoverningCarrierOverride')) {
            $object->setGoverningCarrierOverride($this->denormalizer->denormalize($data->{'GoverningCarrierOverride'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305GoverningCarrierOverrideType', 'json', $context));
        }
        if (property_exists($data, 'IncludeAlliancePref')) {
            $values_7 = [];
            foreach ($data->{'IncludeAlliancePref'} as $value_7) {
                $values_7[] = $this->denormalizer->denormalize($value_7, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AllianceType', 'json', $context);
            }
            $object->setIncludeAlliancePref($values_7);
        }
        if (property_exists($data, 'InterlineIndicator')) {
            $object->setInterlineIndicator($this->denormalizer->denormalize($data->{'InterlineIndicator'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsInterlineIndicator', 'json', $context));
        }
        if (property_exists($data, 'ItineraryNumberThreshold')) {
            $object->setItineraryNumberThreshold($this->denormalizer->denormalize($data->{'ItineraryNumberThreshold'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsItineraryNumberThreshold', 'json', $context));
        }
        if (property_exists($data, 'JetServiceOnly')) {
            $object->setJetServiceOnly($this->denormalizer->denormalize($data->{'JetServiceOnly'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsJetServiceOnly', 'json', $context));
        }
        if (property_exists($data, 'JumpCabinLogic')) {
            $object->setJumpCabinLogic($this->denormalizer->denormalize($data->{'JumpCabinLogic'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305JumpCabinLogicType', 'json', $context));
        }
        if (property_exists($data, 'KeepSameCabin')) {
            $object->setKeepSameCabin($this->denormalizer->denormalize($data->{'KeepSameCabin'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305KeepSameCabinType', 'json', $context));
        }
        if (property_exists($data, 'LongConnectPoints')) {
            $object->setLongConnectPoints($this->denormalizer->denormalize($data->{'LongConnectPoints'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsLongConnectPoints', 'json', $context));
        }
        if (property_exists($data, 'LongConnectTime')) {
            $object->setLongConnectTime($this->denormalizer->denormalize($data->{'LongConnectTime'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsLongConnectTime', 'json', $context));
        }
        if (property_exists($data, 'LowCostCarriersProcessing')) {
            $object->setLowCostCarriersProcessing($this->denormalizer->denormalize($data->{'LowCostCarriersProcessing'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsLowCostCarriersProcessing', 'json', $context));
        }
        if (property_exists($data, 'MaxPrice')) {
            $object->setMaxPrice($this->denormalizer->denormalize($data->{'MaxPrice'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsMaxPrice', 'json', $context));
        }
        if (property_exists($data, 'MultiAirportCodes')) {
            $object->setMultiAirportCodes($this->denormalizer->denormalize($data->{'MultiAirportCodes'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsMultiAirportCodes', 'json', $context));
        }
        if (property_exists($data, 'NumTrips')) {
            $object->setNumTrips($this->denormalizer->denormalize($data->{'NumTrips'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305NumTripsType', 'json', $context));
        }
        if (property_exists($data, 'NumTripsWithRouting')) {
            $object->setNumTripsWithRouting($this->denormalizer->denormalize($data->{'NumTripsWithRouting'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsNumTripsWithRouting', 'json', $context));
        }
        if (property_exists($data, 'OnlineIndicator')) {
            $object->setOnlineIndicator($this->denormalizer->denormalize($data->{'OnlineIndicator'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsOnlineIndicator', 'json', $context));
        }
        if (property_exists($data, 'OptionsPerDatePairList')) {
            $object->setOptionsPerDatePairList($this->denormalizer->denormalize($data->{'OptionsPerDatePairList'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsOptionsPerDatePairList', 'json', $context));
        }
        if (property_exists($data, 'PreferNDCSourceOnTie')) {
            $object->setPreferNDCSourceOnTie($this->denormalizer->denormalize($data->{'PreferNDCSourceOnTie'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsPreferNDCSourceOnTie', 'json', $context));
        }
        if (property_exists($data, 'RetailerRules')) {
            $object->setRetailerRules($this->denormalizer->denormalize($data->{'RetailerRules'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305RetailerRulesType', 'json', $context));
        }
        if (property_exists($data, 'SameConnectionAirportOnly')) {
            $object->setSameConnectionAirportOnly($this->denormalizer->denormalize($data->{'SameConnectionAirportOnly'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsSameConnectionAirportOnly', 'json', $context));
        }
        if (property_exists($data, 'SameOriginAirportOnly')) {
            $object->setSameOriginAirportOnly($this->denormalizer->denormalize($data->{'SameOriginAirportOnly'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsSameOriginAirportOnly', 'json', $context));
        }
        if (property_exists($data, 'SameTurnaroundAirportOnly')) {
            $object->setSameTurnaroundAirportOnly($this->denormalizer->denormalize($data->{'SameTurnaroundAirportOnly'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsSameTurnaroundAirportOnly', 'json', $context));
        }
        if (property_exists($data, 'SellingLevels')) {
            $object->setSellingLevels($this->denormalizer->denormalize($data->{'SellingLevels'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsSellingLevels', 'json', $context));
        }
        if (property_exists($data, 'SettlementMethod')) {
            $object->setSettlementMethod($data->{'SettlementMethod'});
        }
        if (property_exists($data, 'Taxes')) {
            $object->setTaxes($this->denormalizer->denormalize($data->{'Taxes'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ExchangeTravelPreferencesTPAExtensionsTypeTaxes', 'json', $context));
        }
        if (property_exists($data, 'TicketingSumOfLocals')) {
            $object->setTicketingSumOfLocals($this->denormalizer->denormalize($data->{'TicketingSumOfLocals'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsTicketingSumOfLocals', 'json', $context));
        }
        if (property_exists($data, 'TripType')) {
            $object->setTripType($this->denormalizer->denormalize($data->{'TripType'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsTripType', 'json', $context));
        }
        if (property_exists($data, 'ValidatingCarrier')) {
            $object->setValidatingCarrier($this->denormalizer->denormalize($data->{'ValidatingCarrier'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305ValidatingCarrierType', 'json', $context));
        }
        if (property_exists($data, 'ValidatingCarrierCheck')) {
            $object->setValidatingCarrierCheck($this->denormalizer->denormalize($data->{'ValidatingCarrierCheck'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsValidatingCarrierCheck', 'json', $context));
        }
        if (property_exists($data, 'VerificationItinCallLogic')) {
            $object->setVerificationItinCallLogic($this->denormalizer->denormalize($data->{'VerificationItinCallLogic'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsVerificationItinCallLogic', 'json', $context));
        }
        if (property_exists($data, 'XOFares')) {
            $object->setXOFares($this->denormalizer->denormalize($data->{'XOFares'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305XOFaresType', 'json', $context));
        }
        if (property_exists($data, 'avsPenaltyCrrs')) {
            $object->setAvsPenaltyCrrs($this->denormalizer->denormalize($data->{'avsPenaltyCrrs'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsAvsPenaltyCrrs', 'json', $context));
        }
        if (property_exists($data, 'depPenaltyInUSD')) {
            $object->setDepPenaltyInUSD($this->denormalizer->denormalize($data->{'depPenaltyInUSD'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsDepPenaltyInUSD', 'json', $context));
        }
        if (property_exists($data, 'durPenaltyInUSD')) {
            $object->setDurPenaltyInUSD($this->denormalizer->denormalize($data->{'durPenaltyInUSD'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsDurPenaltyInUSD', 'json', $context));
        }
        if (property_exists($data, 'fltOptLFSReuseLimitForAVS')) {
            $object->setFltOptLFSReuseLimitForAVS($this->denormalizer->denormalize($data->{'fltOptLFSReuseLimitForAVS'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsFltOptLFSReuseLimitForAVS', 'json', $context));
        }
        if (property_exists($data, 'fltOptLFSReuseLimitForNonAVS')) {
            $object->setFltOptLFSReuseLimitForNonAVS($this->denormalizer->denormalize($data->{'fltOptLFSReuseLimitForNonAVS'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsFltOptLFSReuseLimitForNonAVS', 'json', $context));
        }
        if (property_exists($data, 'fltOptMustPriceReuseLimit')) {
            $object->setFltOptMustPriceReuseLimit($this->denormalizer->denormalize($data->{'fltOptMustPriceReuseLimit'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsFltOptMustPriceReuseLimit', 'json', $context));
        }
        if (property_exists($data, 'maxAllowedLFSOveragePerCrrPercent')) {
            $object->setMaxAllowedLFSOveragePerCrrPercent($this->denormalizer->denormalize($data->{'maxAllowedLFSOveragePerCrrPercent'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsMaxAllowedLFSOveragePerCrrPercent', 'json', $context));
        }
        if (property_exists($data, 'maxAllowedMustPriceOveragePerCrr')) {
            $object->setMaxAllowedMustPriceOveragePerCrr($this->denormalizer->denormalize($data->{'maxAllowedMustPriceOveragePerCrr'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsMaxAllowedMustPriceOveragePerCrr', 'json', $context));
        }
        if (property_exists($data, 'maxNumOf2PlusStpSol')) {
            $object->setMaxNumOf2PlusStpSol($this->denormalizer->denormalize($data->{'maxNumOf2PlusStpSol'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsMaxNumOf2PlusStpSol', 'json', $context));
        }
        if (property_exists($data, 'maxNumOfNonStpInrlSol')) {
            $object->setMaxNumOfNonStpInrlSol($this->denormalizer->denormalize($data->{'maxNumOfNonStpInrlSol'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsMaxNumOfNonStpInrlSol', 'json', $context));
        }
        if (property_exists($data, 'maxNumOfNonStpOnlSol')) {
            $object->setMaxNumOfNonStpOnlSol($this->denormalizer->denormalize($data->{'maxNumOfNonStpOnlSol'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsMaxNumOfNonStpOnlSol', 'json', $context));
        }
        if (property_exists($data, 'maxNumOfSingleStpOnlSol')) {
            $object->setMaxNumOfSingleStpOnlSol($this->denormalizer->denormalize($data->{'maxNumOfSingleStpOnlSol'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsMaxNumOfSingleStpOnlSol', 'json', $context));
        }
        if (property_exists($data, 'maxRelFareLvlOfxForCnx')) {
            $object->setMaxRelFareLvlOfxForCnx($this->denormalizer->denormalize($data->{'maxRelFareLvlOfxForCnx'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsMaxRelFareLvlOfxForCnx', 'json', $context));
        }
        if (property_exists($data, 'maxRelFareLvlOfxForNonStp')) {
            $object->setMaxRelFareLvlOfxForNonStp($this->denormalizer->denormalize($data->{'maxRelFareLvlOfxForNonStp'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsMaxRelFareLvlOfxForNonStp', 'json', $context));
        }
        if (property_exists($data, 'minAllowedOveragePerCrr')) {
            $object->setMinAllowedOveragePerCrr($this->denormalizer->denormalize($data->{'minAllowedOveragePerCrr'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsMinAllowedOveragePerCrr', 'json', $context));
        }
        if (property_exists($data, 'minAllowedOveragePerCrrPercent')) {
            $object->setMinAllowedOveragePerCrrPercent($this->denormalizer->denormalize($data->{'minAllowedOveragePerCrrPercent'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsMinAllowedOveragePerCrrPercent', 'json', $context));
        }
        if (property_exists($data, 'numOfLowFareSol')) {
            $object->setNumOfLowFareSol($this->denormalizer->denormalize($data->{'numOfLowFareSol'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsNumOfLowFareSol', 'json', $context));
        }
        if (property_exists($data, 'numOfMustPrice2PlusStpSol')) {
            $object->setNumOfMustPrice2PlusStpSol($this->denormalizer->denormalize($data->{'numOfMustPrice2PlusStpSol'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsNumOfMustPrice2PlusStpSol', 'json', $context));
        }
        if (property_exists($data, 'numOfMustPriceInrlSol')) {
            $object->setNumOfMustPriceInrlSol($this->denormalizer->denormalize($data->{'numOfMustPriceInrlSol'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsNumOfMustPriceInrlSol', 'json', $context));
        }
        if (property_exists($data, 'numOfMustPriceNStp1StpInrlSol')) {
            $object->setNumOfMustPriceNStp1StpInrlSol($this->denormalizer->denormalize($data->{'numOfMustPriceNStp1StpInrlSol'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsNumOfMustPriceNStp1StpInrlSol', 'json', $context));
        }
        if (property_exists($data, 'numOfMustPriceNStp1StpOnlSol')) {
            $object->setNumOfMustPriceNStp1StpOnlSol($this->denormalizer->denormalize($data->{'numOfMustPriceNStp1StpOnlSol'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsNumOfMustPriceNStp1StpOnlSol', 'json', $context));
        }
        if (property_exists($data, 'numOfMustPriceNStpInrlSol')) {
            $object->setNumOfMustPriceNStpInrlSol($this->denormalizer->denormalize($data->{'numOfMustPriceNStpInrlSol'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsNumOfMustPriceNStpInrlSol', 'json', $context));
        }
        if (property_exists($data, 'numOfMustPriceNStpOnlSol')) {
            $object->setNumOfMustPriceNStpOnlSol($this->denormalizer->denormalize($data->{'numOfMustPriceNStpOnlSol'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsNumOfMustPriceNStpOnlSol', 'json', $context));
        }
        if (property_exists($data, 'numOfMustPriceOnlSol')) {
            $object->setNumOfMustPriceOnlSol($this->denormalizer->denormalize($data->{'numOfMustPriceOnlSol'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsNumOfMustPriceOnlSol', 'json', $context));
        }
        if (property_exists($data, 'numOfMustPriceSStopOnlSol')) {
            $object->setNumOfMustPriceSStopOnlSol($this->denormalizer->denormalize($data->{'numOfMustPriceSStopOnlSol'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsNumOfMustPriceSStopOnlSol', 'json', $context));
        }
        if (property_exists($data, 'stpPenaltyInUSD')) {
            $object->setStpPenaltyInUSD($this->denormalizer->denormalize($data->{'stpPenaltyInUSD'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsStpPenaltyInUSD', 'json', $context));
        }
        if (property_exists($data, 'targetMinNumOfLFSOnlSolPerCrr')) {
            $object->setTargetMinNumOfLFSOnlSolPerCrr($this->denormalizer->denormalize($data->{'targetMinNumOfLFSOnlSolPerCrr'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsTargetMinNumOfLFSOnlSolPerCrr', 'json', $context));
        }
        if (property_exists($data, 'targetMinNumOfLFSTotOnlSolPercent')) {
            $object->setTargetMinNumOfLFSTotOnlSolPercent($this->denormalizer->denormalize($data->{'targetMinNumOfLFSTotOnlSolPercent'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsTargetMinNumOfLFSTotOnlSolPercent', 'json', $context));
        }
        if (property_exists($data, 'upperBoundLFSFactor')) {
            $object->setUpperBoundLFSFactor($this->denormalizer->denormalize($data->{'upperBoundLFSFactor'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsUpperBoundLFSFactor', 'json', $context));
        }
        if (property_exists($data, 'upperBoundMustPriceFactorForNonStp')) {
            $object->setUpperBoundMustPriceFactorForNonStp($this->denormalizer->denormalize($data->{'upperBoundMustPriceFactorForNonStp'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsUpperBoundMustPriceFactorForNonStp', 'json', $context));
        }
        if (property_exists($data, 'upperBoundMustPriceFactorForNotNonStp')) {
            $object->setUpperBoundMustPriceFactorForNotNonStp($this->denormalizer->denormalize($data->{'upperBoundMustPriceFactorForNotNonStp'}, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\OrgOpentravelOta200305AirSearchPrefsTypeTPAExtensionsUpperBoundMustPriceFactorForNotNonStp', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAdditionalFareLimit()) {
            $data->{'AdditionalFareLimit'} = $this->normalizer->normalize($object->getAdditionalFareLimit(), 'json', $context);
        }
        if (null !== $object->getAirServiceOnly()) {
            $data->{'AirServiceOnly'} = $this->normalizer->normalize($object->getAirServiceOnly(), 'json', $context);
        }
        if (null !== $object->getAircraftTypePenalty()) {
            $data->{'AircraftTypePenalty'} = $this->normalizer->normalize($object->getAircraftTypePenalty(), 'json', $context);
        }
        if (null !== $object->getAltCitiesCombinations()) {
            $data->{'AltCitiesCombinations'} = $this->normalizer->normalize($object->getAltCitiesCombinations(), 'json', $context);
        }
        if (null !== $object->getAlternateAirportPenalty()) {
            $data->{'AlternateAirportPenalty'} = $this->normalizer->normalize($object->getAlternateAirportPenalty(), 'json', $context);
        }
        if (null !== $object->getArrivalWindow()) {
            $data->{'ArrivalWindow'} = $object->getArrivalWindow();
        }
        if (null !== $object->getBudget()) {
            $data->{'Budget'} = $this->normalizer->normalize($object->getBudget(), 'json', $context);
        }
        if (null !== $object->getClassOfService()) {
            $values = [];
            foreach ($object->getClassOfService() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'ClassOfService'} = $values;
        }
        if (null !== $object->getCodeShareIndicator()) {
            $data->{'CodeShareIndicator'} = $this->normalizer->normalize($object->getCodeShareIndicator(), 'json', $context);
        }
        if (null !== $object->getContentType()) {
            $data->{'ContentType'} = $this->normalizer->normalize($object->getContentType(), 'json', $context);
        }
        if (null !== $object->getCountryPref()) {
            $values_1 = [];
            foreach ($object->getCountryPref() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'CountryPref'} = $values_1;
        }
        if (null !== $object->getDataSources()) {
            $data->{'DataSources'} = $this->normalizer->normalize($object->getDataSources(), 'json', $context);
        }
        if (null !== $object->getDepartureWindow()) {
            $data->{'DepartureWindow'} = $object->getDepartureWindow();
        }
        if (null !== $object->getDiversityParameters()) {
            $data->{'DiversityParameters'} = $this->normalizer->normalize($object->getDiversityParameters(), 'json', $context);
        }
        if (null !== $object->getDomesticLayoverTime()) {
            $data->{'DomesticLayoverTime'} = $this->normalizer->normalize($object->getDomesticLayoverTime(), 'json', $context);
        }
        if (null !== $object->getExcludeAlliancePref()) {
            $values_2 = [];
            foreach ($object->getExcludeAlliancePref() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'ExcludeAlliancePref'} = $values_2;
        }
        if (null !== $object->getExcludeCallDirectCarriers()) {
            $data->{'ExcludeCallDirectCarriers'} = $this->normalizer->normalize($object->getExcludeCallDirectCarriers(), 'json', $context);
        }
        if (null !== $object->getExcludeVendorPref()) {
            $values_3 = [];
            foreach ($object->getExcludeVendorPref() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'ExcludeVendorPref'} = $values_3;
        }
        if (null !== $object->getExemptAllTaxes()) {
            $data->{'ExemptAllTaxes'} = $this->normalizer->normalize($object->getExemptAllTaxes(), 'json', $context);
        }
        if (null !== $object->getExemptAllTaxesAndFees()) {
            $data->{'ExemptAllTaxesAndFees'} = $this->normalizer->normalize($object->getExemptAllTaxesAndFees(), 'json', $context);
        }
        if (null !== $object->getExemptTax()) {
            $values_4 = [];
            foreach ($object->getExemptTax() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $data->{'ExemptTax'} = $values_4;
        }
        if (null !== $object->getFareAmountThreshold()) {
            $data->{'FareAmountThreshold'} = $this->normalizer->normalize($object->getFareAmountThreshold(), 'json', $context);
        }
        if (null !== $object->getFareBasis()) {
            $values_5 = [];
            foreach ($object->getFareBasis() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $data->{'FareBasis'} = $values_5;
        }
        if (null !== $object->getFareFocusRules()) {
            $data->{'FareFocusRules'} = $this->normalizer->normalize($object->getFareFocusRules(), 'json', $context);
        }
        if (null !== $object->getFareType()) {
            $values_6 = [];
            foreach ($object->getFareType() as $value_6) {
                $values_6[] = $this->normalizer->normalize($value_6, 'json', $context);
            }
            $data->{'FareType'} = $values_6;
        }
        if (null !== $object->getFlexibleFares()) {
            $data->{'FlexibleFares'} = $this->normalizer->normalize($object->getFlexibleFares(), 'json', $context);
        }
        if (null !== $object->getFlightRepeatLimit()) {
            $data->{'FlightRepeatLimit'} = $this->normalizer->normalize($object->getFlightRepeatLimit(), 'json', $context);
        }
        if (null !== $object->getFlightRestrictions()) {
            $data->{'FlightRestrictions'} = $this->normalizer->normalize($object->getFlightRestrictions(), 'json', $context);
        }
        if (null !== $object->getFlightStopsAsConnections()) {
            $data->{'FlightStopsAsConnections'} = $this->normalizer->normalize($object->getFlightStopsAsConnections(), 'json', $context);
        }
        if (null !== $object->getForceKeywordRestrictedContent()) {
            $data->{'ForceKeywordRestrictedContent'} = $this->normalizer->normalize($object->getForceKeywordRestrictedContent(), 'json', $context);
        }
        if (null !== $object->getGoverningCarrierOverride()) {
            $data->{'GoverningCarrierOverride'} = $this->normalizer->normalize($object->getGoverningCarrierOverride(), 'json', $context);
        }
        if (null !== $object->getIncludeAlliancePref()) {
            $values_7 = [];
            foreach ($object->getIncludeAlliancePref() as $value_7) {
                $values_7[] = $this->normalizer->normalize($value_7, 'json', $context);
            }
            $data->{'IncludeAlliancePref'} = $values_7;
        }
        if (null !== $object->getInterlineIndicator()) {
            $data->{'InterlineIndicator'} = $this->normalizer->normalize($object->getInterlineIndicator(), 'json', $context);
        }
        if (null !== $object->getItineraryNumberThreshold()) {
            $data->{'ItineraryNumberThreshold'} = $this->normalizer->normalize($object->getItineraryNumberThreshold(), 'json', $context);
        }
        if (null !== $object->getJetServiceOnly()) {
            $data->{'JetServiceOnly'} = $this->normalizer->normalize($object->getJetServiceOnly(), 'json', $context);
        }
        if (null !== $object->getJumpCabinLogic()) {
            $data->{'JumpCabinLogic'} = $this->normalizer->normalize($object->getJumpCabinLogic(), 'json', $context);
        }
        if (null !== $object->getKeepSameCabin()) {
            $data->{'KeepSameCabin'} = $this->normalizer->normalize($object->getKeepSameCabin(), 'json', $context);
        }
        if (null !== $object->getLongConnectPoints()) {
            $data->{'LongConnectPoints'} = $this->normalizer->normalize($object->getLongConnectPoints(), 'json', $context);
        }
        if (null !== $object->getLongConnectTime()) {
            $data->{'LongConnectTime'} = $this->normalizer->normalize($object->getLongConnectTime(), 'json', $context);
        }
        if (null !== $object->getLowCostCarriersProcessing()) {
            $data->{'LowCostCarriersProcessing'} = $this->normalizer->normalize($object->getLowCostCarriersProcessing(), 'json', $context);
        }
        if (null !== $object->getMaxPrice()) {
            $data->{'MaxPrice'} = $this->normalizer->normalize($object->getMaxPrice(), 'json', $context);
        }
        if (null !== $object->getMultiAirportCodes()) {
            $data->{'MultiAirportCodes'} = $this->normalizer->normalize($object->getMultiAirportCodes(), 'json', $context);
        }
        if (null !== $object->getNumTrips()) {
            $data->{'NumTrips'} = $this->normalizer->normalize($object->getNumTrips(), 'json', $context);
        }
        if (null !== $object->getNumTripsWithRouting()) {
            $data->{'NumTripsWithRouting'} = $this->normalizer->normalize($object->getNumTripsWithRouting(), 'json', $context);
        }
        if (null !== $object->getOnlineIndicator()) {
            $data->{'OnlineIndicator'} = $this->normalizer->normalize($object->getOnlineIndicator(), 'json', $context);
        }
        if (null !== $object->getOptionsPerDatePairList()) {
            $data->{'OptionsPerDatePairList'} = $this->normalizer->normalize($object->getOptionsPerDatePairList(), 'json', $context);
        }
        if (null !== $object->getPreferNDCSourceOnTie()) {
            $data->{'PreferNDCSourceOnTie'} = $this->normalizer->normalize($object->getPreferNDCSourceOnTie(), 'json', $context);
        }
        if (null !== $object->getRetailerRules()) {
            $data->{'RetailerRules'} = $this->normalizer->normalize($object->getRetailerRules(), 'json', $context);
        }
        if (null !== $object->getSameConnectionAirportOnly()) {
            $data->{'SameConnectionAirportOnly'} = $this->normalizer->normalize($object->getSameConnectionAirportOnly(), 'json', $context);
        }
        if (null !== $object->getSameOriginAirportOnly()) {
            $data->{'SameOriginAirportOnly'} = $this->normalizer->normalize($object->getSameOriginAirportOnly(), 'json', $context);
        }
        if (null !== $object->getSameTurnaroundAirportOnly()) {
            $data->{'SameTurnaroundAirportOnly'} = $this->normalizer->normalize($object->getSameTurnaroundAirportOnly(), 'json', $context);
        }
        if (null !== $object->getSellingLevels()) {
            $data->{'SellingLevels'} = $this->normalizer->normalize($object->getSellingLevels(), 'json', $context);
        }
        if (null !== $object->getSettlementMethod()) {
            $data->{'SettlementMethod'} = $object->getSettlementMethod();
        }
        if (null !== $object->getTaxes()) {
            $data->{'Taxes'} = $this->normalizer->normalize($object->getTaxes(), 'json', $context);
        }
        if (null !== $object->getTicketingSumOfLocals()) {
            $data->{'TicketingSumOfLocals'} = $this->normalizer->normalize($object->getTicketingSumOfLocals(), 'json', $context);
        }
        if (null !== $object->getTripType()) {
            $data->{'TripType'} = $this->normalizer->normalize($object->getTripType(), 'json', $context);
        }
        if (null !== $object->getValidatingCarrier()) {
            $data->{'ValidatingCarrier'} = $this->normalizer->normalize($object->getValidatingCarrier(), 'json', $context);
        }
        if (null !== $object->getValidatingCarrierCheck()) {
            $data->{'ValidatingCarrierCheck'} = $this->normalizer->normalize($object->getValidatingCarrierCheck(), 'json', $context);
        }
        if (null !== $object->getVerificationItinCallLogic()) {
            $data->{'VerificationItinCallLogic'} = $this->normalizer->normalize($object->getVerificationItinCallLogic(), 'json', $context);
        }
        if (null !== $object->getXOFares()) {
            $data->{'XOFares'} = $this->normalizer->normalize($object->getXOFares(), 'json', $context);
        }
        if (null !== $object->getAvsPenaltyCrrs()) {
            $data->{'avsPenaltyCrrs'} = $this->normalizer->normalize($object->getAvsPenaltyCrrs(), 'json', $context);
        }
        if (null !== $object->getDepPenaltyInUSD()) {
            $data->{'depPenaltyInUSD'} = $this->normalizer->normalize($object->getDepPenaltyInUSD(), 'json', $context);
        }
        if (null !== $object->getDurPenaltyInUSD()) {
            $data->{'durPenaltyInUSD'} = $this->normalizer->normalize($object->getDurPenaltyInUSD(), 'json', $context);
        }
        if (null !== $object->getFltOptLFSReuseLimitForAVS()) {
            $data->{'fltOptLFSReuseLimitForAVS'} = $this->normalizer->normalize($object->getFltOptLFSReuseLimitForAVS(), 'json', $context);
        }
        if (null !== $object->getFltOptLFSReuseLimitForNonAVS()) {
            $data->{'fltOptLFSReuseLimitForNonAVS'} = $this->normalizer->normalize($object->getFltOptLFSReuseLimitForNonAVS(), 'json', $context);
        }
        if (null !== $object->getFltOptMustPriceReuseLimit()) {
            $data->{'fltOptMustPriceReuseLimit'} = $this->normalizer->normalize($object->getFltOptMustPriceReuseLimit(), 'json', $context);
        }
        if (null !== $object->getMaxAllowedLFSOveragePerCrrPercent()) {
            $data->{'maxAllowedLFSOveragePerCrrPercent'} = $this->normalizer->normalize($object->getMaxAllowedLFSOveragePerCrrPercent(), 'json', $context);
        }
        if (null !== $object->getMaxAllowedMustPriceOveragePerCrr()) {
            $data->{'maxAllowedMustPriceOveragePerCrr'} = $this->normalizer->normalize($object->getMaxAllowedMustPriceOveragePerCrr(), 'json', $context);
        }
        if (null !== $object->getMaxNumOf2PlusStpSol()) {
            $data->{'maxNumOf2PlusStpSol'} = $this->normalizer->normalize($object->getMaxNumOf2PlusStpSol(), 'json', $context);
        }
        if (null !== $object->getMaxNumOfNonStpInrlSol()) {
            $data->{'maxNumOfNonStpInrlSol'} = $this->normalizer->normalize($object->getMaxNumOfNonStpInrlSol(), 'json', $context);
        }
        if (null !== $object->getMaxNumOfNonStpOnlSol()) {
            $data->{'maxNumOfNonStpOnlSol'} = $this->normalizer->normalize($object->getMaxNumOfNonStpOnlSol(), 'json', $context);
        }
        if (null !== $object->getMaxNumOfSingleStpOnlSol()) {
            $data->{'maxNumOfSingleStpOnlSol'} = $this->normalizer->normalize($object->getMaxNumOfSingleStpOnlSol(), 'json', $context);
        }
        if (null !== $object->getMaxRelFareLvlOfxForCnx()) {
            $data->{'maxRelFareLvlOfxForCnx'} = $this->normalizer->normalize($object->getMaxRelFareLvlOfxForCnx(), 'json', $context);
        }
        if (null !== $object->getMaxRelFareLvlOfxForNonStp()) {
            $data->{'maxRelFareLvlOfxForNonStp'} = $this->normalizer->normalize($object->getMaxRelFareLvlOfxForNonStp(), 'json', $context);
        }
        if (null !== $object->getMinAllowedOveragePerCrr()) {
            $data->{'minAllowedOveragePerCrr'} = $this->normalizer->normalize($object->getMinAllowedOveragePerCrr(), 'json', $context);
        }
        if (null !== $object->getMinAllowedOveragePerCrrPercent()) {
            $data->{'minAllowedOveragePerCrrPercent'} = $this->normalizer->normalize($object->getMinAllowedOveragePerCrrPercent(), 'json', $context);
        }
        if (null !== $object->getNumOfLowFareSol()) {
            $data->{'numOfLowFareSol'} = $this->normalizer->normalize($object->getNumOfLowFareSol(), 'json', $context);
        }
        if (null !== $object->getNumOfMustPrice2PlusStpSol()) {
            $data->{'numOfMustPrice2PlusStpSol'} = $this->normalizer->normalize($object->getNumOfMustPrice2PlusStpSol(), 'json', $context);
        }
        if (null !== $object->getNumOfMustPriceInrlSol()) {
            $data->{'numOfMustPriceInrlSol'} = $this->normalizer->normalize($object->getNumOfMustPriceInrlSol(), 'json', $context);
        }
        if (null !== $object->getNumOfMustPriceNStp1StpInrlSol()) {
            $data->{'numOfMustPriceNStp1StpInrlSol'} = $this->normalizer->normalize($object->getNumOfMustPriceNStp1StpInrlSol(), 'json', $context);
        }
        if (null !== $object->getNumOfMustPriceNStp1StpOnlSol()) {
            $data->{'numOfMustPriceNStp1StpOnlSol'} = $this->normalizer->normalize($object->getNumOfMustPriceNStp1StpOnlSol(), 'json', $context);
        }
        if (null !== $object->getNumOfMustPriceNStpInrlSol()) {
            $data->{'numOfMustPriceNStpInrlSol'} = $this->normalizer->normalize($object->getNumOfMustPriceNStpInrlSol(), 'json', $context);
        }
        if (null !== $object->getNumOfMustPriceNStpOnlSol()) {
            $data->{'numOfMustPriceNStpOnlSol'} = $this->normalizer->normalize($object->getNumOfMustPriceNStpOnlSol(), 'json', $context);
        }
        if (null !== $object->getNumOfMustPriceOnlSol()) {
            $data->{'numOfMustPriceOnlSol'} = $this->normalizer->normalize($object->getNumOfMustPriceOnlSol(), 'json', $context);
        }
        if (null !== $object->getNumOfMustPriceSStopOnlSol()) {
            $data->{'numOfMustPriceSStopOnlSol'} = $this->normalizer->normalize($object->getNumOfMustPriceSStopOnlSol(), 'json', $context);
        }
        if (null !== $object->getStpPenaltyInUSD()) {
            $data->{'stpPenaltyInUSD'} = $this->normalizer->normalize($object->getStpPenaltyInUSD(), 'json', $context);
        }
        if (null !== $object->getTargetMinNumOfLFSOnlSolPerCrr()) {
            $data->{'targetMinNumOfLFSOnlSolPerCrr'} = $this->normalizer->normalize($object->getTargetMinNumOfLFSOnlSolPerCrr(), 'json', $context);
        }
        if (null !== $object->getTargetMinNumOfLFSTotOnlSolPercent()) {
            $data->{'targetMinNumOfLFSTotOnlSolPercent'} = $this->normalizer->normalize($object->getTargetMinNumOfLFSTotOnlSolPercent(), 'json', $context);
        }
        if (null !== $object->getUpperBoundLFSFactor()) {
            $data->{'upperBoundLFSFactor'} = $this->normalizer->normalize($object->getUpperBoundLFSFactor(), 'json', $context);
        }
        if (null !== $object->getUpperBoundMustPriceFactorForNonStp()) {
            $data->{'upperBoundMustPriceFactorForNonStp'} = $this->normalizer->normalize($object->getUpperBoundMustPriceFactorForNonStp(), 'json', $context);
        }
        if (null !== $object->getUpperBoundMustPriceFactorForNotNonStp()) {
            $data->{'upperBoundMustPriceFactorForNotNonStp'} = $this->normalizer->normalize($object->getUpperBoundMustPriceFactorForNotNonStp(), 'json', $context);
        }

        return $data;
    }
}
