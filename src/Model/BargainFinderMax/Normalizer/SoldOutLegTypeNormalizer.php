<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SoldOutLegTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\SoldOutLegType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\SoldOutLegType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\SoldOutLegType();
        if (property_exists($data, 'brandCode')) {
            $object->setBrandCode($data->{'brandCode'});
        }
        if (property_exists($data, 'brandDescription')) {
            $object->setBrandDescription($data->{'brandDescription'});
        }
        if (property_exists($data, 'programCode')) {
            $object->setProgramCode($data->{'programCode'});
        }
        if (property_exists($data, 'programId')) {
            $object->setProgramId($data->{'programId'});
        }
        if (property_exists($data, 'programName')) {
            $object->setProgramName($data->{'programName'});
        }
        if (property_exists($data, 'programSystemCode')) {
            $object->setProgramSystemCode($data->{'programSystemCode'});
        }
        if (property_exists($data, 'ref')) {
            $object->setRef($data->{'ref'});
        }
        if (property_exists($data, 'soldOutSchedules')) {
            $values = [];
            foreach ($data->{'soldOutSchedules'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\SoldOutSchedule', 'json', $context);
            }
            $object->setSoldOutSchedules($values);
        }
        if (property_exists($data, 'status')) {
            $object->setStatus($data->{'status'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBrandCode()) {
            $data->{'brandCode'} = $object->getBrandCode();
        }
        if (null !== $object->getBrandDescription()) {
            $data->{'brandDescription'} = $object->getBrandDescription();
        }
        if (null !== $object->getProgramCode()) {
            $data->{'programCode'} = $object->getProgramCode();
        }
        if (null !== $object->getProgramId()) {
            $data->{'programId'} = $object->getProgramId();
        }
        if (null !== $object->getProgramName()) {
            $data->{'programName'} = $object->getProgramName();
        }
        if (null !== $object->getProgramSystemCode()) {
            $data->{'programSystemCode'} = $object->getProgramSystemCode();
        }
        if (null !== $object->getRef()) {
            $data->{'ref'} = $object->getRef();
        }
        if (null !== $object->getSoldOutSchedules()) {
            $values = [];
            foreach ($object->getSoldOutSchedules() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'soldOutSchedules'} = $values;
        }
        if (null !== $object->getStatus()) {
            $data->{'status'} = $object->getStatus();
        }

        return $data;
    }
}
