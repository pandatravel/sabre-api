<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\BargainFinderMax\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CurrencyConversionTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\CurrencyConversionType';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\BargainFinderMax\\CurrencyConversionType';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\BargainFinderMax\CurrencyConversionType();
        if (property_exists($data, 'exchangeRate')) {
            $object->setExchangeRate($data->{'exchangeRate'});
        }
        if (property_exists($data, 'exchangeRateUsed')) {
            $object->setExchangeRateUsed($data->{'exchangeRateUsed'});
        }
        if (property_exists($data, 'from')) {
            $object->setFrom($data->{'from'});
        }
        if (property_exists($data, 'overriden')) {
            $object->setOverriden($data->{'overriden'});
        }
        if (property_exists($data, 'to')) {
            $object->setTo($data->{'to'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getExchangeRate()) {
            $data->{'exchangeRate'} = $object->getExchangeRate();
        }
        if (null !== $object->getExchangeRateUsed()) {
            $data->{'exchangeRateUsed'} = $object->getExchangeRateUsed();
        }
        if (null !== $object->getFrom()) {
            $data->{'from'} = $object->getFrom();
        }
        if (null !== $object->getOverriden()) {
            $data->{'overriden'} = $object->getOverriden();
        }
        if (null !== $object->getTo()) {
            $data->{'to'} = $object->getTo();
        }

        return $data;
    }
}
