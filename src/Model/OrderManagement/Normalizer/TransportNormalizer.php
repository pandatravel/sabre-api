<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\OrderManagement\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class TransportNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Transport';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\OrderManagement\Transport;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\OrderManagement\Transport();
        if (property_exists($data, 'gateId')) {
            $object->setGateId($data->{'gateId'});
        }
        if (property_exists($data, 'locationCode')) {
            $object->setLocationCode($data->{'locationCode'});
        }
        if (property_exists($data, 'stationName')) {
            $object->setStationName($data->{'stationName'});
        }
        if (property_exists($data, 'terminalName')) {
            $object->setTerminalName($data->{'terminalName'});
        }
        if (property_exists($data, 'scheduledDateTime')) {
            $object->setScheduledDateTime(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'scheduledDateTime'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getGateId()) {
            $data->{'gateId'} = $object->getGateId();
        }
        if (null !== $object->getLocationCode()) {
            $data->{'locationCode'} = $object->getLocationCode();
        }
        if (null !== $object->getStationName()) {
            $data->{'stationName'} = $object->getStationName();
        }
        if (null !== $object->getTerminalName()) {
            $data->{'terminalName'} = $object->getTerminalName();
        }
        if (null !== $object->getScheduledDateTime()) {
            $data->{'scheduledDateTime'} = $object->getScheduledDateTime()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
