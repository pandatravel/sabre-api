<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\OrderManagement\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class LegNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Leg';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\OrderManagement\Leg;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\OrderManagement\Leg();
        if (property_exists($data, 'operatingCarrier')) {
            $object->setOperatingCarrier($this->denormalizer->denormalize($data->{'operatingCarrier'}, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Carrier', 'json', $context));
        }
        if (property_exists($data, 'marketingCarrier')) {
            $object->setMarketingCarrier($this->denormalizer->denormalize($data->{'marketingCarrier'}, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Carrier', 'json', $context));
        }
        if (property_exists($data, 'departureDateTime')) {
            $object->setDepartureDateTime(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'departureDateTime'}));
        }
        if (property_exists($data, 'arrivalDateTime')) {
            $object->setArrivalDateTime(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'arrivalDateTime'}));
        }
        if (property_exists($data, 'departureAirport')) {
            $object->setDepartureAirport($data->{'departureAirport'});
        }
        if (property_exists($data, 'arrivalAirport')) {
            $object->setArrivalAirport($data->{'arrivalAirport'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getOperatingCarrier()) {
            $data->{'operatingCarrier'} = $this->normalizer->normalize($object->getOperatingCarrier(), 'json', $context);
        }
        if (null !== $object->getMarketingCarrier()) {
            $data->{'marketingCarrier'} = $this->normalizer->normalize($object->getMarketingCarrier(), 'json', $context);
        }
        if (null !== $object->getDepartureDateTime()) {
            $data->{'departureDateTime'} = $object->getDepartureDateTime()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getArrivalDateTime()) {
            $data->{'arrivalDateTime'} = $object->getArrivalDateTime()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getDepartureAirport()) {
            $data->{'departureAirport'} = $object->getDepartureAirport();
        }
        if (null !== $object->getArrivalAirport()) {
            $data->{'arrivalAirport'} = $object->getArrivalAirport();
        }

        return $data;
    }
}
