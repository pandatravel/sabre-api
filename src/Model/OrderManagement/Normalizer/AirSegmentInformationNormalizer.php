<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\OrderManagement\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AirSegmentInformationNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\OrderManagement\\AirSegmentInformation';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\OrderManagement\AirSegmentInformation;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\OrderManagement\AirSegmentInformation();
        if (property_exists($data, 'departureAirport')) {
            $object->setDepartureAirport($data->{'departureAirport'});
        }
        if (property_exists($data, 'arrivalAirport')) {
            $object->setArrivalAirport($data->{'arrivalAirport'});
        }
        if (property_exists($data, 'marketingAirlineCode')) {
            $object->setMarketingAirlineCode($data->{'marketingAirlineCode'});
        }
        if (property_exists($data, 'departureTime')) {
            $object->setDepartureTime(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'departureTime'}));
        }
        if (property_exists($data, 'arrivalTime')) {
            $object->setArrivalTime(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'arrivalTime'}));
        }
        if (property_exists($data, 'flightNumber')) {
            $object->setFlightNumber($data->{'flightNumber'});
        }
        if (property_exists($data, 'classOfService')) {
            $object->setClassOfService($data->{'classOfService'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getDepartureAirport()) {
            $data->{'departureAirport'} = $object->getDepartureAirport();
        }
        if (null !== $object->getArrivalAirport()) {
            $data->{'arrivalAirport'} = $object->getArrivalAirport();
        }
        if (null !== $object->getMarketingAirlineCode()) {
            $data->{'marketingAirlineCode'} = $object->getMarketingAirlineCode();
        }
        if (null !== $object->getDepartureTime()) {
            $data->{'departureTime'} = $object->getDepartureTime()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getArrivalTime()) {
            $data->{'arrivalTime'} = $object->getArrivalTime()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getFlightNumber()) {
            $data->{'flightNumber'} = $object->getFlightNumber();
        }
        if (null !== $object->getClassOfService()) {
            $data->{'classOfService'} = $object->getClassOfService();
        }

        return $data;
    }
}
