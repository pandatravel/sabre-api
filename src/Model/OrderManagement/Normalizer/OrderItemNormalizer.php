<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\OrderManagement\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrderItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\OrderManagement\\OrderItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\OrderManagement\OrderItem;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\OrderManagement\OrderItem();
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'validatingCarrierCode')) {
            $object->setValidatingCarrierCode($data->{'validatingCarrierCode'});
        }
        if (property_exists($data, 'externalId')) {
            $object->setExternalId($data->{'externalId'});
        }
        if (property_exists($data, 'externalOrderRefId')) {
            $object->setExternalOrderRefId($data->{'externalOrderRefId'});
        }
        if (property_exists($data, 'productRefIds')) {
            $values = [];
            foreach ($data->{'productRefIds'} as $value) {
                $values[] = $value;
            }
            $object->setProductRefIds($values);
        }
        if (property_exists($data, 'statusCode')) {
            $object->setStatusCode($data->{'statusCode'});
        }
        if (property_exists($data, 'creationDateTime')) {
            $object->setCreationDateTime(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'creationDateTime'}));
        }
        if (property_exists($data, 'ticketingTimeLimit')) {
            $object->setTicketingTimeLimit(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'ticketingTimeLimit'}));
        }
        if (property_exists($data, 'fareDetails')) {
            $values_1 = [];
            foreach ($data->{'fareDetails'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\FareDetail', 'json', $context);
            }
            $object->setFareDetails($values_1);
        }
        if (property_exists($data, 'price')) {
            $object->setPrice($this->denormalizer->denormalize($data->{'price'}, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Price', 'json', $context));
        }
        if (property_exists($data, 'services')) {
            $values_2 = [];
            foreach ($data->{'services'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Service', 'json', $context);
            }
            $object->setServices($values_2);
        }
        if (property_exists($data, 'offerItemId')) {
            $object->setOfferItemId($data->{'offerItemId'});
        }
        if (property_exists($data, 'externalOfferItemId')) {
            $object->setExternalOfferItemId($data->{'externalOfferItemId'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getValidatingCarrierCode()) {
            $data->{'validatingCarrierCode'} = $object->getValidatingCarrierCode();
        }
        if (null !== $object->getExternalId()) {
            $data->{'externalId'} = $object->getExternalId();
        }
        if (null !== $object->getExternalOrderRefId()) {
            $data->{'externalOrderRefId'} = $object->getExternalOrderRefId();
        }
        if (null !== $object->getProductRefIds()) {
            $values = [];
            foreach ($object->getProductRefIds() as $value) {
                $values[] = $value;
            }
            $data->{'productRefIds'} = $values;
        }
        if (null !== $object->getStatusCode()) {
            $data->{'statusCode'} = $object->getStatusCode();
        }
        if (null !== $object->getCreationDateTime()) {
            $data->{'creationDateTime'} = $object->getCreationDateTime()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getTicketingTimeLimit()) {
            $data->{'ticketingTimeLimit'} = $object->getTicketingTimeLimit()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getFareDetails()) {
            $values_1 = [];
            foreach ($object->getFareDetails() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'fareDetails'} = $values_1;
        }
        if (null !== $object->getPrice()) {
            $data->{'price'} = $this->normalizer->normalize($object->getPrice(), 'json', $context);
        }
        if (null !== $object->getServices()) {
            $values_2 = [];
            foreach ($object->getServices() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'services'} = $values_2;
        }
        if (null !== $object->getOfferItemId()) {
            $data->{'offerItemId'} = $object->getOfferItemId();
        }
        if (null !== $object->getExternalOfferItemId()) {
            $data->{'externalOfferItemId'} = $object->getExternalOfferItemId();
        }

        return $data;
    }
}
