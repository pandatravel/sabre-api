<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\OrderManagement\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ExternalOrderNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\OrderManagement\\ExternalOrder';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\OrderManagement\ExternalOrder;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\OrderManagement\ExternalOrder();
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'systemId')) {
            $object->setSystemId($data->{'systemId'});
        }
        if (property_exists($data, 'externalOrderId')) {
            $object->setExternalOrderId($data->{'externalOrderId'});
        }
        if (property_exists($data, 'externalOrderCreateDateTime')) {
            $object->setExternalOrderCreateDateTime($data->{'externalOrderCreateDateTime'});
        }
        if (property_exists($data, 'bookingReferences')) {
            $values = [];
            foreach ($data->{'bookingReferences'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\BookingReference', 'json', $context);
            }
            $object->setBookingReferences($values);
        }
        if (property_exists($data, 'totalPrice')) {
            $object->setTotalPrice($this->denormalizer->denormalize($data->{'totalPrice'}, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Price', 'json', $context));
        }
        if (property_exists($data, 'airSegmentInformations')) {
            $values_1 = [];
            foreach ($data->{'airSegmentInformations'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\AirSegmentInformation', 'json', $context);
            }
            $object->setAirSegmentInformations($values_1);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getSystemId()) {
            $data->{'systemId'} = $object->getSystemId();
        }
        if (null !== $object->getExternalOrderId()) {
            $data->{'externalOrderId'} = $object->getExternalOrderId();
        }
        if (null !== $object->getExternalOrderCreateDateTime()) {
            $data->{'externalOrderCreateDateTime'} = $object->getExternalOrderCreateDateTime();
        }
        if (null !== $object->getBookingReferences()) {
            $values = [];
            foreach ($object->getBookingReferences() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'bookingReferences'} = $values;
        }
        if (null !== $object->getTotalPrice()) {
            $data->{'totalPrice'} = $this->normalizer->normalize($object->getTotalPrice(), 'json', $context);
        }
        if (null !== $object->getAirSegmentInformations()) {
            $values_1 = [];
            foreach ($object->getAirSegmentInformations() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'airSegmentInformations'} = $values_1;
        }

        return $data;
    }
}
