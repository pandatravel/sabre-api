<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\OrderManagement\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CarrierFlightInfoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\OrderManagement\\CarrierFlightInfo';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\OrderManagement\CarrierFlightInfo;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\OrderManagement\CarrierFlightInfo();
        if (property_exists($data, 'carrierCode')) {
            $object->setCarrierCode($data->{'carrierCode'});
        }
        if (property_exists($data, 'carrierName')) {
            $object->setCarrierName($data->{'carrierName'});
        }
        if (property_exists($data, 'flightNumber')) {
            $object->setFlightNumber($data->{'flightNumber'});
        }
        if (property_exists($data, 'classOfService')) {
            $object->setClassOfService($data->{'classOfService'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getCarrierCode()) {
            $data->{'carrierCode'} = $object->getCarrierCode();
        }
        if (null !== $object->getCarrierName()) {
            $data->{'carrierName'} = $object->getCarrierName();
        }
        if (null !== $object->getFlightNumber()) {
            $data->{'flightNumber'} = $object->getFlightNumber();
        }
        if (null !== $object->getClassOfService()) {
            $data->{'classOfService'} = $object->getClassOfService();
        }

        return $data;
    }
}
