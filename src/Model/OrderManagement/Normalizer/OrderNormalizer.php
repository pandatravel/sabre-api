<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\OrderManagement\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrderNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Order';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\OrderManagement\Order;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\OrderManagement\Order();
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'pnrLocator')) {
            $object->setPnrLocator($data->{'pnrLocator'});
        }
        if (property_exists($data, 'orderOwner')) {
            $object->setOrderOwner($data->{'orderOwner'});
        }
        if (property_exists($data, 'orderItems')) {
            $values = [];
            foreach ($data->{'orderItems'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\OrderItem', 'json', $context);
            }
            $object->setOrderItems($values);
        }
        if (property_exists($data, 'contactInfos')) {
            $values_1 = [];
            foreach ($data->{'contactInfos'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\ContactInfo', 'json', $context);
            }
            $object->setContactInfos($values_1);
        }
        if (property_exists($data, 'products')) {
            $values_2 = [];
            foreach ($data->{'products'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Product', 'json', $context);
            }
            $object->setProducts($values_2);
        }
        if (property_exists($data, 'passengers')) {
            $values_3 = [];
            foreach ($data->{'passengers'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Passenger', 'json', $context);
            }
            $object->setPassengers($values_3);
        }
        if (property_exists($data, 'journeys')) {
            $values_4 = [];
            foreach ($data->{'journeys'} as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Journey', 'json', $context);
            }
            $object->setJourneys($values_4);
        }
        if (property_exists($data, 'segments')) {
            $values_5 = [];
            foreach ($data->{'segments'} as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Segment', 'json', $context);
            }
            $object->setSegments($values_5);
        }
        if (property_exists($data, 'priceClasses')) {
            $values_6 = [];
            foreach ($data->{'priceClasses'} as $value_6) {
                $values_6[] = $this->denormalizer->denormalize($value_6, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\PriceClass', 'json', $context);
            }
            $object->setPriceClasses($values_6);
        }
        if (property_exists($data, 'customerNumber')) {
            $object->setCustomerNumber($this->denormalizer->denormalize($data->{'customerNumber'}, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\CustomerNumber', 'json', $context));
        }
        if (property_exists($data, 'paymentTimeLimit')) {
            $object->setPaymentTimeLimit(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'paymentTimeLimit'}));
        }
        if (property_exists($data, 'externalOrders')) {
            $values_7 = [];
            foreach ($data->{'externalOrders'} as $value_7) {
                $values_7[] = $this->denormalizer->denormalize($value_7, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\ExternalOrder', 'json', $context);
            }
            $object->setExternalOrders($values_7);
        }
        if (property_exists($data, 'ticketingDocumentInfo')) {
            $values_8 = [];
            foreach ($data->{'ticketingDocumentInfo'} as $value_8) {
                $values_8[] = $this->denormalizer->denormalize($value_8, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\TicketingDocumentInfo', 'json', $context);
            }
            $object->setTicketingDocumentInfo($values_8);
        }
        if (property_exists($data, 'totalPrice')) {
            $object->setTotalPrice($this->denormalizer->denormalize($data->{'totalPrice'}, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Price', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getPnrLocator()) {
            $data->{'pnrLocator'} = $object->getPnrLocator();
        }
        if (null !== $object->getOrderOwner()) {
            $data->{'orderOwner'} = $object->getOrderOwner();
        }
        if (null !== $object->getOrderItems()) {
            $values = [];
            foreach ($object->getOrderItems() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'orderItems'} = $values;
        }
        if (null !== $object->getContactInfos()) {
            $values_1 = [];
            foreach ($object->getContactInfos() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'contactInfos'} = $values_1;
        }
        if (null !== $object->getProducts()) {
            $values_2 = [];
            foreach ($object->getProducts() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'products'} = $values_2;
        }
        if (null !== $object->getPassengers()) {
            $values_3 = [];
            foreach ($object->getPassengers() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'passengers'} = $values_3;
        }
        if (null !== $object->getJourneys()) {
            $values_4 = [];
            foreach ($object->getJourneys() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $data->{'journeys'} = $values_4;
        }
        if (null !== $object->getSegments()) {
            $values_5 = [];
            foreach ($object->getSegments() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $data->{'segments'} = $values_5;
        }
        if (null !== $object->getPriceClasses()) {
            $values_6 = [];
            foreach ($object->getPriceClasses() as $value_6) {
                $values_6[] = $this->normalizer->normalize($value_6, 'json', $context);
            }
            $data->{'priceClasses'} = $values_6;
        }
        if (null !== $object->getCustomerNumber()) {
            $data->{'customerNumber'} = $this->normalizer->normalize($object->getCustomerNumber(), 'json', $context);
        }
        if (null !== $object->getPaymentTimeLimit()) {
            $data->{'paymentTimeLimit'} = $object->getPaymentTimeLimit()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getExternalOrders()) {
            $values_7 = [];
            foreach ($object->getExternalOrders() as $value_7) {
                $values_7[] = $this->normalizer->normalize($value_7, 'json', $context);
            }
            $data->{'externalOrders'} = $values_7;
        }
        if (null !== $object->getTicketingDocumentInfo()) {
            $values_8 = [];
            foreach ($object->getTicketingDocumentInfo() as $value_8) {
                $values_8[] = $this->normalizer->normalize($value_8, 'json', $context);
            }
            $data->{'ticketingDocumentInfo'} = $values_8;
        }
        if (null !== $object->getTotalPrice()) {
            $data->{'totalPrice'} = $this->normalizer->normalize($object->getTotalPrice(), 'json', $context);
        }

        return $data;
    }
}
