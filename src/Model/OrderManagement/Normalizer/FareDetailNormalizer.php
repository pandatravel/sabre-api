<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\OrderManagement\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class FareDetailNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\OrderManagement\\FareDetail';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\OrderManagement\FareDetail;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\OrderManagement\FareDetail();
        if (property_exists($data, 'filedFareInd')) {
            $object->setFiledFareInd($data->{'filedFareInd'});
        }
        if (property_exists($data, 'fareIndicatorCode')) {
            $object->setFareIndicatorCode($data->{'fareIndicatorCode'});
        }
        if (property_exists($data, 'tourCode')) {
            $object->setTourCode($data->{'tourCode'});
        }
        if (property_exists($data, 'paxRefIds')) {
            $values = [];
            foreach ($data->{'paxRefIds'} as $value) {
                $values[] = $value;
            }
            $object->setPaxRefIds($values);
        }
        if (property_exists($data, 'price')) {
            $object->setPrice($this->denormalizer->denormalize($data->{'price'}, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Price', 'json', $context));
        }
        if (property_exists($data, 'commissionAmount')) {
            $object->setCommissionAmount($this->denormalizer->denormalize($data->{'commissionAmount'}, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\AmountCurrency', 'json', $context));
        }
        if (property_exists($data, 'commissionPercentage')) {
            $object->setCommissionPercentage($data->{'commissionPercentage'});
        }
        if (property_exists($data, 'commissionSource')) {
            $object->setCommissionSource($data->{'commissionSource'});
        }
        if (property_exists($data, 'fareComponents')) {
            $values_1 = [];
            foreach ($data->{'fareComponents'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\FareComponent', 'json', $context);
            }
            $object->setFareComponents($values_1);
        }
        if (property_exists($data, 'remarks')) {
            $values_2 = [];
            foreach ($data->{'remarks'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\FareRemark', 'json', $context);
            }
            $object->setRemarks($values_2);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getFiledFareInd()) {
            $data->{'filedFareInd'} = $object->getFiledFareInd();
        }
        if (null !== $object->getFareIndicatorCode()) {
            $data->{'fareIndicatorCode'} = $object->getFareIndicatorCode();
        }
        if (null !== $object->getTourCode()) {
            $data->{'tourCode'} = $object->getTourCode();
        }
        if (null !== $object->getPaxRefIds()) {
            $values = [];
            foreach ($object->getPaxRefIds() as $value) {
                $values[] = $value;
            }
            $data->{'paxRefIds'} = $values;
        }
        if (null !== $object->getPrice()) {
            $data->{'price'} = $this->normalizer->normalize($object->getPrice(), 'json', $context);
        }
        if (null !== $object->getCommissionAmount()) {
            $data->{'commissionAmount'} = $this->normalizer->normalize($object->getCommissionAmount(), 'json', $context);
        }
        if (null !== $object->getCommissionPercentage()) {
            $data->{'commissionPercentage'} = $object->getCommissionPercentage();
        }
        if (null !== $object->getCommissionSource()) {
            $data->{'commissionSource'} = $object->getCommissionSource();
        }
        if (null !== $object->getFareComponents()) {
            $values_1 = [];
            foreach ($object->getFareComponents() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'fareComponents'} = $values_1;
        }
        if (null !== $object->getRemarks()) {
            $values_2 = [];
            foreach ($object->getRemarks() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'remarks'} = $values_2;
        }

        return $data;
    }
}
