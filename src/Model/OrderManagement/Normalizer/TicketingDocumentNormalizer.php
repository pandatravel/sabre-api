<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\OrderManagement\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class TicketingDocumentNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\OrderManagement\\TicketingDocument';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\OrderManagement\TicketingDocument;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\OrderManagement\TicketingDocument();
        if (property_exists($data, 'number')) {
            $object->setNumber($data->{'number'});
        }
        if (property_exists($data, 'type')) {
            $object->setType($data->{'type'});
        }
        if (property_exists($data, 'issueDateTime')) {
            $object->setIssueDateTime(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'issueDateTime'}));
        }
        if (property_exists($data, 'ticketingLocation')) {
            $object->setTicketingLocation($data->{'ticketingLocation'});
        }
        if (property_exists($data, 'numberOfBooklets')) {
            $object->setNumberOfBooklets($data->{'numberOfBooklets'});
        }
        if (property_exists($data, 'routingCode')) {
            $object->setRoutingCode($data->{'routingCode'});
        }
        if (property_exists($data, 'reportingType')) {
            $object->setReportingType($data->{'reportingType'});
        }
        if (property_exists($data, 'primaryDocumentInd')) {
            $object->setPrimaryDocumentInd($data->{'primaryDocumentInd'});
        }
        if (property_exists($data, 'inConnectionDocumentNumber')) {
            $object->setInConnectionDocumentNumber($data->{'inConnectionDocumentNumber'});
        }
        if (property_exists($data, 'coupons')) {
            $values = [];
            foreach ($data->{'coupons'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\TicketingDocumentCoupon', 'json', $context);
            }
            $object->setCoupons($values);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getNumber()) {
            $data->{'number'} = $object->getNumber();
        }
        if (null !== $object->getType()) {
            $data->{'type'} = $object->getType();
        }
        if (null !== $object->getIssueDateTime()) {
            $data->{'issueDateTime'} = $object->getIssueDateTime()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getTicketingLocation()) {
            $data->{'ticketingLocation'} = $object->getTicketingLocation();
        }
        if (null !== $object->getNumberOfBooklets()) {
            $data->{'numberOfBooklets'} = $object->getNumberOfBooklets();
        }
        if (null !== $object->getRoutingCode()) {
            $data->{'routingCode'} = $object->getRoutingCode();
        }
        if (null !== $object->getReportingType()) {
            $data->{'reportingType'} = $object->getReportingType();
        }
        if (null !== $object->getPrimaryDocumentInd()) {
            $data->{'primaryDocumentInd'} = $object->getPrimaryDocumentInd();
        }
        if (null !== $object->getInConnectionDocumentNumber()) {
            $data->{'inConnectionDocumentNumber'} = $object->getInConnectionDocumentNumber();
        }
        if (null !== $object->getCoupons()) {
            $values = [];
            foreach ($object->getCoupons() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'coupons'} = $values;
        }

        return $data;
    }
}
