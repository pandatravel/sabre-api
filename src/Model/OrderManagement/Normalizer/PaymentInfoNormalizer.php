<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\OrderManagement\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PaymentInfoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\OrderManagement\\PaymentInfo';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\OrderManagement\PaymentInfo;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\OrderManagement\PaymentInfo();
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'amount')) {
            $object->setAmount($this->denormalizer->denormalize($data->{'amount'}, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\AmountCurrency', 'json', $context));
        }
        if (property_exists($data, 'paymentMethod')) {
            $object->setPaymentMethod($this->denormalizer->denormalize($data->{'paymentMethod'}, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\PaymentMethod', 'json', $context));
        }
        if (property_exists($data, 'orderItemRefIds')) {
            $values = [];
            foreach ($data->{'orderItemRefIds'} as $value) {
                $values[] = $value;
            }
            $object->setOrderItemRefIds($values);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getAmount()) {
            $data->{'amount'} = $this->normalizer->normalize($object->getAmount(), 'json', $context);
        }
        if (null !== $object->getPaymentMethod()) {
            $data->{'paymentMethod'} = $this->normalizer->normalize($object->getPaymentMethod(), 'json', $context);
        }
        if (null !== $object->getOrderItemRefIds()) {
            $values = [];
            foreach ($object->getOrderItemRefIds() as $value) {
                $values[] = $value;
            }
            $data->{'orderItemRefIds'} = $values;
        }

        return $data;
    }
}
