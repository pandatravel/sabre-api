<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\OrderManagement\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PassengerNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Passenger';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\OrderManagement\Passenger;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\OrderManagement\Passenger();
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'typeCode')) {
            $object->setTypeCode($data->{'typeCode'});
        }
        if (property_exists($data, 'contactInfoRefId')) {
            $object->setContactInfoRefId($data->{'contactInfoRefId'});
        }
        if (property_exists($data, 'age')) {
            $object->setAge($data->{'age'});
        }
        if (property_exists($data, 'ageUnitCode')) {
            $object->setAgeUnitCode($data->{'ageUnitCode'});
        }
        if (property_exists($data, 'birthdate')) {
            $object->setBirthdate($data->{'birthdate'});
        }
        if (property_exists($data, 'titleName')) {
            $object->setTitleName($data->{'titleName'});
        }
        if (property_exists($data, 'givenName')) {
            $object->setGivenName($data->{'givenName'});
        }
        if (property_exists($data, 'middleName')) {
            $object->setMiddleName($data->{'middleName'});
        }
        if (property_exists($data, 'surname')) {
            $object->setSurname($data->{'surname'});
        }
        if (property_exists($data, 'suffixName')) {
            $object->setSuffixName($data->{'suffixName'});
        }
        if (property_exists($data, 'genderCode')) {
            $object->setGenderCode($data->{'genderCode'});
        }
        if (property_exists($data, 'remarks')) {
            $values = [];
            foreach ($data->{'remarks'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\Remark', 'json', $context);
            }
            $object->setRemarks($values);
        }
        if (property_exists($data, 'identityDocuments')) {
            $values_1 = [];
            foreach ($data->{'identityDocuments'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\IdentityDocument', 'json', $context);
            }
            $object->setIdentityDocuments($values_1);
        }
        if (property_exists($data, 'loyaltyProgramAccounts')) {
            $values_2 = [];
            foreach ($data->{'loyaltyProgramAccounts'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\OrderManagement\\LoyaltyProgramAccount', 'json', $context);
            }
            $object->setLoyaltyProgramAccounts($values_2);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getTypeCode()) {
            $data->{'typeCode'} = $object->getTypeCode();
        }
        if (null !== $object->getContactInfoRefId()) {
            $data->{'contactInfoRefId'} = $object->getContactInfoRefId();
        }
        if (null !== $object->getAge()) {
            $data->{'age'} = $object->getAge();
        }
        if (null !== $object->getAgeUnitCode()) {
            $data->{'ageUnitCode'} = $object->getAgeUnitCode();
        }
        if (null !== $object->getBirthdate()) {
            $data->{'birthdate'} = $object->getBirthdate();
        }
        if (null !== $object->getTitleName()) {
            $data->{'titleName'} = $object->getTitleName();
        }
        if (null !== $object->getGivenName()) {
            $data->{'givenName'} = $object->getGivenName();
        }
        if (null !== $object->getMiddleName()) {
            $data->{'middleName'} = $object->getMiddleName();
        }
        if (null !== $object->getSurname()) {
            $data->{'surname'} = $object->getSurname();
        }
        if (null !== $object->getSuffixName()) {
            $data->{'suffixName'} = $object->getSuffixName();
        }
        if (null !== $object->getGenderCode()) {
            $data->{'genderCode'} = $object->getGenderCode();
        }
        if (null !== $object->getRemarks()) {
            $values = [];
            foreach ($object->getRemarks() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'remarks'} = $values;
        }
        if (null !== $object->getIdentityDocuments()) {
            $values_1 = [];
            foreach ($object->getIdentityDocuments() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'identityDocuments'} = $values_1;
        }
        if (null !== $object->getLoyaltyProgramAccounts()) {
            $values_2 = [];
            foreach ($object->getLoyaltyProgramAccounts() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'loyaltyProgramAccounts'} = $values_2;
        }

        return $data;
    }
}
