<?php

namespace Ammonkc\SabreApi\Model\OrderManagement;

use Ammonkc\SabreApi\AbstractModel;

class TicketingDocumentCoupon extends AbstractModel
{
    /**
     * The coupon number.
     *
     * @var int
     */
    protected $number;
    /**
     * The current coupon status code based on [IATA PADIS](https://www.iata.org/whatwedo/workgroups/Pages/padis.aspx) Codeset 4405.
     *
     * @var string
     */
    protected $status;
    /**
     * If true, the coupon is consumed at issuance.
     *
     * @var bool
     */
    protected $consumedAtIssuanceInd;
    /**
     * Reference to the `Service` the coupon is associated with.
     *
     * @var string
     */
    protected $serviceRefId;
    /**
     * The settlement authorization code is generated by the validating carrier authorizing settlement of the coupon.
     *
     * @var string
     */
    protected $settlementAuthCode;
    /**
     * Connected document number.
     *
     * @var string
     */
    protected $inConnectionDocumentNumber;
    /**
     * Connected document coupon number.
     *
     * @var string
     */
    protected $inConnectionCouponNumber;
    /**
     * Name of the provider of the service.
     *
     * @var string
     */
    protected $presentTo;
    /**
     * Location of the provider of the service.
     *
     * @var string
     */
    protected $presentAt;
    /**
     * Ancillary service code.
     *
     * @var string
     */
    protected $serviceCode;
    /**
     * Ancillary service RFCI, follows [IATA PADIS](https://www.iata.org/whatwedo/workgroups/Pages/padis.aspx) Codeset 4183.
     *
     * @var string
     */
    protected $reasonForIssuanceCode;
    /**
     * Ancillary service code based on Reason For Issuance Sub Codes (RFISC).
     *
     * @var string
     */
    protected $reasonForIssuanceSubCode;

    /**
     * The coupon number.
     *
     * @return int
     */
    public function getNumber(): ?int
    {
        return $this->number;
    }

    /**
     * The coupon number.
     *
     * @param int $number
     *
     * @return self
     */
    public function setNumber(?int $number): self
    {
        $this->number = $number;

        return $this;
    }

    /**
     * The current coupon status code based on [IATA PADIS](https://www.iata.org/whatwedo/workgroups/Pages/padis.aspx) Codeset 4405.
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * The current coupon status code based on [IATA PADIS](https://www.iata.org/whatwedo/workgroups/Pages/padis.aspx) Codeset 4405.
     *
     * @param string $status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * If true, the coupon is consumed at issuance.
     *
     * @return bool
     */
    public function getConsumedAtIssuanceInd(): ?bool
    {
        return $this->consumedAtIssuanceInd;
    }

    /**
     * If true, the coupon is consumed at issuance.
     *
     * @param bool $consumedAtIssuanceInd
     *
     * @return self
     */
    public function setConsumedAtIssuanceInd(?bool $consumedAtIssuanceInd): self
    {
        $this->consumedAtIssuanceInd = $consumedAtIssuanceInd;

        return $this;
    }

    /**
     * Reference to the `Service` the coupon is associated with.
     *
     * @return string
     */
    public function getServiceRefId(): ?string
    {
        return $this->serviceRefId;
    }

    /**
     * Reference to the `Service` the coupon is associated with.
     *
     * @param string $serviceRefId
     *
     * @return self
     */
    public function setServiceRefId(?string $serviceRefId): self
    {
        $this->serviceRefId = $serviceRefId;

        return $this;
    }

    /**
     * The settlement authorization code is generated by the validating carrier authorizing settlement of the coupon.
     *
     * @return string
     */
    public function getSettlementAuthCode(): ?string
    {
        return $this->settlementAuthCode;
    }

    /**
     * The settlement authorization code is generated by the validating carrier authorizing settlement of the coupon.
     *
     * @param string $settlementAuthCode
     *
     * @return self
     */
    public function setSettlementAuthCode(?string $settlementAuthCode): self
    {
        $this->settlementAuthCode = $settlementAuthCode;

        return $this;
    }

    /**
     * Connected document number.
     *
     * @return string
     */
    public function getInConnectionDocumentNumber(): ?string
    {
        return $this->inConnectionDocumentNumber;
    }

    /**
     * Connected document number.
     *
     * @param string $inConnectionDocumentNumber
     *
     * @return self
     */
    public function setInConnectionDocumentNumber(?string $inConnectionDocumentNumber): self
    {
        $this->inConnectionDocumentNumber = $inConnectionDocumentNumber;

        return $this;
    }

    /**
     * Connected document coupon number.
     *
     * @return string
     */
    public function getInConnectionCouponNumber(): ?string
    {
        return $this->inConnectionCouponNumber;
    }

    /**
     * Connected document coupon number.
     *
     * @param string $inConnectionCouponNumber
     *
     * @return self
     */
    public function setInConnectionCouponNumber(?string $inConnectionCouponNumber): self
    {
        $this->inConnectionCouponNumber = $inConnectionCouponNumber;

        return $this;
    }

    /**
     * Name of the provider of the service.
     *
     * @return string
     */
    public function getPresentTo(): ?string
    {
        return $this->presentTo;
    }

    /**
     * Name of the provider of the service.
     *
     * @param string $presentTo
     *
     * @return self
     */
    public function setPresentTo(?string $presentTo): self
    {
        $this->presentTo = $presentTo;

        return $this;
    }

    /**
     * Location of the provider of the service.
     *
     * @return string
     */
    public function getPresentAt(): ?string
    {
        return $this->presentAt;
    }

    /**
     * Location of the provider of the service.
     *
     * @param string $presentAt
     *
     * @return self
     */
    public function setPresentAt(?string $presentAt): self
    {
        $this->presentAt = $presentAt;

        return $this;
    }

    /**
     * Ancillary service code.
     *
     * @return string
     */
    public function getServiceCode(): ?string
    {
        return $this->serviceCode;
    }

    /**
     * Ancillary service code.
     *
     * @param string $serviceCode
     *
     * @return self
     */
    public function setServiceCode(?string $serviceCode): self
    {
        $this->serviceCode = $serviceCode;

        return $this;
    }

    /**
     * Ancillary service RFCI, follows [IATA PADIS](https://www.iata.org/whatwedo/workgroups/Pages/padis.aspx) Codeset 4183.
     *
     * @return string
     */
    public function getReasonForIssuanceCode(): ?string
    {
        return $this->reasonForIssuanceCode;
    }

    /**
     * Ancillary service RFCI, follows [IATA PADIS](https://www.iata.org/whatwedo/workgroups/Pages/padis.aspx) Codeset 4183.
     *
     * @param string $reasonForIssuanceCode
     *
     * @return self
     */
    public function setReasonForIssuanceCode(?string $reasonForIssuanceCode): self
    {
        $this->reasonForIssuanceCode = $reasonForIssuanceCode;

        return $this;
    }

    /**
     * Ancillary service code based on Reason For Issuance Sub Codes (RFISC).
     *
     * @return string
     */
    public function getReasonForIssuanceSubCode(): ?string
    {
        return $this->reasonForIssuanceSubCode;
    }

    /**
     * Ancillary service code based on Reason For Issuance Sub Codes (RFISC).
     *
     * @param string $reasonForIssuanceSubCode
     *
     * @return self
     */
    public function setReasonForIssuanceSubCode(?string $reasonForIssuanceSubCode): self
    {
        $this->reasonForIssuanceSubCode = $reasonForIssuanceSubCode;

        return $this;
    }
}
