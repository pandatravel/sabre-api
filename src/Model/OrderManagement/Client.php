<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\OrderManagement;

class Client extends \Jane\OpenApiRuntime\Client\Psr7HttplugClient
{
    /**
     * Views a single order.
     *
     * @param \Ammonkc\SabreApi\Model\OrderManagement\OrderViewRequest $orderViewRequest views a specified order by ID
     * @param string                                                         $fetch            Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Ammonkc\SabreApi\Model\OrderManagement\OrderViewResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function viewOrder(\Ammonkc\SabreApi\Model\OrderManagement\OrderViewRequest $orderViewRequest, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Ammonkc\SabreApi\Model\OrderManagement\Endpoint\ViewOrder($orderViewRequest), $fetch);
    }

    /**
     * Fulfills an order.
     *
     * @param \Ammonkc\SabreApi\Model\OrderManagement\OrderChangeRequest $orderChangeRequest fulfills an order
     * @param string                                                           $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Ammonkc\SabreApi\Model\OrderManagement\Exception\ChangeOrderBadRequestException
     *
     * @return \Ammonkc\SabreApi\Model\OrderManagement\OrderChangeResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function changeOrder(\Ammonkc\SabreApi\Model\OrderManagement\OrderChangeRequest $orderChangeRequest, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Ammonkc\SabreApi\Model\OrderManagement\Endpoint\ChangeOrder($orderChangeRequest), $fetch);
    }

    /**
     * Creates an order.
     *
     * @param \Ammonkc\SabreApi\Model\OrderManagement\OrderCreateRequest $orderCreateRequest creates an order
     * @param string                                                           $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Ammonkc\SabreApi\Model\OrderManagement\Exception\CreateOrderBadRequestException
     *
     * @return \Ammonkc\SabreApi\Model\OrderManagement\OrderCreateResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function createOrder(\Ammonkc\SabreApi\Model\OrderManagement\OrderCreateRequest $orderCreateRequest, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Ammonkc\SabreApi\Model\OrderManagement\Endpoint\CreateOrder($orderCreateRequest), $fetch);
    }

    /**
     * Cancels a specified order, and returns confirmation of the cancellation.
     *
     * @param \Ammonkc\SabreApi\Model\OrderManagement\OrderCancelRequest $orderCancelRequest cancels a specified order
     * @param string                                                           $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Ammonkc\SabreApi\Model\OrderManagement\Exception\OrderCancelBadRequestException
     *
     * @return \Ammonkc\SabreApi\Model\OrderManagement\OrderCancelResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function orderCancel(\Ammonkc\SabreApi\Model\OrderManagement\OrderCancelRequest $orderCancelRequest, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Ammonkc\SabreApi\Model\OrderManagement\Endpoint\OrderCancel($orderCancelRequest), $fetch);
    }

    public static function create($httpClient = null)
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\HttpClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\UriFactoryDiscovery::find()->createUri('https://api-crt.cert.havail.sabre.com/');
            $plugins[] = new \Http\Client\Common\Plugin\AddPathPlugin($uri);
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $messageFactory = \Http\Discovery\MessageFactoryDiscovery::find();
        $streamFactory = \Http\Discovery\StreamFactoryDiscovery::find();
        $serializer = new \Symfony\Component\Serializer\Serializer(\Ammonkc\SabreApi\Model\OrderManagement\Normalizer\NormalizerFactory::create(), [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode())]);

        return new static($httpClient, $messageFactory, $serializer, $streamFactory);
    }
}
