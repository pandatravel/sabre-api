<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord;

use Ammonkc\SabreApi\AbstractModel;

class CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersSpecificPenaltyEitherOr extends AbstractModel
{
    /**
     * Used to specify any refundable OR changeable pricing fare options.
     *
     * @var bool
     */
    protected $any;
    /**
     * Used to specify the specific currency for either maximum refund OR change penalty.
     *
     * @var string
     */
    protected $currencyCode;
    /**
     * Used to specify the maximum refund OR change penalty.
    If a value of '0' is input no penalty is preferred.
    If a value of 'N' is input only non-changeable options are requested.
    Please note that monetary amount that includes a decimal is not allowed.

     *
     * @var string
     */
    protected $maxPenalty;
    /**
     * Used to query for before departure fees.
     *
     * @var bool
     */
    protected $beforeDeparture;
    /**
     * Used to query for after departure fees.
    It is not possible to combine 'BeforeDeparture' and 'AfterDeparture' within one object.

     *
     * @var bool
     */
    protected $afterDeparture;

    /**
     * Used to specify any refundable OR changeable pricing fare options.
     *
     * @return bool|null
     */
    public function getAny(): ?bool
    {
        return $this->any;
    }

    /**
     * Used to specify any refundable OR changeable pricing fare options.
     *
     * @param bool|null $any
     *
     * @return self
     */
    public function setAny(?bool $any): self
    {
        $this->any = $any;

        return $this;
    }

    /**
     * Used to specify the specific currency for either maximum refund OR change penalty.
     *
     * @return string|null
     */
    public function getCurrencyCode(): ?string
    {
        return $this->currencyCode;
    }

    /**
     * Used to specify the specific currency for either maximum refund OR change penalty.
     *
     * @param string|null $currencyCode
     *
     * @return self
     */
    public function setCurrencyCode(?string $currencyCode): self
    {
        $this->currencyCode = $currencyCode;

        return $this;
    }

    /**
     * Used to specify the maximum refund OR change penalty.
    If a value of '0' is input no penalty is preferred.
    If a value of 'N' is input only non-changeable options are requested.
    Please note that monetary amount that includes a decimal is not allowed.

     *
     * @return string|null
     */
    public function getMaxPenalty(): ?string
    {
        return $this->maxPenalty;
    }

    /**
     * Used to specify the maximum refund OR change penalty.
    If a value of '0' is input no penalty is preferred.
    If a value of 'N' is input only non-changeable options are requested.
    Please note that monetary amount that includes a decimal is not allowed.

     *
     * @param string|null $maxPenalty
     *
     * @return self
     */
    public function setMaxPenalty(?string $maxPenalty): self
    {
        $this->maxPenalty = $maxPenalty;

        return $this;
    }

    /**
     * Used to query for before departure fees.
     *
     * @return bool|null
     */
    public function getBeforeDeparture(): ?bool
    {
        return $this->beforeDeparture;
    }

    /**
     * Used to query for before departure fees.
     *
     * @param bool|null $beforeDeparture
     *
     * @return self
     */
    public function setBeforeDeparture(?bool $beforeDeparture): self
    {
        $this->beforeDeparture = $beforeDeparture;

        return $this;
    }

    /**
     * Used to query for after departure fees.
    It is not possible to combine 'BeforeDeparture' and 'AfterDeparture' within one object.

     *
     * @return bool|null
     */
    public function getAfterDeparture(): ?bool
    {
        return $this->afterDeparture;
    }

    /**
     * Used to query for after departure fees.
    It is not possible to combine 'BeforeDeparture' and 'AfterDeparture' within one object.

     *
     * @param bool|null $afterDeparture
     *
     * @return self
     */
    public function setAfterDeparture(?bool $afterDeparture): self
    {
        $this->afterDeparture = $afterDeparture;

        return $this;
    }
}
