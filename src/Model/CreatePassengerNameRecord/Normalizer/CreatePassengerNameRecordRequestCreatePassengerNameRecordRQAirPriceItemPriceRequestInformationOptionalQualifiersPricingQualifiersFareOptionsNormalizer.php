<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFareOptionsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFareOptions';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFareOptions;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFareOptions();
        if (property_exists($data, 'ASLBreakdown')) {
            $object->setASLBreakdown($data->{'ASLBreakdown'});
        }
        if (property_exists($data, 'ASLIgnore')) {
            $object->setASLIgnore($data->{'ASLIgnore'});
        }
        if (property_exists($data, 'Excursion')) {
            $object->setExcursion($data->{'Excursion'});
        }
        if (property_exists($data, 'HandlingFees')) {
            $object->setHandlingFees($data->{'HandlingFees'});
        }
        if (property_exists($data, 'Net')) {
            $object->setNet($data->{'Net'});
        }
        if (property_exists($data, 'Private')) {
            $object->setPrivate($data->{'Private'});
        }
        if (property_exists($data, 'Public')) {
            $object->setPublic($data->{'Public'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getASLBreakdown()) {
            $data->{'ASLBreakdown'} = $object->getASLBreakdown();
        }
        if (null !== $object->getASLIgnore()) {
            $data->{'ASLIgnore'} = $object->getASLIgnore();
        }
        if (null !== $object->getExcursion()) {
            $data->{'Excursion'} = $object->getExcursion();
        }
        if (null !== $object->getHandlingFees()) {
            $data->{'HandlingFees'} = $object->getHandlingFees();
        }
        if (null !== $object->getNet()) {
            $data->{'Net'} = $object->getNet();
        }
        if (null !== $object->getPrivate()) {
            $data->{'Private'} = $object->getPrivate();
        }
        if (null !== $object->getPublic()) {
            $data->{'Public'} = $object->getPublic();
        }

        return $data;
    }
}
