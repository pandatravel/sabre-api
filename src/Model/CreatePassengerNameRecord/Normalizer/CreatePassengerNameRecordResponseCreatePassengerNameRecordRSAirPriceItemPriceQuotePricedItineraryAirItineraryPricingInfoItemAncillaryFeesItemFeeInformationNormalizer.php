<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemAncillaryFeesItemFeeInformationNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemAncillaryFeesItemFeeInformation';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemAncillaryFeesItemFeeInformation;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemAncillaryFeesItemFeeInformation();
        if (property_exists($data, 'CreditCardFOP_MatchingBin')) {
            $object->setCreditCardFOPMatchingBin($data->{'CreditCardFOP_MatchingBin'});
        }
        if (property_exists($data, 'CreditCard_ResidualAmount')) {
            $object->setCreditCardResidualAmount($data->{'CreditCard_ResidualAmount'});
        }
        if (property_exists($data, 'MaximumServiceFeeAmount')) {
            $object->setMaximumServiceFeeAmount($data->{'MaximumServiceFeeAmount'});
        }
        if (property_exists($data, 'OB_FeeTicketTotalFareAmount')) {
            $object->setOBFeeTicketTotalFareAmount($data->{'OB_FeeTicketTotalFareAmount'});
        }
        if (property_exists($data, 'ServiceFeePercentage')) {
            $object->setServiceFeePercentage($data->{'ServiceFeePercentage'});
        }
        if (property_exists($data, 'TaxAmount')) {
            $values = [];
            foreach ($data->{'TaxAmount'} as $value) {
                $values[] = $value;
            }
            $object->setTaxAmount($values);
        }
        if (property_exists($data, 'TaxID')) {
            $values_1 = [];
            foreach ($data->{'TaxID'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setTaxID($values_1);
        }
        if (property_exists($data, 'Amount')) {
            $object->setAmount($data->{'Amount'});
        }
        if (property_exists($data, 'Code')) {
            $object->setCode($data->{'Code'});
        }
        if (property_exists($data, 'NumFees')) {
            $object->setNumFees($data->{'NumFees'});
        }
        if (property_exists($data, 'NameNumber')) {
            $object->setNameNumber($data->{'NameNumber'});
        }
        if (property_exists($data, 'SegmentNumber')) {
            $object->setSegmentNumber($data->{'SegmentNumber'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getCreditCardFOPMatchingBin()) {
            $data->{'CreditCardFOP_MatchingBin'} = $object->getCreditCardFOPMatchingBin();
        }
        if (null !== $object->getCreditCardResidualAmount()) {
            $data->{'CreditCard_ResidualAmount'} = $object->getCreditCardResidualAmount();
        }
        if (null !== $object->getMaximumServiceFeeAmount()) {
            $data->{'MaximumServiceFeeAmount'} = $object->getMaximumServiceFeeAmount();
        }
        if (null !== $object->getOBFeeTicketTotalFareAmount()) {
            $data->{'OB_FeeTicketTotalFareAmount'} = $object->getOBFeeTicketTotalFareAmount();
        }
        if (null !== $object->getServiceFeePercentage()) {
            $data->{'ServiceFeePercentage'} = $object->getServiceFeePercentage();
        }
        if (null !== $object->getTaxAmount()) {
            $values = [];
            foreach ($object->getTaxAmount() as $value) {
                $values[] = $value;
            }
            $data->{'TaxAmount'} = $values;
        }
        if (null !== $object->getTaxID()) {
            $values_1 = [];
            foreach ($object->getTaxID() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'TaxID'} = $values_1;
        }
        if (null !== $object->getAmount()) {
            $data->{'Amount'} = $object->getAmount();
        }
        if (null !== $object->getCode()) {
            $data->{'Code'} = $object->getCode();
        }
        if (null !== $object->getNumFees()) {
            $data->{'NumFees'} = $object->getNumFees();
        }
        if (null !== $object->getNameNumber()) {
            $data->{'NameNumber'} = $object->getNameNumber();
        }
        if (null !== $object->getSegmentNumber()) {
            $data->{'SegmentNumber'} = $object->getSegmentNumber();
        }

        return $data;
    }
}
