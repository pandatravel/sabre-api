<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemSpecificPenaltyItemPenaltyInformationNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemSpecificPenaltyItemPenaltyInformation';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemSpecificPenaltyItemPenaltyInformation;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemSpecificPenaltyItemPenaltyInformation();
        if (property_exists($data, 'FareBasisCode')) {
            $values = [];
            foreach ($data->{'FareBasisCode'} as $value) {
                $values[] = $value;
            }
            $object->setFareBasisCode($values);
        }
        if (property_exists($data, 'FareComponent')) {
            $values_1 = [];
            foreach ($data->{'FareComponent'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setFareComponent($values_1);
        }
        if (property_exists($data, 'Amount')) {
            $object->setAmount($data->{'Amount'});
        }
        if (property_exists($data, 'Cat16')) {
            $object->setCat16($data->{'Cat16'});
        }
        if (property_exists($data, 'Currency')) {
            $object->setCurrency($data->{'Currency'});
        }
        if (property_exists($data, 'NotApplicable')) {
            $object->setNotApplicable($data->{'NotApplicable'});
        }
        if (property_exists($data, 'Type')) {
            $object->setType($data->{'Type'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getFareBasisCode()) {
            $values = [];
            foreach ($object->getFareBasisCode() as $value) {
                $values[] = $value;
            }
            $data->{'FareBasisCode'} = $values;
        }
        if (null !== $object->getFareComponent()) {
            $values_1 = [];
            foreach ($object->getFareComponent() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'FareComponent'} = $values_1;
        }
        if (null !== $object->getAmount()) {
            $data->{'Amount'} = $object->getAmount();
        }
        if (null !== $object->getCat16()) {
            $data->{'Cat16'} = $object->getCat16();
        }
        if (null !== $object->getCurrency()) {
            $data->{'Currency'} = $object->getCurrency();
        }
        if (null !== $object->getNotApplicable()) {
            $data->{'NotApplicable'} = $object->getNotApplicable();
        }
        if (null !== $object->getType()) {
            $data->{'Type'} = $object->getType();
        }

        return $data;
    }
}
