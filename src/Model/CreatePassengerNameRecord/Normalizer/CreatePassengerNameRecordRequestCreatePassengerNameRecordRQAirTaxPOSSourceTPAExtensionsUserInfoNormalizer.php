<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxPOSSourceTPAExtensionsUserInfoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxPOSSourceTPAExtensionsUserInfo';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxPOSSourceTPAExtensionsUserInfo';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxPOSSourceTPAExtensionsUserInfo();
        if (property_exists($data, 'AAACity')) {
            $object->setAAACity($this->denormalizer->denormalize($data->{'AAACity'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxPOSSourceTPAExtensionsUserInfoAAACity', 'json', $context));
        }
        if (property_exists($data, 'Action')) {
            $object->setAction($this->denormalizer->denormalize($data->{'Action'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxPOSSourceTPAExtensionsUserInfoAction', 'json', $context));
        }
        if (property_exists($data, 'AgentSine')) {
            $object->setAgentSine($this->denormalizer->denormalize($data->{'AgentSine'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxPOSSourceTPAExtensionsUserInfoAgentSine', 'json', $context));
        }
        if (property_exists($data, 'Branch')) {
            $object->setBranch($this->denormalizer->denormalize($data->{'Branch'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxPOSSourceTPAExtensionsUserInfoBranch', 'json', $context));
        }
        if (property_exists($data, 'Partition')) {
            $object->setPartition($this->denormalizer->denormalize($data->{'Partition'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxPOSSourceTPAExtensionsUserInfoPartition', 'json', $context));
        }
        if (property_exists($data, 'Service')) {
            $object->setService($this->denormalizer->denormalize($data->{'Service'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxPOSSourceTPAExtensionsUserInfoService', 'json', $context));
        }
        if (property_exists($data, 'SetAddress')) {
            $object->setSetAddress($data->{'SetAddress'});
        }
        if (property_exists($data, 'Station')) {
            $object->setStation($this->denormalizer->denormalize($data->{'Station'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxPOSSourceTPAExtensionsUserInfoStation', 'json', $context));
        }
        if (property_exists($data, 'Transaction')) {
            $object->setTransaction($this->denormalizer->denormalize($data->{'Transaction'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxPOSSourceTPAExtensionsUserInfoTransaction', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAAACity()) {
            $data->{'AAACity'} = $this->normalizer->normalize($object->getAAACity(), 'json', $context);
        }
        if (null !== $object->getAction()) {
            $data->{'Action'} = $this->normalizer->normalize($object->getAction(), 'json', $context);
        }
        if (null !== $object->getAgentSine()) {
            $data->{'AgentSine'} = $this->normalizer->normalize($object->getAgentSine(), 'json', $context);
        }
        if (null !== $object->getBranch()) {
            $data->{'Branch'} = $this->normalizer->normalize($object->getBranch(), 'json', $context);
        }
        if (null !== $object->getPartition()) {
            $data->{'Partition'} = $this->normalizer->normalize($object->getPartition(), 'json', $context);
        }
        if (null !== $object->getService()) {
            $data->{'Service'} = $this->normalizer->normalize($object->getService(), 'json', $context);
        }
        if (null !== $object->getSetAddress()) {
            $data->{'SetAddress'} = $object->getSetAddress();
        }
        if (null !== $object->getStation()) {
            $data->{'Station'} = $this->normalizer->normalize($object->getStation(), 'json', $context);
        }
        if (null !== $object->getTransaction()) {
            $data->{'Transaction'} = $this->normalizer->normalize($object->getTransaction(), 'json', $context);
        }

        return $data;
    }
}
