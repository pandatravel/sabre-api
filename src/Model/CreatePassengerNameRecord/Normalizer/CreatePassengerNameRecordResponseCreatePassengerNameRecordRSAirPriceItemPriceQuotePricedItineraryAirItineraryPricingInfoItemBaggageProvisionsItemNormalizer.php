<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemBaggageProvisionsItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemBaggageProvisionsItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemBaggageProvisionsItem';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemBaggageProvisionsItem();
        if (property_exists($data, 'Associations') && $data->{'Associations'} !== null) {
            $object->setAssociations($this->denormalizer->denormalize($data->{'Associations'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemBaggageProvisionsItemAssociations', 'json', $context));
        }
        if (property_exists($data, 'CarrierWhoseBaggageProvisionsApply') && $data->{'CarrierWhoseBaggageProvisionsApply'} !== null) {
            $object->setCarrierWhoseBaggageProvisionsApply($data->{'CarrierWhoseBaggageProvisionsApply'});
        }
        if (property_exists($data, 'Commissionable') && $data->{'Commissionable'} !== null) {
            $object->setCommissionable($data->{'Commissionable'});
        }
        if (property_exists($data, 'FeeApplicationIndicator') && $data->{'FeeApplicationIndicator'} !== null) {
            $object->setFeeApplicationIndicator($data->{'FeeApplicationIndicator'});
        }
        if (property_exists($data, 'FeeNotGuaranteedIndicator') && $data->{'FeeNotGuaranteedIndicator'} !== null) {
            $object->setFeeNotGuaranteedIndicator($data->{'FeeNotGuaranteedIndicator'});
        }
        if (property_exists($data, 'FirstOccurrence') && $data->{'FirstOccurrence'} !== null) {
            $object->setFirstOccurrence($data->{'FirstOccurrence'});
        }
        if (property_exists($data, 'FQTV_CarrierFiledTierLevel') && $data->{'FQTV_CarrierFiledTierLevel'} !== null) {
            $object->setFQTVCarrierFiledTierLevel($data->{'FQTV_CarrierFiledTierLevel'});
        }
        if (property_exists($data, 'Interlineable') && $data->{'Interlineable'} !== null) {
            $object->setInterlineable($data->{'Interlineable'});
        }
        if (property_exists($data, 'LastOccurrence') && $data->{'LastOccurrence'} !== null) {
            $object->setLastOccurrence($data->{'LastOccurrence'});
        }
        if (property_exists($data, 'NoChargeNotAvailableIndicator') && $data->{'NoChargeNotAvailableIndicator'} !== null) {
            $object->setNoChargeNotAvailableIndicator($data->{'NoChargeNotAvailableIndicator'});
        }
        if (property_exists($data, 'NumPiecesBDI') && $data->{'NumPiecesBDI'} !== null) {
            $object->setNumPiecesBDI($data->{'NumPiecesBDI'});
        }
        if (property_exists($data, 'NumPiecesITR') && $data->{'NumPiecesITR'} !== null) {
            $values = [];
            foreach ($data->{'NumPiecesITR'} as $value) {
                $values[] = $value;
            }
            $object->setNumPiecesITR($values);
        }
        if (property_exists($data, 'PassengerType') && $data->{'PassengerType'} !== null) {
            $object->setPassengerType($this->denormalizer->denormalize($data->{'PassengerType'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemBaggageProvisionsItemPassengerType', 'json', $context));
        }
        if (property_exists($data, 'PriceInformation') && $data->{'PriceInformation'} !== null) {
            $object->setPriceInformation($this->denormalizer->denormalize($data->{'PriceInformation'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemBaggageProvisionsItemPriceInformation', 'json', $context));
        }
        if (property_exists($data, 'ProvisionType') && $data->{'ProvisionType'} !== null) {
            $object->setProvisionType($data->{'ProvisionType'});
        }
        if (property_exists($data, 'RefundForm') && $data->{'RefundForm'} !== null) {
            $object->setRefundForm($data->{'RefundForm'});
        }
        if (property_exists($data, 'RefundReissue') && $data->{'RefundReissue'} !== null) {
            $object->setRefundReissue($data->{'RefundReissue'});
        }
        if (property_exists($data, 'SimultaneousTicketIndicator') && $data->{'SimultaneousTicketIndicator'} !== null) {
            $object->setSimultaneousTicketIndicator($data->{'SimultaneousTicketIndicator'});
        }
        if (property_exists($data, 'SubCodeInfo') && $data->{'SubCodeInfo'} !== null) {
            $object->setSubCodeInfo($this->denormalizer->denormalize($data->{'SubCodeInfo'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemBaggageProvisionsItemSubCodeInfo', 'json', $context));
        }
        if (property_exists($data, 'WeightLimit') && $data->{'WeightLimit'} !== null) {
            $object->setWeightLimit($this->denormalizer->denormalize($data->{'WeightLimit'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemBaggageProvisionsItemWeightLimit', 'json', $context));
        }
        if (property_exists($data, 'RPH') && $data->{'RPH'} !== null) {
            $object->setRPH($data->{'RPH'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAssociations()) {
            $data->{'Associations'} = $this->normalizer->normalize($object->getAssociations(), 'json', $context);
        }
        if (null !== $object->getCarrierWhoseBaggageProvisionsApply()) {
            $data->{'CarrierWhoseBaggageProvisionsApply'} = $object->getCarrierWhoseBaggageProvisionsApply();
        }
        if (null !== $object->getCommissionable()) {
            $data->{'Commissionable'} = $object->getCommissionable();
        }
        if (null !== $object->getFeeApplicationIndicator()) {
            $data->{'FeeApplicationIndicator'} = $object->getFeeApplicationIndicator();
        }
        if (null !== $object->getFeeNotGuaranteedIndicator()) {
            $data->{'FeeNotGuaranteedIndicator'} = $object->getFeeNotGuaranteedIndicator();
        }
        if (null !== $object->getFirstOccurrence()) {
            $data->{'FirstOccurrence'} = $object->getFirstOccurrence();
        }
        if (null !== $object->getFQTVCarrierFiledTierLevel()) {
            $data->{'FQTV_CarrierFiledTierLevel'} = $object->getFQTVCarrierFiledTierLevel();
        }
        if (null !== $object->getInterlineable()) {
            $data->{'Interlineable'} = $object->getInterlineable();
        }
        if (null !== $object->getLastOccurrence()) {
            $data->{'LastOccurrence'} = $object->getLastOccurrence();
        }
        if (null !== $object->getNoChargeNotAvailableIndicator()) {
            $data->{'NoChargeNotAvailableIndicator'} = $object->getNoChargeNotAvailableIndicator();
        }
        if (null !== $object->getNumPiecesBDI()) {
            $data->{'NumPiecesBDI'} = $object->getNumPiecesBDI();
        }
        if (null !== $object->getNumPiecesITR()) {
            $values = [];
            foreach ($object->getNumPiecesITR() as $value) {
                $values[] = $value;
            }
            $data->{'NumPiecesITR'} = $values;
        }
        if (null !== $object->getPassengerType()) {
            $data->{'PassengerType'} = $this->normalizer->normalize($object->getPassengerType(), 'json', $context);
        }
        if (null !== $object->getPriceInformation()) {
            $data->{'PriceInformation'} = $this->normalizer->normalize($object->getPriceInformation(), 'json', $context);
        }
        if (null !== $object->getProvisionType()) {
            $data->{'ProvisionType'} = $object->getProvisionType();
        }
        if (null !== $object->getRefundForm()) {
            $data->{'RefundForm'} = $object->getRefundForm();
        }
        if (null !== $object->getRefundReissue()) {
            $data->{'RefundReissue'} = $object->getRefundReissue();
        }
        if (null !== $object->getSimultaneousTicketIndicator()) {
            $data->{'SimultaneousTicketIndicator'} = $object->getSimultaneousTicketIndicator();
        }
        if (null !== $object->getSubCodeInfo()) {
            $data->{'SubCodeInfo'} = $this->normalizer->normalize($object->getSubCodeInfo(), 'json', $context);
        }
        if (null !== $object->getWeightLimit()) {
            $data->{'WeightLimit'} = $this->normalizer->normalize($object->getWeightLimit(), 'json', $context);
        }
        if (null !== $object->getRPH()) {
            $data->{'RPH'} = $object->getRPH();
        }

        return $data;
    }
}
