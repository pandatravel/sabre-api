<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItem';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItem();
        if (property_exists($data, 'AgencyCommission') && $data->{'AgencyCommission'} !== null) {
            $values = [];
            foreach ($data->{'AgencyCommission'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemAgencyCommissionItem', 'json', $context);
            }
            $object->setAgencyCommission($values);
        }
        if (property_exists($data, 'AncillaryFees') && $data->{'AncillaryFees'} !== null) {
            $values_1 = [];
            foreach ($data->{'AncillaryFees'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemAncillaryFeesItem', 'json', $context);
            }
            $object->setAncillaryFees($values_1);
        }
        if (property_exists($data, 'BaggageProvisions') && $data->{'BaggageProvisions'} !== null) {
            $values_2 = [];
            foreach ($data->{'BaggageProvisions'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemBaggageProvisionsItem', 'json', $context);
            }
            $object->setBaggageProvisions($values_2);
        }
        if (property_exists($data, 'FareCalculation') && $data->{'FareCalculation'} !== null) {
            $object->setFareCalculation($this->denormalizer->denormalize($data->{'FareCalculation'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemFareCalculation', 'json', $context));
        }
        if (property_exists($data, 'FareCalculationBreakdown') && $data->{'FareCalculationBreakdown'} !== null) {
            $values_3 = [];
            foreach ($data->{'FareCalculationBreakdown'} as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemFareCalculationBreakdownItem', 'json', $context);
            }
            $object->setFareCalculationBreakdown($values_3);
        }
        if (property_exists($data, 'ItinTotalFare') && $data->{'ItinTotalFare'} !== null) {
            $object->setItinTotalFare($this->denormalizer->denormalize($data->{'ItinTotalFare'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFare', 'json', $context));
        }
        if (property_exists($data, 'PassengerTypeQuantity') && $data->{'PassengerTypeQuantity'} !== null) {
            $object->setPassengerTypeQuantity($this->denormalizer->denormalize($data->{'PassengerTypeQuantity'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemPassengerTypeQuantity', 'json', $context));
        }
        if (property_exists($data, 'PTC_FareBreakdown') && $data->{'PTC_FareBreakdown'} !== null) {
            $values_4 = [];
            foreach ($data->{'PTC_FareBreakdown'} as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemPTCFareBreakdownItem', 'json', $context);
            }
            $object->setPTCFareBreakdown($values_4);
        }
        if (property_exists($data, 'RetailerRules') && $data->{'RetailerRules'} !== null) {
            $values_5 = [];
            foreach ($data->{'RetailerRules'} as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemRetailerRulesItem', 'json', $context);
            }
            $object->setRetailerRules($values_5);
        }
        if (property_exists($data, 'SpecificPenalty') && $data->{'SpecificPenalty'} !== null) {
            $values_6 = [];
            foreach ($data->{'SpecificPenalty'} as $value_6) {
                $values_6[] = $this->denormalizer->denormalize($value_6, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemSpecificPenaltyItem', 'json', $context);
            }
            $object->setSpecificPenalty($values_6);
        }
        if (property_exists($data, 'TicketingFees') && $data->{'TicketingFees'} !== null) {
            $values_7 = [];
            foreach ($data->{'TicketingFees'} as $value_7) {
                $values_7[] = $this->denormalizer->denormalize($value_7, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemTicketingFeesItem', 'json', $context);
            }
            $object->setTicketingFees($values_7);
        }
        if (property_exists($data, 'SolutionSequenceNmbr') && $data->{'SolutionSequenceNmbr'} !== null) {
            $object->setSolutionSequenceNmbr($data->{'SolutionSequenceNmbr'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAgencyCommission()) {
            $values = [];
            foreach ($object->getAgencyCommission() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'AgencyCommission'} = $values;
        }
        if (null !== $object->getAncillaryFees()) {
            $values_1 = [];
            foreach ($object->getAncillaryFees() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'AncillaryFees'} = $values_1;
        }
        if (null !== $object->getBaggageProvisions()) {
            $values_2 = [];
            foreach ($object->getBaggageProvisions() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'BaggageProvisions'} = $values_2;
        }
        if (null !== $object->getFareCalculation()) {
            $data->{'FareCalculation'} = $this->normalizer->normalize($object->getFareCalculation(), 'json', $context);
        }
        if (null !== $object->getFareCalculationBreakdown()) {
            $values_3 = [];
            foreach ($object->getFareCalculationBreakdown() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $data->{'FareCalculationBreakdown'} = $values_3;
        }
        if (null !== $object->getItinTotalFare()) {
            $data->{'ItinTotalFare'} = $this->normalizer->normalize($object->getItinTotalFare(), 'json', $context);
        }
        if (null !== $object->getPassengerTypeQuantity()) {
            $data->{'PassengerTypeQuantity'} = $this->normalizer->normalize($object->getPassengerTypeQuantity(), 'json', $context);
        }
        if (null !== $object->getPTCFareBreakdown()) {
            $values_4 = [];
            foreach ($object->getPTCFareBreakdown() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $data->{'PTC_FareBreakdown'} = $values_4;
        }
        if (null !== $object->getRetailerRules()) {
            $values_5 = [];
            foreach ($object->getRetailerRules() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $data->{'RetailerRules'} = $values_5;
        }
        if (null !== $object->getSpecificPenalty()) {
            $values_6 = [];
            foreach ($object->getSpecificPenalty() as $value_6) {
                $values_6[] = $this->normalizer->normalize($value_6, 'json', $context);
            }
            $data->{'SpecificPenalty'} = $values_6;
        }
        if (null !== $object->getTicketingFees()) {
            $values_7 = [];
            foreach ($object->getTicketingFees() as $value_7) {
                $values_7[] = $this->normalizer->normalize($value_7, 'json', $context);
            }
            $data->{'TicketingFees'} = $values_7;
        }
        if (null !== $object->getSolutionSequenceNmbr()) {
            $data->{'SolutionSequenceNmbr'} = $object->getSolutionSequenceNmbr();
        }

        return $data;
    }
}
