<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFare';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFare';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFare();
        if (property_exists($data, 'BaggageInfo')) {
            $object->setBaggageInfo($this->denormalizer->denormalize($data->{'BaggageInfo'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareBaggageInfo', 'json', $context));
        }
        if (property_exists($data, 'BaseFare')) {
            $object->setBaseFare($this->denormalizer->denormalize($data->{'BaseFare'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareBaseFare', 'json', $context));
        }
        if (property_exists($data, 'Commission')) {
            $object->setCommission($this->denormalizer->denormalize($data->{'Commission'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareCommission', 'json', $context));
        }
        if (property_exists($data, 'Construction')) {
            $object->setConstruction($this->denormalizer->denormalize($data->{'Construction'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareConstruction', 'json', $context));
        }
        if (property_exists($data, 'DiscountTypeMessage')) {
            $object->setDiscountTypeMessage($data->{'DiscountTypeMessage'});
        }
        if (property_exists($data, 'Endorsements')) {
            $object->setEndorsements($this->denormalizer->denormalize($data->{'Endorsements'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareEndorsements', 'json', $context));
        }
        if (property_exists($data, 'EquivFare')) {
            $object->setEquivFare($this->denormalizer->denormalize($data->{'EquivFare'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareEquivFare', 'json', $context));
        }
        if (property_exists($data, 'PrivateFare')) {
            $object->setPrivateFare($this->denormalizer->denormalize($data->{'PrivateFare'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFarePrivateFare', 'json', $context));
        }
        if (property_exists($data, 'Taxes')) {
            $object->setTaxes($this->denormalizer->denormalize($data->{'Taxes'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareTaxes', 'json', $context));
        }
        if (property_exists($data, 'TotalFare')) {
            $object->setTotalFare($this->denormalizer->denormalize($data->{'TotalFare'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareTotalFare', 'json', $context));
        }
        if (property_exists($data, 'Warnings')) {
            $object->setWarnings($this->denormalizer->denormalize($data->{'Warnings'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareWarnings', 'json', $context));
        }
        if (property_exists($data, 'SellingFareData')) {
            $values = [];
            foreach ($data->{'SellingFareData'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItem', 'json', $context);
            }
            $object->setSellingFareData($values);
        }
        if (property_exists($data, 'NonRefundableInd')) {
            $object->setNonRefundableInd($data->{'NonRefundableInd'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBaggageInfo()) {
            $data->{'BaggageInfo'} = $this->normalizer->normalize($object->getBaggageInfo(), 'json', $context);
        }
        if (null !== $object->getBaseFare()) {
            $data->{'BaseFare'} = $this->normalizer->normalize($object->getBaseFare(), 'json', $context);
        }
        if (null !== $object->getCommission()) {
            $data->{'Commission'} = $this->normalizer->normalize($object->getCommission(), 'json', $context);
        }
        if (null !== $object->getConstruction()) {
            $data->{'Construction'} = $this->normalizer->normalize($object->getConstruction(), 'json', $context);
        }
        if (null !== $object->getDiscountTypeMessage()) {
            $data->{'DiscountTypeMessage'} = $object->getDiscountTypeMessage();
        }
        if (null !== $object->getEndorsements()) {
            $data->{'Endorsements'} = $this->normalizer->normalize($object->getEndorsements(), 'json', $context);
        }
        if (null !== $object->getEquivFare()) {
            $data->{'EquivFare'} = $this->normalizer->normalize($object->getEquivFare(), 'json', $context);
        }
        if (null !== $object->getPrivateFare()) {
            $data->{'PrivateFare'} = $this->normalizer->normalize($object->getPrivateFare(), 'json', $context);
        }
        if (null !== $object->getTaxes()) {
            $data->{'Taxes'} = $this->normalizer->normalize($object->getTaxes(), 'json', $context);
        }
        if (null !== $object->getTotalFare()) {
            $data->{'TotalFare'} = $this->normalizer->normalize($object->getTotalFare(), 'json', $context);
        }
        if (null !== $object->getWarnings()) {
            $data->{'Warnings'} = $this->normalizer->normalize($object->getWarnings(), 'json', $context);
        }
        if (null !== $object->getSellingFareData()) {
            $values = [];
            foreach ($object->getSellingFareData() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'SellingFareData'} = $values;
        }
        if (null !== $object->getNonRefundableInd()) {
            $data->{'NonRefundableInd'} = $object->getNonRefundableInd();
        }

        return $data;
    }
}
