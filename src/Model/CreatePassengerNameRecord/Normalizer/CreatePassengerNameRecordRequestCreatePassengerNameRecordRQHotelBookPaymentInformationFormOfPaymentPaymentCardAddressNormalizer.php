<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookPaymentInformationFormOfPaymentPaymentCardAddressNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookPaymentInformationFormOfPaymentPaymentCardAddress';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookPaymentInformationFormOfPaymentPaymentCardAddress;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookPaymentInformationFormOfPaymentPaymentCardAddress();
        if (property_exists($data, 'AddressLine')) {
            $values = [];
            foreach ($data->{'AddressLine'} as $value) {
                $values[] = $value;
            }
            $object->setAddressLine($values);
        }
        if (property_exists($data, 'CityName')) {
            $object->setCityName($data->{'CityName'});
        }
        if (property_exists($data, 'CityCodes')) {
            $object->setCityCodes($this->denormalizer->denormalize($data->{'CityCodes'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookPaymentInformationFormOfPaymentPaymentCardAddressCityCodes', 'json', $context));
        }
        if (property_exists($data, 'StateProvince')) {
            $object->setStateProvince($this->denormalizer->denormalize($data->{'StateProvince'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookPaymentInformationFormOfPaymentPaymentCardAddressStateProvince', 'json', $context));
        }
        if (property_exists($data, 'StateProvinceCodes')) {
            $object->setStateProvinceCodes($this->denormalizer->denormalize($data->{'StateProvinceCodes'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookPaymentInformationFormOfPaymentPaymentCardAddressStateProvinceCodes', 'json', $context));
        }
        if (property_exists($data, 'PostCode')) {
            $object->setPostCode($data->{'PostCode'});
        }
        if (property_exists($data, 'Country')) {
            $object->setCountry($this->denormalizer->denormalize($data->{'Country'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookPaymentInformationFormOfPaymentPaymentCardAddressCountry', 'json', $context));
        }
        if (property_exists($data, 'CountryCodes')) {
            $object->setCountryCodes($this->denormalizer->denormalize($data->{'CountryCodes'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookPaymentInformationFormOfPaymentPaymentCardAddressCountryCodes', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAddressLine()) {
            $values = [];
            foreach ($object->getAddressLine() as $value) {
                $values[] = $value;
            }
            $data->{'AddressLine'} = $values;
        }
        if (null !== $object->getCityName()) {
            $data->{'CityName'} = $object->getCityName();
        }
        if (null !== $object->getCityCodes()) {
            $data->{'CityCodes'} = $this->normalizer->normalize($object->getCityCodes(), 'json', $context);
        }
        if (null !== $object->getStateProvince()) {
            $data->{'StateProvince'} = $this->normalizer->normalize($object->getStateProvince(), 'json', $context);
        }
        if (null !== $object->getStateProvinceCodes()) {
            $data->{'StateProvinceCodes'} = $this->normalizer->normalize($object->getStateProvinceCodes(), 'json', $context);
        }
        if (null !== $object->getPostCode()) {
            $data->{'PostCode'} = $object->getPostCode();
        }
        if (null !== $object->getCountry()) {
            $data->{'Country'} = $this->normalizer->normalize($object->getCountry(), 'json', $context);
        }
        if (null !== $object->getCountryCodes()) {
            $data->{'CountryCodes'} = $this->normalizer->normalize($object->getCountryCodes(), 'json', $context);
        }

        return $data;
    }
}
