<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemPTCFareBreakdownItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemPTCFareBreakdownItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemPTCFareBreakdownItem';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemPTCFareBreakdownItem();
        if (property_exists($data, 'BrandedFareInformation') && $data->{'BrandedFareInformation'} !== null) {
            $object->setBrandedFareInformation($this->denormalizer->denormalize($data->{'BrandedFareInformation'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemPTCFareBreakdownItemBrandedFareInformation', 'json', $context));
        }
        if (property_exists($data, 'Cabin') && $data->{'Cabin'} !== null) {
            $object->setCabin($data->{'Cabin'});
        }
        if (property_exists($data, 'FareBasis') && $data->{'FareBasis'} !== null) {
            $object->setFareBasis($this->denormalizer->denormalize($data->{'FareBasis'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemPTCFareBreakdownItemFareBasis', 'json', $context));
        }
        if (property_exists($data, 'FreeBaggageAllowance') && $data->{'FreeBaggageAllowance'} !== null) {
            $object->setFreeBaggageAllowance($data->{'FreeBaggageAllowance'});
        }
        if (property_exists($data, 'Surcharges') && $data->{'Surcharges'} !== null) {
            $values = [];
            foreach ($data->{'Surcharges'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemPTCFareBreakdownItemSurchargesItem', 'json', $context);
            }
            $object->setSurcharges($values);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBrandedFareInformation()) {
            $data->{'BrandedFareInformation'} = $this->normalizer->normalize($object->getBrandedFareInformation(), 'json', $context);
        }
        if (null !== $object->getCabin()) {
            $data->{'Cabin'} = $object->getCabin();
        }
        if (null !== $object->getFareBasis()) {
            $data->{'FareBasis'} = $this->normalizer->normalize($object->getFareBasis(), 'json', $context);
        }
        if (null !== $object->getFreeBaggageAllowance()) {
            $data->{'FreeBaggageAllowance'} = $object->getFreeBaggageAllowance();
        }
        if (null !== $object->getSurcharges()) {
            $values = [];
            foreach ($object->getSurcharges() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'Surcharges'} = $values;
        }

        return $data;
    }
}
