<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordResponseCreatePassengerNameRecordRSTravelItineraryReadTravelItineraryCustomerInfoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSTravelItineraryReadTravelItineraryCustomerInfo';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSTravelItineraryReadTravelItineraryCustomerInfo';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSTravelItineraryReadTravelItineraryCustomerInfo();
        if (property_exists($data, 'Address') && $data->{'Address'} !== null) {
            $object->setAddress($this->denormalizer->denormalize($data->{'Address'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSTravelItineraryReadTravelItineraryCustomerInfoAddress', 'json', $context));
        }
        if (property_exists($data, 'ContactNumbers') && $data->{'ContactNumbers'} !== null) {
            $object->setContactNumbers($this->denormalizer->denormalize($data->{'ContactNumbers'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSTravelItineraryReadTravelItineraryCustomerInfoContactNumbers', 'json', $context));
        }
        if (property_exists($data, 'CustLoyalty') && $data->{'CustLoyalty'} !== null) {
            $values = [];
            foreach ($data->{'CustLoyalty'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSTravelItineraryReadTravelItineraryCustomerInfoCustLoyaltyItem', 'json', $context);
            }
            $object->setCustLoyalty($values);
        }
        if (property_exists($data, 'Passport') && $data->{'Passport'} !== null) {
            $values_1 = [];
            foreach ($data->{'Passport'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSTravelItineraryReadTravelItineraryCustomerInfoPassportItem', 'json', $context);
            }
            $object->setPassport($values_1);
        }
        if (property_exists($data, 'PaymentInfo') && $data->{'PaymentInfo'} !== null) {
            $object->setPaymentInfo($this->denormalizer->denormalize($data->{'PaymentInfo'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSTravelItineraryReadTravelItineraryCustomerInfoPaymentInfo', 'json', $context));
        }
        if (property_exists($data, 'PersonName') && $data->{'PersonName'} !== null) {
            $values_2 = [];
            foreach ($data->{'PersonName'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSTravelItineraryReadTravelItineraryCustomerInfoPersonNameItem', 'json', $context);
            }
            $object->setPersonName($values_2);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAddress()) {
            $data->{'Address'} = $this->normalizer->normalize($object->getAddress(), 'json', $context);
        }
        if (null !== $object->getContactNumbers()) {
            $data->{'ContactNumbers'} = $this->normalizer->normalize($object->getContactNumbers(), 'json', $context);
        }
        if (null !== $object->getCustLoyalty()) {
            $values = [];
            foreach ($object->getCustLoyalty() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'CustLoyalty'} = $values;
        }
        if (null !== $object->getPassport()) {
            $values_1 = [];
            foreach ($object->getPassport() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'Passport'} = $values_1;
        }
        if (null !== $object->getPaymentInfo()) {
            $data->{'PaymentInfo'} = $this->normalizer->normalize($object->getPaymentInfo(), 'json', $context);
        }
        if (null !== $object->getPersonName()) {
            $values_2 = [];
            foreach ($object->getPersonName() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'PersonName'} = $values_2;
        }

        return $data;
    }
}
