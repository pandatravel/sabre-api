<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemFareCalculationBreakdownItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemFareCalculationBreakdownItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemFareCalculationBreakdownItem;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemFareCalculationBreakdownItem();
        if (property_exists($data, 'Branch')) {
            $object->setBranch($this->denormalizer->denormalize($data->{'Branch'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemFareCalculationBreakdownItemBranch', 'json', $context));
        }
        if (property_exists($data, 'Departure')) {
            $object->setDeparture($this->denormalizer->denormalize($data->{'Departure'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemFareCalculationBreakdownItemDeparture', 'json', $context));
        }
        if (property_exists($data, 'FareBasis')) {
            $object->setFareBasis($this->denormalizer->denormalize($data->{'FareBasis'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemFareCalculationBreakdownItemFareBasis', 'json', $context));
        }
        if (property_exists($data, 'FreeBaggageAllowance')) {
            $object->setFreeBaggageAllowance($data->{'FreeBaggageAllowance'});
        }
        if (property_exists($data, 'Mileage')) {
            $object->setMileage($this->denormalizer->denormalize($data->{'Mileage'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemFareCalculationBreakdownItemMileage', 'json', $context));
        }
        if (property_exists($data, 'RuleCategoryIndicator')) {
            $values = [];
            foreach ($data->{'RuleCategoryIndicator'} as $value) {
                $values[] = $value;
            }
            $object->setRuleCategoryIndicator($values);
        }
        if (property_exists($data, 'Surcharges')) {
            $values_1 = [];
            foreach ($data->{'Surcharges'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemFareCalculationBreakdownItemSurchargesItem', 'json', $context);
            }
            $object->setSurcharges($values_1);
        }
        if (property_exists($data, 'StopoverCharge')) {
            $object->setStopoverCharge($this->denormalizer->denormalize($data->{'StopoverCharge'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemFareCalculationBreakdownItemStopoverCharge', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBranch()) {
            $data->{'Branch'} = $this->normalizer->normalize($object->getBranch(), 'json', $context);
        }
        if (null !== $object->getDeparture()) {
            $data->{'Departure'} = $this->normalizer->normalize($object->getDeparture(), 'json', $context);
        }
        if (null !== $object->getFareBasis()) {
            $data->{'FareBasis'} = $this->normalizer->normalize($object->getFareBasis(), 'json', $context);
        }
        if (null !== $object->getFreeBaggageAllowance()) {
            $data->{'FreeBaggageAllowance'} = $object->getFreeBaggageAllowance();
        }
        if (null !== $object->getMileage()) {
            $data->{'Mileage'} = $this->normalizer->normalize($object->getMileage(), 'json', $context);
        }
        if (null !== $object->getRuleCategoryIndicator()) {
            $values = [];
            foreach ($object->getRuleCategoryIndicator() as $value) {
                $values[] = $value;
            }
            $data->{'RuleCategoryIndicator'} = $values;
        }
        if (null !== $object->getSurcharges()) {
            $values_1 = [];
            foreach ($object->getSurcharges() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'Surcharges'} = $values_1;
        }
        if (null !== $object->getStopoverCharge()) {
            $data->{'StopoverCharge'} = $this->normalizer->normalize($object->getStopoverCharge(), 'json', $context);
        }

        return $data;
    }
}
