<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBook';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBook';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBook();
        if (property_exists($data, 'BookingInfo')) {
            $object->setBookingInfo($this->denormalizer->denormalize($data->{'BookingInfo'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookBookingInfo', 'json', $context));
        }
        if (property_exists($data, 'Rooms')) {
            $object->setRooms($this->denormalizer->denormalize($data->{'Rooms'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookRooms', 'json', $context));
        }
        if (property_exists($data, 'SpecialInstructions')) {
            $object->setSpecialInstructions($this->denormalizer->denormalize($data->{'SpecialInstructions'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookSpecialInstructions', 'json', $context));
        }
        if (property_exists($data, 'PaymentInformation')) {
            $object->setPaymentInformation($this->denormalizer->denormalize($data->{'PaymentInformation'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookPaymentInformation', 'json', $context));
        }
        if (property_exists($data, 'POS')) {
            $object->setPOS($this->denormalizer->denormalize($data->{'POS'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQHotelBookPOS', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBookingInfo()) {
            $data->{'BookingInfo'} = $this->normalizer->normalize($object->getBookingInfo(), 'json', $context);
        }
        if (null !== $object->getRooms()) {
            $data->{'Rooms'} = $this->normalizer->normalize($object->getRooms(), 'json', $context);
        }
        if (null !== $object->getSpecialInstructions()) {
            $data->{'SpecialInstructions'} = $this->normalizer->normalize($object->getSpecialInstructions(), 'json', $context);
        }
        if (null !== $object->getPaymentInformation()) {
            $data->{'PaymentInformation'} = $this->normalizer->normalize($object->getPaymentInformation(), 'json', $context);
        }
        if (null !== $object->getPOS()) {
            $data->{'POS'} = $this->normalizer->normalize($object->getPOS(), 'json', $context);
        }

        return $data;
    }
}
