<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessing';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessing';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessing();
        if (property_exists($data, 'ARUNK') && $data->{'ARUNK'} !== null) {
            $object->setARUNK($this->denormalizer->denormalize($data->{'ARUNK'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingARUNK', 'json', $context));
        }
        if (property_exists($data, 'QueuePlace') && $data->{'QueuePlace'} !== null) {
            $object->setQueuePlace($this->denormalizer->denormalize($data->{'QueuePlace'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingQueuePlace', 'json', $context));
        }
        if (property_exists($data, 'EndTransaction') && $data->{'EndTransaction'} !== null) {
            $object->setEndTransaction($this->denormalizer->denormalize($data->{'EndTransaction'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingEndTransaction', 'json', $context));
        }
        if (property_exists($data, 'PostBookingHKValidation') && $data->{'PostBookingHKValidation'} !== null) {
            $object->setPostBookingHKValidation($this->denormalizer->denormalize($data->{'PostBookingHKValidation'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingPostBookingHKValidation', 'json', $context));
        }
        if (property_exists($data, 'WaitForAirlineRecLoc') && $data->{'WaitForAirlineRecLoc'} !== null) {
            $object->setWaitForAirlineRecLoc($this->denormalizer->denormalize($data->{'WaitForAirlineRecLoc'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingWaitForAirlineRecLoc', 'json', $context));
        }
        if (property_exists($data, 'RedisplayReservation') && $data->{'RedisplayReservation'} !== null) {
            $object->setRedisplayReservation($this->denormalizer->denormalize($data->{'RedisplayReservation'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingRedisplayReservation', 'json', $context));
        }
        if (property_exists($data, 'unmaskCreditCard') && $data->{'unmaskCreditCard'} !== null) {
            $object->setUnmaskCreditCard($data->{'unmaskCreditCard'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getARUNK()) {
            $data->{'ARUNK'} = $this->normalizer->normalize($object->getARUNK(), 'json', $context);
        }
        if (null !== $object->getQueuePlace()) {
            $data->{'QueuePlace'} = $this->normalizer->normalize($object->getQueuePlace(), 'json', $context);
        }
        if (null !== $object->getEndTransaction()) {
            $data->{'EndTransaction'} = $this->normalizer->normalize($object->getEndTransaction(), 'json', $context);
        }
        if (null !== $object->getPostBookingHKValidation()) {
            $data->{'PostBookingHKValidation'} = $this->normalizer->normalize($object->getPostBookingHKValidation(), 'json', $context);
        }
        if (null !== $object->getWaitForAirlineRecLoc()) {
            $data->{'WaitForAirlineRecLoc'} = $this->normalizer->normalize($object->getWaitForAirlineRecLoc(), 'json', $context);
        }
        if (null !== $object->getRedisplayReservation()) {
            $data->{'RedisplayReservation'} = $this->normalizer->normalize($object->getRedisplayReservation(), 'json', $context);
        }
        if (null !== $object->getUnmaskCreditCard()) {
            $data->{'unmaskCreditCard'} = $object->getUnmaskCreditCard();
        }

        return $data;
    }
}
