<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItem';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\CreatePassengerNameRecord\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItem();
        if (property_exists($data, 'BaseFare')) {
            $object->setBaseFare($this->denormalizer->denormalize($data->{'BaseFare'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItemBaseFare', 'json', $context));
        }
        if (property_exists($data, 'ConstructedTotal')) {
            $object->setConstructedTotal($this->denormalizer->denormalize($data->{'ConstructedTotal'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItemConstructedTotal', 'json', $context));
        }
        if (property_exists($data, 'Equivalent')) {
            $object->setEquivalent($this->denormalizer->denormalize($data->{'Equivalent'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItemEquivalent', 'json', $context));
        }
        if (property_exists($data, 'TotalTaxes')) {
            $object->setTotalTaxes($this->denormalizer->denormalize($data->{'TotalTaxes'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItemTotalTaxes', 'json', $context));
        }
        if (property_exists($data, 'TotalPerPassenger')) {
            $object->setTotalPerPassenger($this->denormalizer->denormalize($data->{'TotalPerPassenger'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItemTotalPerPassenger', 'json', $context));
        }
        if (property_exists($data, 'FareCalculation')) {
            $object->setFareCalculation($this->denormalizer->denormalize($data->{'FareCalculation'}, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItemFareCalculation', 'json', $context));
        }
        if (property_exists($data, 'SellingFareTaxData')) {
            $values = [];
            foreach ($data->{'SellingFareTaxData'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItemSellingFareTaxDataItem', 'json', $context);
            }
            $object->setSellingFareTaxData($values);
        }
        if (property_exists($data, 'SellingFareTaxBreakdown')) {
            $values_1 = [];
            foreach ($data->{'SellingFareTaxBreakdown'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItemSellingFareTaxBreakdownItem', 'json', $context);
            }
            $object->setSellingFareTaxBreakdown($values_1);
        }
        if (property_exists($data, 'Summary')) {
            $values_2 = [];
            foreach ($data->{'Summary'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Ammonkc\\SabreApi\\Model\\CreatePassengerNameRecord\\CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemItinTotalFareSellingFareDataItemSummaryItem', 'json', $context);
            }
            $object->setSummary($values_2);
        }
        if (property_exists($data, 'LayerTypeName')) {
            $object->setLayerTypeName($data->{'LayerTypeName'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBaseFare()) {
            $data->{'BaseFare'} = $this->normalizer->normalize($object->getBaseFare(), 'json', $context);
        }
        if (null !== $object->getConstructedTotal()) {
            $data->{'ConstructedTotal'} = $this->normalizer->normalize($object->getConstructedTotal(), 'json', $context);
        }
        if (null !== $object->getEquivalent()) {
            $data->{'Equivalent'} = $this->normalizer->normalize($object->getEquivalent(), 'json', $context);
        }
        if (null !== $object->getTotalTaxes()) {
            $data->{'TotalTaxes'} = $this->normalizer->normalize($object->getTotalTaxes(), 'json', $context);
        }
        if (null !== $object->getTotalPerPassenger()) {
            $data->{'TotalPerPassenger'} = $this->normalizer->normalize($object->getTotalPerPassenger(), 'json', $context);
        }
        if (null !== $object->getFareCalculation()) {
            $data->{'FareCalculation'} = $this->normalizer->normalize($object->getFareCalculation(), 'json', $context);
        }
        if (null !== $object->getSellingFareTaxData()) {
            $values = [];
            foreach ($object->getSellingFareTaxData() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'SellingFareTaxData'} = $values;
        }
        if (null !== $object->getSellingFareTaxBreakdown()) {
            $values_1 = [];
            foreach ($object->getSellingFareTaxBreakdown() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'SellingFareTaxBreakdown'} = $values_1;
        }
        if (null !== $object->getSummary()) {
            $values_2 = [];
            foreach ($object->getSummary() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'Summary'} = $values_2;
        }
        if (null !== $object->getLayerTypeName()) {
            $data->{'LayerTypeName'} = $object->getLayerTypeName();
        }

        return $data;
    }
}
