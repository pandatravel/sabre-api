<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord;

use Ammonkc\SabreApi\AbstractModel;

class CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItem extends AbstractModel
{
    /**
     * The arrival airport.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemArrivalAirport
     */
    protected $arrivalAirport;
    /**
     * The departure airport.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemDepartureAirport
     */
    protected $departureAirport;
    /**
     * The airplane equipment type.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemEquipment
     */
    protected $equipment;
    /**
     * If more than one fare break is needed, identify the fare component to which each flight segment belongs using FareComponentNumber.
    If There are more than one side trips in the itinerary, identify the side trip to which each flight segment belongs using the 'SideTripNumber'.
    'SideTripStartInd', 'SideTripEndInd' and 'SideTripNumber' are currently not used in tax calculations.

     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfo
     */
    protected $fareBreakInfo;
    /**
     * Used to pass the hidden city / via code.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemHiddenStops
     */
    protected $hiddenStops;
    /**
     * The marketing airline code.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemMarketingAirline
     */
    protected $marketingAirline;
    /**
     * The operating airline code.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemOperatingAirline
     */
    protected $operatingAirline;
    /**
     * 'DepartureDateTime' is used to describe the date and time of the traveler's departure.
    It is shown in the "YYYY-MM-DDThh:mm:ss" format.

     *
     * @var string
     */
    protected $departureDateTime;
    /**
     * 'ArrivalDateTime' is used to describe the date and time of the traveler's arrival.
    It is shown in the "YYYY-MM-DDThh:mm:ss" format.

     *
     * @var string
     */
    protected $arrivalDateTime;
    /**
     * The marketing flight number.
     *
     * @var int
     */
    protected $flightNumber;
    /**
     * The booking code.
     *
     * @var string
     */
    protected $resBookDesigCode;
    /**
     * Used to indicate whether the Flight segment is a forced connection.
     *
     * @var bool
     */
    protected $forceConnectionInd;
    /**
     * Used to indicate whether the Flight segment is a forced stop over.
     *
     * @var bool
     */
    protected $forceStopOverInd;

    /**
     * The arrival airport.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemArrivalAirport|null
     */
    public function getArrivalAirport(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemArrivalAirport
    {
        return $this->arrivalAirport;
    }

    /**
     * The arrival airport.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemArrivalAirport|null $arrivalAirport
     *
     * @return self
     */
    public function setArrivalAirport(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemArrivalAirport $arrivalAirport): self
    {
        $this->arrivalAirport = $arrivalAirport;

        return $this;
    }

    /**
     * The departure airport.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemDepartureAirport|null
     */
    public function getDepartureAirport(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemDepartureAirport
    {
        return $this->departureAirport;
    }

    /**
     * The departure airport.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemDepartureAirport|null $departureAirport
     *
     * @return self
     */
    public function setDepartureAirport(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemDepartureAirport $departureAirport): self
    {
        $this->departureAirport = $departureAirport;

        return $this;
    }

    /**
     * The airplane equipment type.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemEquipment|null
     */
    public function getEquipment(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemEquipment
    {
        return $this->equipment;
    }

    /**
     * The airplane equipment type.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemEquipment|null $equipment
     *
     * @return self
     */
    public function setEquipment(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemEquipment $equipment): self
    {
        $this->equipment = $equipment;

        return $this;
    }

    /**
     * If more than one fare break is needed, identify the fare component to which each flight segment belongs using FareComponentNumber.
    If There are more than one side trips in the itinerary, identify the side trip to which each flight segment belongs using the 'SideTripNumber'.
    'SideTripStartInd', 'SideTripEndInd' and 'SideTripNumber' are currently not used in tax calculations.

     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfo|null
     */
    public function getFareBreakInfo(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfo
    {
        return $this->fareBreakInfo;
    }

    /**
     * If more than one fare break is needed, identify the fare component to which each flight segment belongs using FareComponentNumber.
    If There are more than one side trips in the itinerary, identify the side trip to which each flight segment belongs using the 'SideTripNumber'.
    'SideTripStartInd', 'SideTripEndInd' and 'SideTripNumber' are currently not used in tax calculations.

     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfo|null $fareBreakInfo
     *
     * @return self
     */
    public function setFareBreakInfo(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfo $fareBreakInfo): self
    {
        $this->fareBreakInfo = $fareBreakInfo;

        return $this;
    }

    /**
     * Used to pass the hidden city / via code.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemHiddenStops|null
     */
    public function getHiddenStops(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemHiddenStops
    {
        return $this->hiddenStops;
    }

    /**
     * Used to pass the hidden city / via code.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemHiddenStops|null $hiddenStops
     *
     * @return self
     */
    public function setHiddenStops(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemHiddenStops $hiddenStops): self
    {
        $this->hiddenStops = $hiddenStops;

        return $this;
    }

    /**
     * The marketing airline code.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemMarketingAirline|null
     */
    public function getMarketingAirline(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemMarketingAirline
    {
        return $this->marketingAirline;
    }

    /**
     * The marketing airline code.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemMarketingAirline|null $marketingAirline
     *
     * @return self
     */
    public function setMarketingAirline(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemMarketingAirline $marketingAirline): self
    {
        $this->marketingAirline = $marketingAirline;

        return $this;
    }

    /**
     * The operating airline code.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemOperatingAirline|null
     */
    public function getOperatingAirline(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemOperatingAirline
    {
        return $this->operatingAirline;
    }

    /**
     * The operating airline code.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemOperatingAirline|null $operatingAirline
     *
     * @return self
     */
    public function setOperatingAirline(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemOperatingAirline $operatingAirline): self
    {
        $this->operatingAirline = $operatingAirline;

        return $this;
    }

    /**
     * 'DepartureDateTime' is used to describe the date and time of the traveler's departure.
    It is shown in the "YYYY-MM-DDThh:mm:ss" format.

     *
     * @return string|null
     */
    public function getDepartureDateTime(): ?string
    {
        return $this->departureDateTime;
    }

    /**
     * 'DepartureDateTime' is used to describe the date and time of the traveler's departure.
    It is shown in the "YYYY-MM-DDThh:mm:ss" format.

     *
     * @param string|null $departureDateTime
     *
     * @return self
     */
    public function setDepartureDateTime(?string $departureDateTime): self
    {
        $this->departureDateTime = $departureDateTime;

        return $this;
    }

    /**
     * 'ArrivalDateTime' is used to describe the date and time of the traveler's arrival.
    It is shown in the "YYYY-MM-DDThh:mm:ss" format.

     *
     * @return string|null
     */
    public function getArrivalDateTime(): ?string
    {
        return $this->arrivalDateTime;
    }

    /**
     * 'ArrivalDateTime' is used to describe the date and time of the traveler's arrival.
    It is shown in the "YYYY-MM-DDThh:mm:ss" format.

     *
     * @param string|null $arrivalDateTime
     *
     * @return self
     */
    public function setArrivalDateTime(?string $arrivalDateTime): self
    {
        $this->arrivalDateTime = $arrivalDateTime;

        return $this;
    }

    /**
     * The marketing flight number.
     *
     * @return int|null
     */
    public function getFlightNumber(): ?int
    {
        return $this->flightNumber;
    }

    /**
     * The marketing flight number.
     *
     * @param int|null $flightNumber
     *
     * @return self
     */
    public function setFlightNumber(?int $flightNumber): self
    {
        $this->flightNumber = $flightNumber;

        return $this;
    }

    /**
     * The booking code.
     *
     * @return string|null
     */
    public function getResBookDesigCode(): ?string
    {
        return $this->resBookDesigCode;
    }

    /**
     * The booking code.
     *
     * @param string|null $resBookDesigCode
     *
     * @return self
     */
    public function setResBookDesigCode(?string $resBookDesigCode): self
    {
        $this->resBookDesigCode = $resBookDesigCode;

        return $this;
    }

    /**
     * Used to indicate whether the Flight segment is a forced connection.
     *
     * @return bool|null
     */
    public function getForceConnectionInd(): ?bool
    {
        return $this->forceConnectionInd;
    }

    /**
     * Used to indicate whether the Flight segment is a forced connection.
     *
     * @param bool|null $forceConnectionInd
     *
     * @return self
     */
    public function setForceConnectionInd(?bool $forceConnectionInd): self
    {
        $this->forceConnectionInd = $forceConnectionInd;

        return $this;
    }

    /**
     * Used to indicate whether the Flight segment is a forced stop over.
     *
     * @return bool|null
     */
    public function getForceStopOverInd(): ?bool
    {
        return $this->forceStopOverInd;
    }

    /**
     * Used to indicate whether the Flight segment is a forced stop over.
     *
     * @param bool|null $forceStopOverInd
     *
     * @return self
     */
    public function setForceStopOverInd(?bool $forceStopOverInd): self
    {
        $this->forceStopOverInd = $forceStopOverInd;

        return $this;
    }
}
