<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord;

use Ammonkc\SabreApi\AbstractModel;

class CreatePassengerNameRecordResponseCreatePassengerNameRecordRSAirPriceItemPriceQuotePricedItineraryAirItineraryPricingInfoItemFareCalculationBreakdownItemBranch extends AbstractModel
{
    /**
     * Used to return Branch PCC information.
     *
     * @var string
     */
    protected $pCC;
    /**
     * Indicates a country where a ship is documented and given nationality.
     *
     * @var string
     */
    protected $countryOfShipRegistry;
    /**
     * Used to indicate the Governing carrier/Primary carrier or 1st carrier on joint fare.
     *
     * @var string
     */
    protected $firstJointCarrier;
    /**
     * Used to indicate 2nd carrier on the joint fare.
     *
     * @var string
     */
    protected $secondJointCarrier;
    /**
     * Used to indicate if the carrier is IATA authorized.
     *
     * @var string
     */
    protected $iATAAuthorizedCarrier;

    /**
     * Used to return Branch PCC information.
     *
     * @return string
     */
    public function getPCC(): ?string
    {
        return $this->pCC;
    }

    /**
     * Used to return Branch PCC information.
     *
     * @param string $pCC
     *
     * @return self
     */
    public function setPCC(?string $pCC): self
    {
        $this->pCC = $pCC;

        return $this;
    }

    /**
     * Indicates a country where a ship is documented and given nationality.
     *
     * @return string
     */
    public function getCountryOfShipRegistry(): ?string
    {
        return $this->countryOfShipRegistry;
    }

    /**
     * Indicates a country where a ship is documented and given nationality.
     *
     * @param string $countryOfShipRegistry
     *
     * @return self
     */
    public function setCountryOfShipRegistry(?string $countryOfShipRegistry): self
    {
        $this->countryOfShipRegistry = $countryOfShipRegistry;

        return $this;
    }

    /**
     * Used to indicate the Governing carrier/Primary carrier or 1st carrier on joint fare.
     *
     * @return string
     */
    public function getFirstJointCarrier(): ?string
    {
        return $this->firstJointCarrier;
    }

    /**
     * Used to indicate the Governing carrier/Primary carrier or 1st carrier on joint fare.
     *
     * @param string $firstJointCarrier
     *
     * @return self
     */
    public function setFirstJointCarrier(?string $firstJointCarrier): self
    {
        $this->firstJointCarrier = $firstJointCarrier;

        return $this;
    }

    /**
     * Used to indicate 2nd carrier on the joint fare.
     *
     * @return string
     */
    public function getSecondJointCarrier(): ?string
    {
        return $this->secondJointCarrier;
    }

    /**
     * Used to indicate 2nd carrier on the joint fare.
     *
     * @param string $secondJointCarrier
     *
     * @return self
     */
    public function setSecondJointCarrier(?string $secondJointCarrier): self
    {
        $this->secondJointCarrier = $secondJointCarrier;

        return $this;
    }

    /**
     * Used to indicate if the carrier is IATA authorized.
     *
     * @return string
     */
    public function getIATAAuthorizedCarrier(): ?string
    {
        return $this->iATAAuthorizedCarrier;
    }

    /**
     * Used to indicate if the carrier is IATA authorized.
     *
     * @param string $iATAAuthorizedCarrier
     *
     * @return self
     */
    public function setIATAAuthorizedCarrier(?string $iATAAuthorizedCarrier): self
    {
        $this->iATAAuthorizedCarrier = $iATAAuthorizedCarrier;

        return $this;
    }
}
