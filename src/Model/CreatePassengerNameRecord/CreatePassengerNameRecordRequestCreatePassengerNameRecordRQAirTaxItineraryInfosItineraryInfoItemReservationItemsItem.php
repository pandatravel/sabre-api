<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord;

use Ammonkc\SabreApi\AbstractModel;

class CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItem extends AbstractModel
{
    /**
     * The fare details.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemAirFareInfo
     */
    protected $airFareInfo;
    /**
     * The air segment details.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItem[]
     */
    protected $flightSegment;
    /**
     * 'RPH' is used to pass Sequence Number of the itineraries.
    For example, 1 for itinerary #1 and 2 or itinerary #2.

     *
     * @var int
     */
    protected $rPH;
    /**
     * 'TicketingCarrier' is used to pass the Ticketing Carrier.
     *
     * @var string
     */
    protected $ticketingCarrier;
    /**
     * 'ValidatingCarrier' is used to pass the Validating Carrier.
     *
     * @var string
     */
    protected $validatingCarrier;
    /**
     * If "SalePseudoCityCode" is an invalid Sabre PCC, no tax processing will be done and an error response will be sent back.
     *
     * @var string
     */
    protected $salePseudoCityCode;

    /**
     * The fare details.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemAirFareInfo|null
     */
    public function getAirFareInfo(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemAirFareInfo
    {
        return $this->airFareInfo;
    }

    /**
     * The fare details.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemAirFareInfo|null $airFareInfo
     *
     * @return self
     */
    public function setAirFareInfo(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemAirFareInfo $airFareInfo): self
    {
        $this->airFareInfo = $airFareInfo;

        return $this;
    }

    /**
     * The air segment details.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItem[]|null
     */
    public function getFlightSegment(): ?array
    {
        return $this->flightSegment;
    }

    /**
     * The air segment details.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItem[]|null $flightSegment
     *
     * @return self
     */
    public function setFlightSegment(?array $flightSegment): self
    {
        $this->flightSegment = $flightSegment;

        return $this;
    }

    /**
     * 'RPH' is used to pass Sequence Number of the itineraries.
    For example, 1 for itinerary #1 and 2 or itinerary #2.

     *
     * @return int|null
     */
    public function getRPH(): ?int
    {
        return $this->rPH;
    }

    /**
     * 'RPH' is used to pass Sequence Number of the itineraries.
    For example, 1 for itinerary #1 and 2 or itinerary #2.

     *
     * @param int|null $rPH
     *
     * @return self
     */
    public function setRPH(?int $rPH): self
    {
        $this->rPH = $rPH;

        return $this;
    }

    /**
     * 'TicketingCarrier' is used to pass the Ticketing Carrier.
     *
     * @return string|null
     */
    public function getTicketingCarrier(): ?string
    {
        return $this->ticketingCarrier;
    }

    /**
     * 'TicketingCarrier' is used to pass the Ticketing Carrier.
     *
     * @param string|null $ticketingCarrier
     *
     * @return self
     */
    public function setTicketingCarrier(?string $ticketingCarrier): self
    {
        $this->ticketingCarrier = $ticketingCarrier;

        return $this;
    }

    /**
     * 'ValidatingCarrier' is used to pass the Validating Carrier.
     *
     * @return string|null
     */
    public function getValidatingCarrier(): ?string
    {
        return $this->validatingCarrier;
    }

    /**
     * 'ValidatingCarrier' is used to pass the Validating Carrier.
     *
     * @param string|null $validatingCarrier
     *
     * @return self
     */
    public function setValidatingCarrier(?string $validatingCarrier): self
    {
        $this->validatingCarrier = $validatingCarrier;

        return $this;
    }

    /**
     * If "SalePseudoCityCode" is an invalid Sabre PCC, no tax processing will be done and an error response will be sent back.
     *
     * @return string|null
     */
    public function getSalePseudoCityCode(): ?string
    {
        return $this->salePseudoCityCode;
    }

    /**
     * If "SalePseudoCityCode" is an invalid Sabre PCC, no tax processing will be done and an error response will be sent back.
     *
     * @param string|null $salePseudoCityCode
     *
     * @return self
     */
    public function setSalePseudoCityCode(?string $salePseudoCityCode): self
    {
        $this->salePseudoCityCode = $salePseudoCityCode;

        return $this;
    }
}
