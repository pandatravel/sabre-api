<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord;

use Ammonkc\SabreApi\AbstractModel;

class CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessing extends AbstractModel
{
    /**
     * Used to add arrival unknown segments into a passenger name record.
    The system will properly apply them so there is no need to segment select, etc.

     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingARUNK
     */
    protected $aRUNK;
    /**
     * Used to request to place the newly created PNR on a queue.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingQueuePlace
     */
    protected $queuePlace;
    /**
     * Used to finalize the transaction and commit the passenger name record.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingEndTransaction
     */
    protected $endTransaction;
    /**
     * 'PostBookingHKValidation' is used to validate whether after the booking is ended, codeshare flights keep the holding confirmed status or not.
    If the 'HK' status changes for any of the flight segments, the service will send a warning message.
    'PostBookingHKValidation' must be combined with 'PostProcessing.RedisplayReservation'='true'.

     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingPostBookingHKValidation
     */
    protected $postBookingHKValidation;
    /**
     * 'WaitForAirlineRecLoc' is used to check, whether the airline record locators have been returned by Air segment providers.
    If one or more locators are not returned after the specified interval and number of attempts, the service will send a warning message.
    'WaitForAirlineRecLoc' must be combined with 'PostProcessing.RedisplayReservation'='true'.

     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingWaitForAirlineRecLoc
     */
    protected $waitForAirlineRecLoc;
    /**
     * 'RedisplayReservation' object is used to indicate whether or not to re-display the PNR.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingRedisplayReservation
     */
    protected $redisplayReservation;
    /**
     * 'UnmaskCreditCard' is used to unmask credit card information in the TIR response.
    Please note that this attribute has an effect only if the user has the EPR keyword CCVIEW.

     *
     * @var bool
     */
    protected $unmaskCreditCard;

    /**
     * Used to add arrival unknown segments into a passenger name record.
    The system will properly apply them so there is no need to segment select, etc.

     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingARUNK|null
     */
    public function getARUNK(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingARUNK
    {
        return $this->aRUNK;
    }

    /**
     * Used to add arrival unknown segments into a passenger name record.
    The system will properly apply them so there is no need to segment select, etc.

     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingARUNK|null $aRUNK
     *
     * @return self
     */
    public function setARUNK(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingARUNK $aRUNK): self
    {
        $this->aRUNK = $aRUNK;

        return $this;
    }

    /**
     * Used to request to place the newly created PNR on a queue.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingQueuePlace|null
     */
    public function getQueuePlace(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingQueuePlace
    {
        return $this->queuePlace;
    }

    /**
     * Used to request to place the newly created PNR on a queue.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingQueuePlace|null $queuePlace
     *
     * @return self
     */
    public function setQueuePlace(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingQueuePlace $queuePlace): self
    {
        $this->queuePlace = $queuePlace;

        return $this;
    }

    /**
     * Used to finalize the transaction and commit the passenger name record.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingEndTransaction|null
     */
    public function getEndTransaction(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingEndTransaction
    {
        return $this->endTransaction;
    }

    /**
     * Used to finalize the transaction and commit the passenger name record.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingEndTransaction|null $endTransaction
     *
     * @return self
     */
    public function setEndTransaction(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingEndTransaction $endTransaction): self
    {
        $this->endTransaction = $endTransaction;

        return $this;
    }

    /**
     * 'PostBookingHKValidation' is used to validate whether after the booking is ended, codeshare flights keep the holding confirmed status or not.
    If the 'HK' status changes for any of the flight segments, the service will send a warning message.
    'PostBookingHKValidation' must be combined with 'PostProcessing.RedisplayReservation'='true'.

     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingPostBookingHKValidation|null
     */
    public function getPostBookingHKValidation(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingPostBookingHKValidation
    {
        return $this->postBookingHKValidation;
    }

    /**
     * 'PostBookingHKValidation' is used to validate whether after the booking is ended, codeshare flights keep the holding confirmed status or not.
    If the 'HK' status changes for any of the flight segments, the service will send a warning message.
    'PostBookingHKValidation' must be combined with 'PostProcessing.RedisplayReservation'='true'.

     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingPostBookingHKValidation|null $postBookingHKValidation
     *
     * @return self
     */
    public function setPostBookingHKValidation(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingPostBookingHKValidation $postBookingHKValidation): self
    {
        $this->postBookingHKValidation = $postBookingHKValidation;

        return $this;
    }

    /**
     * 'WaitForAirlineRecLoc' is used to check, whether the airline record locators have been returned by Air segment providers.
    If one or more locators are not returned after the specified interval and number of attempts, the service will send a warning message.
    'WaitForAirlineRecLoc' must be combined with 'PostProcessing.RedisplayReservation'='true'.

     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingWaitForAirlineRecLoc|null
     */
    public function getWaitForAirlineRecLoc(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingWaitForAirlineRecLoc
    {
        return $this->waitForAirlineRecLoc;
    }

    /**
     * 'WaitForAirlineRecLoc' is used to check, whether the airline record locators have been returned by Air segment providers.
    If one or more locators are not returned after the specified interval and number of attempts, the service will send a warning message.
    'WaitForAirlineRecLoc' must be combined with 'PostProcessing.RedisplayReservation'='true'.

     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingWaitForAirlineRecLoc|null $waitForAirlineRecLoc
     *
     * @return self
     */
    public function setWaitForAirlineRecLoc(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingWaitForAirlineRecLoc $waitForAirlineRecLoc): self
    {
        $this->waitForAirlineRecLoc = $waitForAirlineRecLoc;

        return $this;
    }

    /**
     * 'RedisplayReservation' object is used to indicate whether or not to re-display the PNR.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingRedisplayReservation|null
     */
    public function getRedisplayReservation(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingRedisplayReservation
    {
        return $this->redisplayReservation;
    }

    /**
     * 'RedisplayReservation' object is used to indicate whether or not to re-display the PNR.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingRedisplayReservation|null $redisplayReservation
     *
     * @return self
     */
    public function setRedisplayReservation(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQPostProcessingRedisplayReservation $redisplayReservation): self
    {
        $this->redisplayReservation = $redisplayReservation;

        return $this;
    }

    /**
     * 'UnmaskCreditCard' is used to unmask credit card information in the TIR response.
    Please note that this attribute has an effect only if the user has the EPR keyword CCVIEW.

     *
     * @return bool|null
     */
    public function getUnmaskCreditCard(): ?bool
    {
        return $this->unmaskCreditCard;
    }

    /**
     * 'UnmaskCreditCard' is used to unmask credit card information in the TIR response.
    Please note that this attribute has an effect only if the user has the EPR keyword CCVIEW.

     *
     * @param bool|null $unmaskCreditCard
     *
     * @return self
     */
    public function setUnmaskCreditCard(?bool $unmaskCreditCard): self
    {
        $this->unmaskCreditCard = $unmaskCreditCard;

        return $this;
    }
}
