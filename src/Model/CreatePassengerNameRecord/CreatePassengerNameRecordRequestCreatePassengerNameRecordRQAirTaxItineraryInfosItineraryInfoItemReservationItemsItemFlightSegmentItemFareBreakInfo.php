<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord;

use Ammonkc\SabreApi\AbstractModel;

class CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfo extends AbstractModel
{
    /**
     * The base fare.
     * BaseFare element is needed only with the last flight segment in a fare break.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfoBaseFare
     */
    protected $baseFare;
    /**
     * The equivalent fare.
     * 'EquivalentFare' element is needed only with the last flight segment in a fare break.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfoEquivFare
     */
    protected $equivFare;
    /**
     * The Fare basis code.
     * 'FareBasisCode' information is needed only with the last flight segment in a fare break.
     *
     * @var string
     */
    protected $fareBasisCode;
    /**
     * Used to indicate if a flight segment is the start of a side trip.
     *
     * @var bool
     */
    protected $sideTripStartInd;
    /**
     * Used to indicate if a flight segment is the end of a side trip.
     *
     * @var bool
     */
    protected $sideTripEndInd;
    /**
     * Used to indicate the side trip number to which this flight segment belongs.
     * If more than one side trips in the itinerary, identify side trip to which each flight segment belongs using the SideTripNumber.
     *
     * @var int
     */
    protected $sideTripNumber;
    /**
     * Used to indicate the fare component number to which the flight segment belongs.
     * If more than one fare break is needed, identify the fare component to which each flight segment belongs using the FareComponentNumber.
     *
     * @var int
     */
    protected $fareComponentNumber;

    /**
     * The base fare.
     * BaseFare element is needed only with the last flight segment in a fare break.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfoBaseFare
     */
    public function getBaseFare(): CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfoBaseFare
    {
        return $this->baseFare;
    }

    /**
     * The base fare.
     * BaseFare element is needed only with the last flight segment in a fare break.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfoBaseFare $baseFare
     *
     * @return self
     */
    public function setBaseFare(CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfoBaseFare $baseFare): self
    {
        $this->baseFare = $baseFare;

        return $this;
    }

    /**
     * The equivalent fare.
     * 'EquivalentFare' element is needed only with the last flight segment in a fare break.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfoEquivFare
     */
    public function getEquivFare(): CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfoEquivFare
    {
        return $this->equivFare;
    }

    /**
     * The equivalent fare.
     * 'EquivalentFare' element is needed only with the last flight segment in a fare break.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfoEquivFare $equivFare
     *
     * @return self
     */
    public function setEquivFare(CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirTaxItineraryInfosItineraryInfoItemReservationItemsItemFlightSegmentItemFareBreakInfoEquivFare $equivFare): self
    {
        $this->equivFare = $equivFare;

        return $this;
    }

    /**
     * The Fare basis code.
     * 'FareBasisCode' information is needed only with the last flight segment in a fare break.
     *
     * @return string
     */
    public function getFareBasisCode(): string
    {
        return $this->fareBasisCode;
    }

    /**
     * The Fare basis code.
     * 'FareBasisCode' information is needed only with the last flight segment in a fare break.
     *
     * @param string $fareBasisCode
     *
     * @return self
     */
    public function setFareBasisCode(string $fareBasisCode): self
    {
        $this->fareBasisCode = $fareBasisCode;

        return $this;
    }

    /**
     * Used to indicate if a flight segment is the start of a side trip.
     *
     * @return bool
     */
    public function getSideTripStartInd(): bool
    {
        return $this->sideTripStartInd;
    }

    /**
     * Used to indicate if a flight segment is the start of a side trip.
     *
     * @param bool $sideTripStartInd
     *
     * @return self
     */
    public function setSideTripStartInd(bool $sideTripStartInd): self
    {
        $this->sideTripStartInd = $sideTripStartInd;

        return $this;
    }

    /**
     * Used to indicate if a flight segment is the end of a side trip.
     *
     * @return bool
     */
    public function getSideTripEndInd(): bool
    {
        return $this->sideTripEndInd;
    }

    /**
     * Used to indicate if a flight segment is the end of a side trip.
     *
     * @param bool $sideTripEndInd
     *
     * @return self
     */
    public function setSideTripEndInd(bool $sideTripEndInd): self
    {
        $this->sideTripEndInd = $sideTripEndInd;

        return $this;
    }

    /**
     * Used to indicate the side trip number to which this flight segment belongs.
     * If more than one side trips in the itinerary, identify side trip to which each flight segment belongs using the SideTripNumber.
     *
     * @return int
     */
    public function getSideTripNumber(): int
    {
        return $this->sideTripNumber;
    }

    /**
     * Used to indicate the side trip number to which this flight segment belongs.
     * If more than one side trips in the itinerary, identify side trip to which each flight segment belongs using the SideTripNumber.
     *
     * @param int $sideTripNumber
     *
     * @return self
     */
    public function setSideTripNumber(int $sideTripNumber): self
    {
        $this->sideTripNumber = $sideTripNumber;

        return $this;
    }

    /**
     * Used to indicate the fare component number to which the flight segment belongs.
     * If more than one fare break is needed, identify the fare component to which each flight segment belongs using the FareComponentNumber.
     *
     * @return int
     */
    public function getFareComponentNumber(): int
    {
        return $this->fareComponentNumber;
    }

    /**
     * Used to indicate the fare component number to which the flight segment belongs.
     * If more than one fare break is needed, identify the fare component to which each flight segment belongs using the FareComponentNumber.
     *
     * @param int $fareComponentNumber
     *
     * @return self
     */
    public function setFareComponentNumber(int $fareComponentNumber): self
    {
        $this->fareComponentNumber = $fareComponentNumber;

        return $this;
    }
}
