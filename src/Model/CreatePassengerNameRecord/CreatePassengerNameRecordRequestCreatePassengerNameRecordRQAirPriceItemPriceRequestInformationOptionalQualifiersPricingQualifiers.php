<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\CreatePassengerNameRecord;

use Ammonkc\SabreApi\AbstractModel;

class CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiers extends AbstractModel
{
    /**
     * Used to specify an account code to price with.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersAccount
     */
    protected $account;
    /**
     * Please note that the AlternativePricing node can only be used together with .../PriceRequestInformation/@AlternativePricing set to "true".
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersAlternativePricing
     */
    protected $alternativePricing;
    /**
     * Used to instruct the system to price an itinerary according to a specified banker's selling rate.
     *
     * @var string
     */
    protected $bankersSellingRate;
    /**
     * Used to instruct the system to search out lower fares based upon the existing itinerary segments.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersBargainFinder
     */
    protected $bargainFinder;
    /**
     * Used to exclude Basic Economy Fares (up to 5 booking classes can be selected). Please note that this element is only applicable to airline customers. "BasicEconomyExclude" can only be used with .../BargainFinder.
     *
     * @var string[]
     */
    protected $basicEconomyExclude;
    /**
     * Used to specify a brand. Please note that it's not possible to request more than 1 brand for an entire journey, or for the same segment.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersBrandItem[]
     */
    protected $brand;
    /**
     * Used to instruct the system to specify the purchase date for the fare. "BuyingDate" follows this format: YYYY-MM-DD.
     *
     * @var string
     */
    protected $buyingDate;
    /**
     * Used to instruct the system to specify fares by a specific cabin or the lowest fare across all cabins. Please note that Cabin may only be used together with .../PriceRequestInformation/OptionalQualifiers/PricingQualifiers/BargainFinder or .../PriceRequestInformation/OptionalQualifiers/PricingQualifiers/AlternativePricing/Overrides/NoMatch.
     *
     * @var string
     */
    protected $cabin;
    /**
     * All of the CommandPricing entries are concerned with specifying fare basis codes, ticket designators, and discounts. This base level command is WPQ followed by one or more of the below elements.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersCommandPricingItem[]
     */
    protected $commandPricing;
    /**
     * Used to select specific contracts to process at a time of pricing.
     *
     * @var string[]
     */
    protected $commissionContract;
    /**
     * Used to specify a corporate ID to price with.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersCorporate
     */
    protected $corporate;
    /**
     * Please note that this functionality is restricted to Sabre's Asian joint venture customers.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFare
     */
    protected $fare;
    /**
     * Different fare options.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFareOptions
     */
    protected $fareOptions;
    /**
     * Pricing variables related to itinerary.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersItineraryOptions
     */
    protected $itineraryOptions;
    /**
     * Used to to specify the markup/down amount that's to be applied at time of pricing to create a manually Adjusted Selling Level fare.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersManuallyAdjustedSellingLevelItem[]
     */
    protected $manuallyAdjustedSellingLevel;
    /**
     * Used to instruct the system to price the itinerary based upon a particular name field.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersNameSelectItem[]
     */
    protected $nameSelect;
    /**
     * /NetRemit is ONLY applicable to BSP-based subscribers. /NetRemit is NOT applicable to ARC-based subscribers.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersNetRemit
     */
    protected $netRemit;
    /**
     * Pricing overrides.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersOverrides
     */
    protected $overrides;
    /**
     * Used to is used to instruct the system to price the itinerary with a specified passenger status code. Equivalent Sabre host command: WPEM/(country or state code), WPRY/(country or state code), WPNT/(country or state code).
     *
     * @var string
     */
    protected $passengerStatus;
    /**
     * Used to specify a passenger type code.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersPassengerTypeItem[]
     */
    protected $passengerType;
    /**
     * Used to specify an amount to add on top of the fare.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersPlusUp
     */
    protected $plusUp;
    /**
     * Used to price an itinerary incorporating fares linked to a specific Retailer Rule Qualifier code.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersRetailerRuleQualifier
     */
    protected $retailerRuleQualifier;
    /**
     * Used to specify a ship's country of registration. This element is only to be used when .../PassengerType@Code="SEA".
     *
     * @var string
     */
    protected $shipsRegistry;
    /**
     * Used to specify the Spanish large family discount level. Please note that this qualifier is only applicable to Spain-based subscribers.
     *
     * @var string
     */
    protected $spanishLargeFamilyDiscountLevel;
    /**
     * Used to specify the Island Resident code applicable for discount.
     *
     * @var string
     */
    protected $spanishResidentDiscount;
    /**
     * This element is only applicable to Abacus.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersSpecificFareItem[]
     */
    protected $specificFare;
    /**
     * Used to specify change or cancellation amounts for an itinerary.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersSpecificPenalty
     */
    protected $specificPenalty;
    /**
     * Tax related pricing variables.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersTaxes
     */
    protected $taxes;
    /**
     * Used to specify ticket validity dates.
     *
     * @var CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersValidityDatesItem[]
     */
    protected $validityDates;
    /**
     * Used to specify an alternate currency code to price with.
     *
     * @var string
     */
    protected $alternateCurrencyCode;
    /**
     * Used to specify a currency code to price with.
     *
     * @var string
     */
    protected $currencyCode;
    /**
     * Used to exclude aggregated content. Please note that it can only be combined with .../PriceRequestInformation/OptionalQualifiers/PricingQualifiers/BargainFinder.
     *
     * @var bool
     */
    protected $aggregatedContentExclude;
    /**
     * Used to exclude or ignore fare focus fares.
     *
     * @var bool
     */
    protected $fareFocusExclude;
    /**
     * Used to price itinerary without a date.
     *
     * @var bool
     */
    protected $noDate;
    /**
     * Allows a request for a round the world/circle trip fare.
     *
     * @var bool
     */
    protected $roundTheWorld;
    /**
     * Used to specify the pricing source.
     *
     * @var string
     */
    protected $source;

    /**
     * Used to specify an account code to price with.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersAccount
     */
    public function getAccount(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersAccount
    {
        return $this->account;
    }

    /**
     * Used to specify an account code to price with.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersAccount $account
     *
     * @return self
     */
    public function setAccount(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersAccount $account): self
    {
        $this->account = $account;

        return $this;
    }

    /**
     * Please note that the AlternativePricing node can only be used together with .../PriceRequestInformation/@AlternativePricing set to "true".
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersAlternativePricing
     */
    public function getAlternativePricing(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersAlternativePricing
    {
        return $this->alternativePricing;
    }

    /**
     * Please note that the AlternativePricing node can only be used together with .../PriceRequestInformation/@AlternativePricing set to "true".
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersAlternativePricing $alternativePricing
     *
     * @return self
     */
    public function setAlternativePricing(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersAlternativePricing $alternativePricing): self
    {
        $this->alternativePricing = $alternativePricing;

        return $this;
    }

    /**
     * Used to instruct the system to price an itinerary according to a specified banker's selling rate.
     *
     * @return string
     */
    public function getBankersSellingRate(): ?string
    {
        return $this->bankersSellingRate;
    }

    /**
     * Used to instruct the system to price an itinerary according to a specified banker's selling rate.
     *
     * @param string $bankersSellingRate
     *
     * @return self
     */
    public function setBankersSellingRate(?string $bankersSellingRate): self
    {
        $this->bankersSellingRate = $bankersSellingRate;

        return $this;
    }

    /**
     * Used to instruct the system to search out lower fares based upon the existing itinerary segments.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersBargainFinder
     */
    public function getBargainFinder(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersBargainFinder
    {
        return $this->bargainFinder;
    }

    /**
     * Used to instruct the system to search out lower fares based upon the existing itinerary segments.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersBargainFinder $bargainFinder
     *
     * @return self
     */
    public function setBargainFinder(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersBargainFinder $bargainFinder): self
    {
        $this->bargainFinder = $bargainFinder;

        return $this;
    }

    /**
     * Used to exclude Basic Economy Fares (up to 5 booking classes can be selected). Please note that this element is only applicable to airline customers. "BasicEconomyExclude" can only be used with .../BargainFinder.
     *
     * @return string[]
     */
    public function getBasicEconomyExclude(): ?array
    {
        return $this->basicEconomyExclude;
    }

    /**
     * Used to exclude Basic Economy Fares (up to 5 booking classes can be selected). Please note that this element is only applicable to airline customers. "BasicEconomyExclude" can only be used with .../BargainFinder.
     *
     * @param string[] $basicEconomyExclude
     *
     * @return self
     */
    public function setBasicEconomyExclude(?array $basicEconomyExclude): self
    {
        $this->basicEconomyExclude = $basicEconomyExclude;

        return $this;
    }

    /**
     * Used to specify a brand. Please note that it's not possible to request more than 1 brand for an entire journey, or for the same segment.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersBrandItem[]
     */
    public function getBrand(): ?array
    {
        return $this->brand;
    }

    /**
     * Used to specify a brand. Please note that it's not possible to request more than 1 brand for an entire journey, or for the same segment.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersBrandItem[] $brand
     *
     * @return self
     */
    public function setBrand(?array $brand): self
    {
        $this->brand = $brand;

        return $this;
    }

    /**
     * Used to instruct the system to specify the purchase date for the fare. "BuyingDate" follows this format: YYYY-MM-DD.
     *
     * @return string
     */
    public function getBuyingDate(): ?string
    {
        return $this->buyingDate;
    }

    /**
     * Used to instruct the system to specify the purchase date for the fare. "BuyingDate" follows this format: YYYY-MM-DD.
     *
     * @param string $buyingDate
     *
     * @return self
     */
    public function setBuyingDate(?string $buyingDate): self
    {
        $this->buyingDate = $buyingDate;

        return $this;
    }

    /**
     * Used to instruct the system to specify fares by a specific cabin or the lowest fare across all cabins. Please note that Cabin may only be used together with .../PriceRequestInformation/OptionalQualifiers/PricingQualifiers/BargainFinder or .../PriceRequestInformation/OptionalQualifiers/PricingQualifiers/AlternativePricing/Overrides/NoMatch.
     *
     * @return string
     */
    public function getCabin(): ?string
    {
        return $this->cabin;
    }

    /**
     * Used to instruct the system to specify fares by a specific cabin or the lowest fare across all cabins. Please note that Cabin may only be used together with .../PriceRequestInformation/OptionalQualifiers/PricingQualifiers/BargainFinder or .../PriceRequestInformation/OptionalQualifiers/PricingQualifiers/AlternativePricing/Overrides/NoMatch.
     *
     * @param string $cabin
     *
     * @return self
     */
    public function setCabin(?string $cabin): self
    {
        $this->cabin = $cabin;

        return $this;
    }

    /**
     * All of the CommandPricing entries are concerned with specifying fare basis codes, ticket designators, and discounts. This base level command is WPQ followed by one or more of the below elements.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersCommandPricingItem[]
     */
    public function getCommandPricing(): ?array
    {
        return $this->commandPricing;
    }

    /**
     * All of the CommandPricing entries are concerned with specifying fare basis codes, ticket designators, and discounts. This base level command is WPQ followed by one or more of the below elements.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersCommandPricingItem[] $commandPricing
     *
     * @return self
     */
    public function setCommandPricing(?array $commandPricing): self
    {
        $this->commandPricing = $commandPricing;

        return $this;
    }

    /**
     * Used to select specific contracts to process at a time of pricing.
     *
     * @return string[]
     */
    public function getCommissionContract(): ?array
    {
        return $this->commissionContract;
    }

    /**
     * Used to select specific contracts to process at a time of pricing.
     *
     * @param string[] $commissionContract
     *
     * @return self
     */
    public function setCommissionContract(?array $commissionContract): self
    {
        $this->commissionContract = $commissionContract;

        return $this;
    }

    /**
     * Used to specify a corporate ID to price with.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersCorporate
     */
    public function getCorporate(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersCorporate
    {
        return $this->corporate;
    }

    /**
     * Used to specify a corporate ID to price with.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersCorporate $corporate
     *
     * @return self
     */
    public function setCorporate(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersCorporate $corporate): self
    {
        $this->corporate = $corporate;

        return $this;
    }

    /**
     * Please note that this functionality is restricted to Sabre's Asian joint venture customers.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFare
     */
    public function getFare(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFare
    {
        return $this->fare;
    }

    /**
     * Please note that this functionality is restricted to Sabre's Asian joint venture customers.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFare $fare
     *
     * @return self
     */
    public function setFare(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFare $fare): self
    {
        $this->fare = $fare;

        return $this;
    }

    /**
     * Different fare options.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFareOptions
     */
    public function getFareOptions(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFareOptions
    {
        return $this->fareOptions;
    }

    /**
     * Different fare options.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFareOptions $fareOptions
     *
     * @return self
     */
    public function setFareOptions(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersFareOptions $fareOptions): self
    {
        $this->fareOptions = $fareOptions;

        return $this;
    }

    /**
     * Pricing variables related to itinerary.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersItineraryOptions
     */
    public function getItineraryOptions(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersItineraryOptions
    {
        return $this->itineraryOptions;
    }

    /**
     * Pricing variables related to itinerary.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersItineraryOptions $itineraryOptions
     *
     * @return self
     */
    public function setItineraryOptions(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersItineraryOptions $itineraryOptions): self
    {
        $this->itineraryOptions = $itineraryOptions;

        return $this;
    }

    /**
     * Used to to specify the markup/down amount that's to be applied at time of pricing to create a manually Adjusted Selling Level fare.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersManuallyAdjustedSellingLevelItem[]
     */
    public function getManuallyAdjustedSellingLevel(): ?array
    {
        return $this->manuallyAdjustedSellingLevel;
    }

    /**
     * Used to to specify the markup/down amount that's to be applied at time of pricing to create a manually Adjusted Selling Level fare.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersManuallyAdjustedSellingLevelItem[] $manuallyAdjustedSellingLevel
     *
     * @return self
     */
    public function setManuallyAdjustedSellingLevel(?array $manuallyAdjustedSellingLevel): self
    {
        $this->manuallyAdjustedSellingLevel = $manuallyAdjustedSellingLevel;

        return $this;
    }

    /**
     * Used to instruct the system to price the itinerary based upon a particular name field.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersNameSelectItem[]
     */
    public function getNameSelect(): ?array
    {
        return $this->nameSelect;
    }

    /**
     * Used to instruct the system to price the itinerary based upon a particular name field.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersNameSelectItem[] $nameSelect
     *
     * @return self
     */
    public function setNameSelect(?array $nameSelect): self
    {
        $this->nameSelect = $nameSelect;

        return $this;
    }

    /**
     * /NetRemit is ONLY applicable to BSP-based subscribers. /NetRemit is NOT applicable to ARC-based subscribers.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersNetRemit
     */
    public function getNetRemit(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersNetRemit
    {
        return $this->netRemit;
    }

    /**
     * /NetRemit is ONLY applicable to BSP-based subscribers. /NetRemit is NOT applicable to ARC-based subscribers.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersNetRemit $netRemit
     *
     * @return self
     */
    public function setNetRemit(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersNetRemit $netRemit): self
    {
        $this->netRemit = $netRemit;

        return $this;
    }

    /**
     * Pricing overrides.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersOverrides
     */
    public function getOverrides(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersOverrides
    {
        return $this->overrides;
    }

    /**
     * Pricing overrides.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersOverrides $overrides
     *
     * @return self
     */
    public function setOverrides(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersOverrides $overrides): self
    {
        $this->overrides = $overrides;

        return $this;
    }

    /**
     * Used to is used to instruct the system to price the itinerary with a specified passenger status code. Equivalent Sabre host command: WPEM/(country or state code), WPRY/(country or state code), WPNT/(country or state code).
     *
     * @return string
     */
    public function getPassengerStatus(): ?string
    {
        return $this->passengerStatus;
    }

    /**
     * Used to is used to instruct the system to price the itinerary with a specified passenger status code. Equivalent Sabre host command: WPEM/(country or state code), WPRY/(country or state code), WPNT/(country or state code).
     *
     * @param string $passengerStatus
     *
     * @return self
     */
    public function setPassengerStatus(?string $passengerStatus): self
    {
        $this->passengerStatus = $passengerStatus;

        return $this;
    }

    /**
     * Used to specify a passenger type code.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersPassengerTypeItem[]
     */
    public function getPassengerType(): ?array
    {
        return $this->passengerType;
    }

    /**
     * Used to specify a passenger type code.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersPassengerTypeItem[] $passengerType
     *
     * @return self
     */
    public function setPassengerType(?array $passengerType): self
    {
        $this->passengerType = $passengerType;

        return $this;
    }

    /**
     * Used to specify an amount to add on top of the fare.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersPlusUp
     */
    public function getPlusUp(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersPlusUp
    {
        return $this->plusUp;
    }

    /**
     * Used to specify an amount to add on top of the fare.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersPlusUp $plusUp
     *
     * @return self
     */
    public function setPlusUp(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersPlusUp $plusUp): self
    {
        $this->plusUp = $plusUp;

        return $this;
    }

    /**
     * Used to price an itinerary incorporating fares linked to a specific Retailer Rule Qualifier code.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersRetailerRuleQualifier
     */
    public function getRetailerRuleQualifier(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersRetailerRuleQualifier
    {
        return $this->retailerRuleQualifier;
    }

    /**
     * Used to price an itinerary incorporating fares linked to a specific Retailer Rule Qualifier code.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersRetailerRuleQualifier $retailerRuleQualifier
     *
     * @return self
     */
    public function setRetailerRuleQualifier(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersRetailerRuleQualifier $retailerRuleQualifier): self
    {
        $this->retailerRuleQualifier = $retailerRuleQualifier;

        return $this;
    }

    /**
     * Used to specify a ship's country of registration. This element is only to be used when .../PassengerType@Code="SEA".
     *
     * @return string
     */
    public function getShipsRegistry(): ?string
    {
        return $this->shipsRegistry;
    }

    /**
     * Used to specify a ship's country of registration. This element is only to be used when .../PassengerType@Code="SEA".
     *
     * @param string $shipsRegistry
     *
     * @return self
     */
    public function setShipsRegistry(?string $shipsRegistry): self
    {
        $this->shipsRegistry = $shipsRegistry;

        return $this;
    }

    /**
     * Used to specify the Spanish large family discount level. Please note that this qualifier is only applicable to Spain-based subscribers.
     *
     * @return string
     */
    public function getSpanishLargeFamilyDiscountLevel(): ?string
    {
        return $this->spanishLargeFamilyDiscountLevel;
    }

    /**
     * Used to specify the Spanish large family discount level. Please note that this qualifier is only applicable to Spain-based subscribers.
     *
     * @param string $spanishLargeFamilyDiscountLevel
     *
     * @return self
     */
    public function setSpanishLargeFamilyDiscountLevel(?string $spanishLargeFamilyDiscountLevel): self
    {
        $this->spanishLargeFamilyDiscountLevel = $spanishLargeFamilyDiscountLevel;

        return $this;
    }

    /**
     * Used to specify the Island Resident code applicable for discount.
     *
     * @return string
     */
    public function getSpanishResidentDiscount(): ?string
    {
        return $this->spanishResidentDiscount;
    }

    /**
     * Used to specify the Island Resident code applicable for discount.
     *
     * @param string $spanishResidentDiscount
     *
     * @return self
     */
    public function setSpanishResidentDiscount(?string $spanishResidentDiscount): self
    {
        $this->spanishResidentDiscount = $spanishResidentDiscount;

        return $this;
    }

    /**
     * This element is only applicable to Abacus.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersSpecificFareItem[]
     */
    public function getSpecificFare(): ?array
    {
        return $this->specificFare;
    }

    /**
     * This element is only applicable to Abacus.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersSpecificFareItem[] $specificFare
     *
     * @return self
     */
    public function setSpecificFare(?array $specificFare): self
    {
        $this->specificFare = $specificFare;

        return $this;
    }

    /**
     * Used to specify change or cancellation amounts for an itinerary.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersSpecificPenalty
     */
    public function getSpecificPenalty(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersSpecificPenalty
    {
        return $this->specificPenalty;
    }

    /**
     * Used to specify change or cancellation amounts for an itinerary.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersSpecificPenalty $specificPenalty
     *
     * @return self
     */
    public function setSpecificPenalty(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersSpecificPenalty $specificPenalty): self
    {
        $this->specificPenalty = $specificPenalty;

        return $this;
    }

    /**
     * Tax related pricing variables.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersTaxes
     */
    public function getTaxes(): ?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersTaxes
    {
        return $this->taxes;
    }

    /**
     * Tax related pricing variables.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersTaxes $taxes
     *
     * @return self
     */
    public function setTaxes(?CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersTaxes $taxes): self
    {
        $this->taxes = $taxes;

        return $this;
    }

    /**
     * Used to specify ticket validity dates.
     *
     * @return CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersValidityDatesItem[]
     */
    public function getValidityDates(): ?array
    {
        return $this->validityDates;
    }

    /**
     * Used to specify ticket validity dates.
     *
     * @param CreatePassengerNameRecordRequestCreatePassengerNameRecordRQAirPriceItemPriceRequestInformationOptionalQualifiersPricingQualifiersValidityDatesItem[] $validityDates
     *
     * @return self
     */
    public function setValidityDates(?array $validityDates): self
    {
        $this->validityDates = $validityDates;

        return $this;
    }

    /**
     * Used to specify an alternate currency code to price with.
     *
     * @return string
     */
    public function getAlternateCurrencyCode(): ?string
    {
        return $this->alternateCurrencyCode;
    }

    /**
     * Used to specify an alternate currency code to price with.
     *
     * @param string $alternateCurrencyCode
     *
     * @return self
     */
    public function setAlternateCurrencyCode(?string $alternateCurrencyCode): self
    {
        $this->alternateCurrencyCode = $alternateCurrencyCode;

        return $this;
    }

    /**
     * Used to specify a currency code to price with.
     *
     * @return string
     */
    public function getCurrencyCode(): ?string
    {
        return $this->currencyCode;
    }

    /**
     * Used to specify a currency code to price with.
     *
     * @param string $currencyCode
     *
     * @return self
     */
    public function setCurrencyCode(?string $currencyCode): self
    {
        $this->currencyCode = $currencyCode;

        return $this;
    }

    /**
     * Used to exclude aggregated content. Please note that it can only be combined with .../PriceRequestInformation/OptionalQualifiers/PricingQualifiers/BargainFinder.
     *
     * @return bool
     */
    public function getAggregatedContentExclude(): ?bool
    {
        return $this->aggregatedContentExclude;
    }

    /**
     * Used to exclude aggregated content. Please note that it can only be combined with .../PriceRequestInformation/OptionalQualifiers/PricingQualifiers/BargainFinder.
     *
     * @param bool $aggregatedContentExclude
     *
     * @return self
     */
    public function setAggregatedContentExclude(?bool $aggregatedContentExclude): self
    {
        $this->aggregatedContentExclude = $aggregatedContentExclude;

        return $this;
    }

    /**
     * Used to exclude or ignore fare focus fares.
     *
     * @return bool
     */
    public function getFareFocusExclude(): ?bool
    {
        return $this->fareFocusExclude;
    }

    /**
     * Used to exclude or ignore fare focus fares.
     *
     * @param bool $fareFocusExclude
     *
     * @return self
     */
    public function setFareFocusExclude(?bool $fareFocusExclude): self
    {
        $this->fareFocusExclude = $fareFocusExclude;

        return $this;
    }

    /**
     * Used to price itinerary without a date.
     *
     * @return bool
     */
    public function getNoDate(): ?bool
    {
        return $this->noDate;
    }

    /**
     * Used to price itinerary without a date.
     *
     * @param bool $noDate
     *
     * @return self
     */
    public function setNoDate(?bool $noDate): self
    {
        $this->noDate = $noDate;

        return $this;
    }

    /**
     * Allows a request for a round the world/circle trip fare.
     *
     * @return bool
     */
    public function getRoundTheWorld(): ?bool
    {
        return $this->roundTheWorld;
    }

    /**
     * Allows a request for a round the world/circle trip fare.
     *
     * @param bool $roundTheWorld
     *
     * @return self
     */
    public function setRoundTheWorld(?bool $roundTheWorld): self
    {
        $this->roundTheWorld = $roundTheWorld;

        return $this;
    }

    /**
     * Used to specify the pricing source.
     *
     * @return string
     */
    public function getSource(): ?string
    {
        return $this->source;
    }

    /**
     * Used to specify the pricing source.
     *
     * @param string $source
     *
     * @return self
     */
    public function setSource(?string $source): self
    {
        $this->source = $source;

        return $this;
    }
}
