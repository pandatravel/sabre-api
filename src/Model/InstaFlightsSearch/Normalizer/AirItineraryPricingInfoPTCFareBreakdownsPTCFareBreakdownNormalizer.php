<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\InstaFlightsSearch\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AirItineraryPricingInfoPTCFareBreakdownsPTCFareBreakdownNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\InstaFlightsSearch\\AirItineraryPricingInfoPTCFareBreakdownsPTCFareBreakdown';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\InstaFlightsSearch\AirItineraryPricingInfoPTCFareBreakdownsPTCFareBreakdown;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\InstaFlightsSearch\AirItineraryPricingInfoPTCFareBreakdownsPTCFareBreakdown();
        if (property_exists($data, 'PassengerTypeQuantity')) {
            $object->setPassengerTypeQuantity($this->denormalizer->denormalize($data->{'PassengerTypeQuantity'}, 'Ammonkc\\SabreApi\\Model\\InstaFlightsSearch\\AirItineraryPricingInfoPTCFareBreakdownsPTCFareBreakdownPassengerTypeQuantity', 'json', $context));
        }
        if (property_exists($data, 'FareBasisCodes')) {
            $object->setFareBasisCodes($this->denormalizer->denormalize($data->{'FareBasisCodes'}, 'Ammonkc\\SabreApi\\Model\\InstaFlightsSearch\\AirItineraryPricingInfoPTCFareBreakdownsPTCFareBreakdownFareBasisCodes', 'json', $context));
        }
        if (property_exists($data, 'PassengerFare')) {
            $object->setPassengerFare($this->denormalizer->denormalize($data->{'PassengerFare'}, 'Ammonkc\\SabreApi\\Model\\InstaFlightsSearch\\AirItineraryPricingInfoPTCFareBreakdownsPTCFareBreakdownPassengerFare', 'json', $context));
        }
        if (property_exists($data, 'Endorsements')) {
            $object->setEndorsements($this->denormalizer->denormalize($data->{'Endorsements'}, 'Ammonkc\\SabreApi\\Model\\InstaFlightsSearch\\AirItineraryPricingInfoPTCFareBreakdownsPTCFareBreakdownEndorsements', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getPassengerTypeQuantity()) {
            $data->{'PassengerTypeQuantity'} = $this->normalizer->normalize($object->getPassengerTypeQuantity(), 'json', $context);
        }
        if (null !== $object->getFareBasisCodes()) {
            $data->{'FareBasisCodes'} = $this->normalizer->normalize($object->getFareBasisCodes(), 'json', $context);
        }
        if (null !== $object->getPassengerFare()) {
            $data->{'PassengerFare'} = $this->normalizer->normalize($object->getPassengerFare(), 'json', $context);
        }
        if (null !== $object->getEndorsements()) {
            $data->{'Endorsements'} = $this->normalizer->normalize($object->getEndorsements(), 'json', $context);
        }

        return $data;
    }
}
