<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Ammonkc\SabreApi\Model\InstaFlightsSearch\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class InstaFlightsSearchResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Ammonkc\\SabreApi\\Model\\InstaFlightsSearch\\InstaFlightsSearchResponse';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Ammonkc\SabreApi\Model\InstaFlightsSearch\InstaFlightsSearchResponse;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \Ammonkc\SabreApi\Model\InstaFlightsSearch\InstaFlightsSearchResponse();
        if (property_exists($data, 'ReturnDateTime')) {
            $object->setReturnDateTime($data->{'ReturnDateTime'});
        }
        if (property_exists($data, 'DepartureDateTime')) {
            $object->setDepartureDateTime($data->{'DepartureDateTime'});
        }
        if (property_exists($data, 'DestinationLocation')) {
            $object->setDestinationLocation($data->{'DestinationLocation'});
        }
        if (property_exists($data, 'OriginLocation')) {
            $object->setOriginLocation($data->{'OriginLocation'});
        }
        if (property_exists($data, 'PricedItineraries')) {
            $values = [];
            foreach ($data->{'PricedItineraries'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Ammonkc\\SabreApi\\Model\\InstaFlightsSearch\\InstaFlightsSearchResponsePricedItinerariesItem', 'json', $context);
            }
            $object->setPricedItineraries($values);
        }
        if (property_exists($data, 'Page')) {
            $object->setPage($this->denormalizer->denormalize($data->{'Page'}, 'Ammonkc\\SabreApi\\Model\\InstaFlightsSearch\\InstaFlightsSearchResponsePage', 'json', $context));
        }
        if (property_exists($data, 'Links')) {
            $values_1 = [];
            foreach ($data->{'Links'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Ammonkc\\SabreApi\\Model\\InstaFlightsSearch\\InstaFlightsSearchResponseLinksItem', 'json', $context);
            }
            $object->setLinks($values_1);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getReturnDateTime()) {
            $data->{'ReturnDateTime'} = $object->getReturnDateTime();
        }
        if (null !== $object->getDepartureDateTime()) {
            $data->{'DepartureDateTime'} = $object->getDepartureDateTime();
        }
        if (null !== $object->getDestinationLocation()) {
            $data->{'DestinationLocation'} = $object->getDestinationLocation();
        }
        if (null !== $object->getOriginLocation()) {
            $data->{'OriginLocation'} = $object->getOriginLocation();
        }
        if (null !== $object->getPricedItineraries()) {
            $values = [];
            foreach ($object->getPricedItineraries() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'PricedItineraries'} = $values;
        }
        if (null !== $object->getPage()) {
            $data->{'Page'} = $this->normalizer->normalize($object->getPage(), 'json', $context);
        }
        if (null !== $object->getLinks()) {
            $values_1 = [];
            foreach ($object->getLinks() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'Links'} = $values_1;
        }

        return $data;
    }
}
